
H745_BNO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012584  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08012824  08012824  00022824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012d18  08012d18  0003014c  2**0
                  CONTENTS
  4 .ARM          00000008  08012d18  08012d18  00022d18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012d20  08012d20  0003014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08012d20  08012d20  00022d20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08012d28  08012d28  00022d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  24000000  08012d30  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  2400008c  08012dbc  0003008c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000ec  08012e1c  000300ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000138c  24000150  08012e7c  00030150  2**3
                  ALLOC
 12 ._user_heap_stack 00000604  240014dc  08012e7c  000314dc  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0003014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039d74  00000000  00000000  0003017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000563d  00000000  00000000  00069eee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001dc8  00000000  00000000  0006f530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001bf8  00000000  00000000  000712f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00043574  00000000  00000000  00072ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002a47f  00000000  00000000  000b6464  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a0b51  00000000  00000000  000e08e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00281434  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009d34  00000000  00000000  00281484  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000150 	.word	0x24000150
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801280c 	.word	0x0801280c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000154 	.word	0x24000154
 80002dc:	0801280c 	.word	0x0801280c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003a4:	f000 b974 	b.w	8000690 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468e      	mov	lr, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d14d      	bne.n	800046a <__udivmoddi4+0xaa>
 80003ce:	428a      	cmp	r2, r1
 80003d0:	4694      	mov	ip, r2
 80003d2:	d969      	bls.n	80004a8 <__udivmoddi4+0xe8>
 80003d4:	fab2 f282 	clz	r2, r2
 80003d8:	b152      	cbz	r2, 80003f0 <__udivmoddi4+0x30>
 80003da:	fa01 f302 	lsl.w	r3, r1, r2
 80003de:	f1c2 0120 	rsb	r1, r2, #32
 80003e2:	fa20 f101 	lsr.w	r1, r0, r1
 80003e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80003ea:	ea41 0e03 	orr.w	lr, r1, r3
 80003ee:	4094      	lsls	r4, r2
 80003f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003f4:	0c21      	lsrs	r1, r4, #16
 80003f6:	fbbe f6f8 	udiv	r6, lr, r8
 80003fa:	fa1f f78c 	uxth.w	r7, ip
 80003fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000402:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000406:	fb06 f107 	mul.w	r1, r6, r7
 800040a:	4299      	cmp	r1, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x64>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000416:	f080 811f 	bcs.w	8000658 <__udivmoddi4+0x298>
 800041a:	4299      	cmp	r1, r3
 800041c:	f240 811c 	bls.w	8000658 <__udivmoddi4+0x298>
 8000420:	3e02      	subs	r6, #2
 8000422:	4463      	add	r3, ip
 8000424:	1a5b      	subs	r3, r3, r1
 8000426:	b2a4      	uxth	r4, r4
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3310 	mls	r3, r8, r0, r3
 8000430:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000434:	fb00 f707 	mul.w	r7, r0, r7
 8000438:	42a7      	cmp	r7, r4
 800043a:	d90a      	bls.n	8000452 <__udivmoddi4+0x92>
 800043c:	eb1c 0404 	adds.w	r4, ip, r4
 8000440:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000444:	f080 810a 	bcs.w	800065c <__udivmoddi4+0x29c>
 8000448:	42a7      	cmp	r7, r4
 800044a:	f240 8107 	bls.w	800065c <__udivmoddi4+0x29c>
 800044e:	4464      	add	r4, ip
 8000450:	3802      	subs	r0, #2
 8000452:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000456:	1be4      	subs	r4, r4, r7
 8000458:	2600      	movs	r6, #0
 800045a:	b11d      	cbz	r5, 8000464 <__udivmoddi4+0xa4>
 800045c:	40d4      	lsrs	r4, r2
 800045e:	2300      	movs	r3, #0
 8000460:	e9c5 4300 	strd	r4, r3, [r5]
 8000464:	4631      	mov	r1, r6
 8000466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800046a:	428b      	cmp	r3, r1
 800046c:	d909      	bls.n	8000482 <__udivmoddi4+0xc2>
 800046e:	2d00      	cmp	r5, #0
 8000470:	f000 80ef 	beq.w	8000652 <__udivmoddi4+0x292>
 8000474:	2600      	movs	r6, #0
 8000476:	e9c5 0100 	strd	r0, r1, [r5]
 800047a:	4630      	mov	r0, r6
 800047c:	4631      	mov	r1, r6
 800047e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000482:	fab3 f683 	clz	r6, r3
 8000486:	2e00      	cmp	r6, #0
 8000488:	d14a      	bne.n	8000520 <__udivmoddi4+0x160>
 800048a:	428b      	cmp	r3, r1
 800048c:	d302      	bcc.n	8000494 <__udivmoddi4+0xd4>
 800048e:	4282      	cmp	r2, r0
 8000490:	f200 80f9 	bhi.w	8000686 <__udivmoddi4+0x2c6>
 8000494:	1a84      	subs	r4, r0, r2
 8000496:	eb61 0303 	sbc.w	r3, r1, r3
 800049a:	2001      	movs	r0, #1
 800049c:	469e      	mov	lr, r3
 800049e:	2d00      	cmp	r5, #0
 80004a0:	d0e0      	beq.n	8000464 <__udivmoddi4+0xa4>
 80004a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80004a6:	e7dd      	b.n	8000464 <__udivmoddi4+0xa4>
 80004a8:	b902      	cbnz	r2, 80004ac <__udivmoddi4+0xec>
 80004aa:	deff      	udf	#255	; 0xff
 80004ac:	fab2 f282 	clz	r2, r2
 80004b0:	2a00      	cmp	r2, #0
 80004b2:	f040 8092 	bne.w	80005da <__udivmoddi4+0x21a>
 80004b6:	eba1 010c 	sub.w	r1, r1, ip
 80004ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004be:	fa1f fe8c 	uxth.w	lr, ip
 80004c2:	2601      	movs	r6, #1
 80004c4:	0c20      	lsrs	r0, r4, #16
 80004c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80004ca:	fb07 1113 	mls	r1, r7, r3, r1
 80004ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004d2:	fb0e f003 	mul.w	r0, lr, r3
 80004d6:	4288      	cmp	r0, r1
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x12c>
 80004da:	eb1c 0101 	adds.w	r1, ip, r1
 80004de:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80004e2:	d202      	bcs.n	80004ea <__udivmoddi4+0x12a>
 80004e4:	4288      	cmp	r0, r1
 80004e6:	f200 80cb 	bhi.w	8000680 <__udivmoddi4+0x2c0>
 80004ea:	4643      	mov	r3, r8
 80004ec:	1a09      	subs	r1, r1, r0
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f4:	fb07 1110 	mls	r1, r7, r0, r1
 80004f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80004fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000500:	45a6      	cmp	lr, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x156>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800050c:	d202      	bcs.n	8000514 <__udivmoddi4+0x154>
 800050e:	45a6      	cmp	lr, r4
 8000510:	f200 80bb 	bhi.w	800068a <__udivmoddi4+0x2ca>
 8000514:	4608      	mov	r0, r1
 8000516:	eba4 040e 	sub.w	r4, r4, lr
 800051a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800051e:	e79c      	b.n	800045a <__udivmoddi4+0x9a>
 8000520:	f1c6 0720 	rsb	r7, r6, #32
 8000524:	40b3      	lsls	r3, r6
 8000526:	fa22 fc07 	lsr.w	ip, r2, r7
 800052a:	ea4c 0c03 	orr.w	ip, ip, r3
 800052e:	fa20 f407 	lsr.w	r4, r0, r7
 8000532:	fa01 f306 	lsl.w	r3, r1, r6
 8000536:	431c      	orrs	r4, r3
 8000538:	40f9      	lsrs	r1, r7
 800053a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800053e:	fa00 f306 	lsl.w	r3, r0, r6
 8000542:	fbb1 f8f9 	udiv	r8, r1, r9
 8000546:	0c20      	lsrs	r0, r4, #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fb09 1118 	mls	r1, r9, r8, r1
 8000550:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000554:	fb08 f00e 	mul.w	r0, r8, lr
 8000558:	4288      	cmp	r0, r1
 800055a:	fa02 f206 	lsl.w	r2, r2, r6
 800055e:	d90b      	bls.n	8000578 <__udivmoddi4+0x1b8>
 8000560:	eb1c 0101 	adds.w	r1, ip, r1
 8000564:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000568:	f080 8088 	bcs.w	800067c <__udivmoddi4+0x2bc>
 800056c:	4288      	cmp	r0, r1
 800056e:	f240 8085 	bls.w	800067c <__udivmoddi4+0x2bc>
 8000572:	f1a8 0802 	sub.w	r8, r8, #2
 8000576:	4461      	add	r1, ip
 8000578:	1a09      	subs	r1, r1, r0
 800057a:	b2a4      	uxth	r4, r4
 800057c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000580:	fb09 1110 	mls	r1, r9, r0, r1
 8000584:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000588:	fb00 fe0e 	mul.w	lr, r0, lr
 800058c:	458e      	cmp	lr, r1
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x1e2>
 8000590:	eb1c 0101 	adds.w	r1, ip, r1
 8000594:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000598:	d26c      	bcs.n	8000674 <__udivmoddi4+0x2b4>
 800059a:	458e      	cmp	lr, r1
 800059c:	d96a      	bls.n	8000674 <__udivmoddi4+0x2b4>
 800059e:	3802      	subs	r0, #2
 80005a0:	4461      	add	r1, ip
 80005a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80005a6:	fba0 9402 	umull	r9, r4, r0, r2
 80005aa:	eba1 010e 	sub.w	r1, r1, lr
 80005ae:	42a1      	cmp	r1, r4
 80005b0:	46c8      	mov	r8, r9
 80005b2:	46a6      	mov	lr, r4
 80005b4:	d356      	bcc.n	8000664 <__udivmoddi4+0x2a4>
 80005b6:	d053      	beq.n	8000660 <__udivmoddi4+0x2a0>
 80005b8:	b15d      	cbz	r5, 80005d2 <__udivmoddi4+0x212>
 80005ba:	ebb3 0208 	subs.w	r2, r3, r8
 80005be:	eb61 010e 	sbc.w	r1, r1, lr
 80005c2:	fa01 f707 	lsl.w	r7, r1, r7
 80005c6:	fa22 f306 	lsr.w	r3, r2, r6
 80005ca:	40f1      	lsrs	r1, r6
 80005cc:	431f      	orrs	r7, r3
 80005ce:	e9c5 7100 	strd	r7, r1, [r5]
 80005d2:	2600      	movs	r6, #0
 80005d4:	4631      	mov	r1, r6
 80005d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	40d8      	lsrs	r0, r3
 80005e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80005e4:	fa21 f303 	lsr.w	r3, r1, r3
 80005e8:	4091      	lsls	r1, r2
 80005ea:	4301      	orrs	r1, r0
 80005ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f0:	fa1f fe8c 	uxth.w	lr, ip
 80005f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80005f8:	fb07 3610 	mls	r6, r7, r0, r3
 80005fc:	0c0b      	lsrs	r3, r1, #16
 80005fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000602:	fb00 f60e 	mul.w	r6, r0, lr
 8000606:	429e      	cmp	r6, r3
 8000608:	fa04 f402 	lsl.w	r4, r4, r2
 800060c:	d908      	bls.n	8000620 <__udivmoddi4+0x260>
 800060e:	eb1c 0303 	adds.w	r3, ip, r3
 8000612:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000616:	d22f      	bcs.n	8000678 <__udivmoddi4+0x2b8>
 8000618:	429e      	cmp	r6, r3
 800061a:	d92d      	bls.n	8000678 <__udivmoddi4+0x2b8>
 800061c:	3802      	subs	r0, #2
 800061e:	4463      	add	r3, ip
 8000620:	1b9b      	subs	r3, r3, r6
 8000622:	b289      	uxth	r1, r1
 8000624:	fbb3 f6f7 	udiv	r6, r3, r7
 8000628:	fb07 3316 	mls	r3, r7, r6, r3
 800062c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000630:	fb06 f30e 	mul.w	r3, r6, lr
 8000634:	428b      	cmp	r3, r1
 8000636:	d908      	bls.n	800064a <__udivmoddi4+0x28a>
 8000638:	eb1c 0101 	adds.w	r1, ip, r1
 800063c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000640:	d216      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000642:	428b      	cmp	r3, r1
 8000644:	d914      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000646:	3e02      	subs	r6, #2
 8000648:	4461      	add	r1, ip
 800064a:	1ac9      	subs	r1, r1, r3
 800064c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000650:	e738      	b.n	80004c4 <__udivmoddi4+0x104>
 8000652:	462e      	mov	r6, r5
 8000654:	4628      	mov	r0, r5
 8000656:	e705      	b.n	8000464 <__udivmoddi4+0xa4>
 8000658:	4606      	mov	r6, r0
 800065a:	e6e3      	b.n	8000424 <__udivmoddi4+0x64>
 800065c:	4618      	mov	r0, r3
 800065e:	e6f8      	b.n	8000452 <__udivmoddi4+0x92>
 8000660:	454b      	cmp	r3, r9
 8000662:	d2a9      	bcs.n	80005b8 <__udivmoddi4+0x1f8>
 8000664:	ebb9 0802 	subs.w	r8, r9, r2
 8000668:	eb64 0e0c 	sbc.w	lr, r4, ip
 800066c:	3801      	subs	r0, #1
 800066e:	e7a3      	b.n	80005b8 <__udivmoddi4+0x1f8>
 8000670:	4646      	mov	r6, r8
 8000672:	e7ea      	b.n	800064a <__udivmoddi4+0x28a>
 8000674:	4620      	mov	r0, r4
 8000676:	e794      	b.n	80005a2 <__udivmoddi4+0x1e2>
 8000678:	4640      	mov	r0, r8
 800067a:	e7d1      	b.n	8000620 <__udivmoddi4+0x260>
 800067c:	46d0      	mov	r8, sl
 800067e:	e77b      	b.n	8000578 <__udivmoddi4+0x1b8>
 8000680:	3b02      	subs	r3, #2
 8000682:	4461      	add	r1, ip
 8000684:	e732      	b.n	80004ec <__udivmoddi4+0x12c>
 8000686:	4630      	mov	r0, r6
 8000688:	e709      	b.n	800049e <__udivmoddi4+0xde>
 800068a:	4464      	add	r4, ip
 800068c:	3802      	subs	r0, #2
 800068e:	e742      	b.n	8000516 <__udivmoddi4+0x156>

08000690 <__aeabi_idiv0>:
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop

08000694 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000694:	b480      	push	{r7}
 8000696:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000698:	4b3d      	ldr	r3, [pc, #244]	; (8000790 <SystemInit+0xfc>)
 800069a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800069e:	4a3c      	ldr	r2, [pc, #240]	; (8000790 <SystemInit+0xfc>)
 80006a0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80006a4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0xfc>)
 80006aa:	691b      	ldr	r3, [r3, #16]
 80006ac:	4a38      	ldr	r2, [pc, #224]	; (8000790 <SystemInit+0xfc>)
 80006ae:	f043 0310 	orr.w	r3, r3, #16
 80006b2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006b4:	4b37      	ldr	r3, [pc, #220]	; (8000794 <SystemInit+0x100>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f003 030f 	and.w	r3, r3, #15
 80006bc:	2b06      	cmp	r3, #6
 80006be:	d807      	bhi.n	80006d0 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006c0:	4b34      	ldr	r3, [pc, #208]	; (8000794 <SystemInit+0x100>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f023 030f 	bic.w	r3, r3, #15
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x100>)
 80006ca:	f043 0307 	orr.w	r3, r3, #7
 80006ce:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006d0:	4b31      	ldr	r3, [pc, #196]	; (8000798 <SystemInit+0x104>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	4a30      	ldr	r2, [pc, #192]	; (8000798 <SystemInit+0x104>)
 80006d6:	f043 0301 	orr.w	r3, r3, #1
 80006da:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x104>)
 80006de:	2200      	movs	r2, #0
 80006e0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006e2:	4b2d      	ldr	r3, [pc, #180]	; (8000798 <SystemInit+0x104>)
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	492c      	ldr	r1, [pc, #176]	; (8000798 <SystemInit+0x104>)
 80006e8:	4b2c      	ldr	r3, [pc, #176]	; (800079c <SystemInit+0x108>)
 80006ea:	4013      	ands	r3, r2
 80006ec:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ee:	4b29      	ldr	r3, [pc, #164]	; (8000794 <SystemInit+0x100>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f003 0308 	and.w	r3, r3, #8
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d007      	beq.n	800070a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006fa:	4b26      	ldr	r3, [pc, #152]	; (8000794 <SystemInit+0x100>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	f023 030f 	bic.w	r3, r3, #15
 8000702:	4a24      	ldr	r2, [pc, #144]	; (8000794 <SystemInit+0x100>)
 8000704:	f043 0307 	orr.w	r3, r3, #7
 8000708:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800070a:	4b23      	ldr	r3, [pc, #140]	; (8000798 <SystemInit+0x104>)
 800070c:	2200      	movs	r2, #0
 800070e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000710:	4b21      	ldr	r3, [pc, #132]	; (8000798 <SystemInit+0x104>)
 8000712:	2200      	movs	r2, #0
 8000714:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000716:	4b20      	ldr	r3, [pc, #128]	; (8000798 <SystemInit+0x104>)
 8000718:	2200      	movs	r2, #0
 800071a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800071c:	4b1e      	ldr	r3, [pc, #120]	; (8000798 <SystemInit+0x104>)
 800071e:	4a20      	ldr	r2, [pc, #128]	; (80007a0 <SystemInit+0x10c>)
 8000720:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000722:	4b1d      	ldr	r3, [pc, #116]	; (8000798 <SystemInit+0x104>)
 8000724:	4a1f      	ldr	r2, [pc, #124]	; (80007a4 <SystemInit+0x110>)
 8000726:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000728:	4b1b      	ldr	r3, [pc, #108]	; (8000798 <SystemInit+0x104>)
 800072a:	4a1f      	ldr	r2, [pc, #124]	; (80007a8 <SystemInit+0x114>)
 800072c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800072e:	4b1a      	ldr	r3, [pc, #104]	; (8000798 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000734:	4b18      	ldr	r3, [pc, #96]	; (8000798 <SystemInit+0x104>)
 8000736:	4a1c      	ldr	r2, [pc, #112]	; (80007a8 <SystemInit+0x114>)
 8000738:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800073a:	4b17      	ldr	r3, [pc, #92]	; (8000798 <SystemInit+0x104>)
 800073c:	2200      	movs	r2, #0
 800073e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000740:	4b15      	ldr	r3, [pc, #84]	; (8000798 <SystemInit+0x104>)
 8000742:	4a19      	ldr	r2, [pc, #100]	; (80007a8 <SystemInit+0x114>)
 8000744:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000746:	4b14      	ldr	r3, [pc, #80]	; (8000798 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <SystemInit+0x104>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a11      	ldr	r2, [pc, #68]	; (8000798 <SystemInit+0x104>)
 8000752:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000756:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <SystemInit+0x104>)
 800075a:	2200      	movs	r2, #0
 800075c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x118>)
 8000760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000762:	4a12      	ldr	r2, [pc, #72]	; (80007ac <SystemInit+0x118>)
 8000764:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000768:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800076a:	4b11      	ldr	r3, [pc, #68]	; (80007b0 <SystemInit+0x11c>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x120>)
 8000770:	4013      	ands	r3, r2
 8000772:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000776:	d202      	bcs.n	800077e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <SystemInit+0x124>)
 800077a:	2201      	movs	r2, #1
 800077c:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <SystemInit+0x128>)
 8000780:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000784:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	e000ed00 	.word	0xe000ed00
 8000794:	52002000 	.word	0x52002000
 8000798:	58024400 	.word	0x58024400
 800079c:	eaf6ed7f 	.word	0xeaf6ed7f
 80007a0:	02020200 	.word	0x02020200
 80007a4:	01ff0000 	.word	0x01ff0000
 80007a8:	01010280 	.word	0x01010280
 80007ac:	580000c0 	.word	0x580000c0
 80007b0:	5c001000 	.word	0x5c001000
 80007b4:	ffff0000 	.word	0xffff0000
 80007b8:	51008108 	.word	0x51008108
 80007bc:	52004000 	.word	0x52004000

080007c0 <_ZN5XicroUt_Ut_Ut_C1Ev>:


        struct{


        struct{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	601a      	str	r2, [r3, #0]
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	4618      	mov	r0, r3
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
	...

080007e4 <_ZN5XicroUt_Ut_C1Ev>:
        struct{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	4618      	mov	r0, r3
 80007f0:	f7ff ffe6 	bl	80007c0 <_ZN5XicroUt_Ut_Ut_C1Ev>
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	f103 0408 	add.w	r4, r3, #8
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4618      	mov	r0, r3
 8000800:	f010 fc4c 	bl	801109c <_ZNSaIcEC1Ev>
 8000804:	f107 030c 	add.w	r3, r7, #12
 8000808:	461a      	mov	r2, r3
 800080a:	4907      	ldr	r1, [pc, #28]	; (8000828 <_ZN5XicroUt_Ut_C1Ev+0x44>)
 800080c:	4620      	mov	r0, r4
 800080e:	f010 fe8f 	bl	8011530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000812:	f107 030c 	add.w	r3, r7, #12
 8000816:	4618      	mov	r0, r3
 8000818:	f010 fc41 	bl	801109e <_ZNSaIcED1Ev>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4618      	mov	r0, r3
 8000820:	3714      	adds	r7, #20
 8000822:	46bd      	mov	sp, r7
 8000824:	bd90      	pop	{r4, r7, pc}
 8000826:	bf00      	nop
 8000828:	08012824 	.word	0x08012824

0800082c <_ZN5XicroUt_Ut0_C1Ev>:
        } stamp;
            std::string frame_id= "";
        } header;


        struct{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6879      	ldr	r1, [r7, #4]
 8000836:	f04f 0200 	mov.w	r2, #0
 800083a:	f04f 0300 	mov.w	r3, #0
 800083e:	e9c1 2300 	strd	r2, r3, [r1]
 8000842:	6879      	ldr	r1, [r7, #4]
 8000844:	f04f 0200 	mov.w	r2, #0
 8000848:	f04f 0300 	mov.w	r3, #0
 800084c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000850:	6879      	ldr	r1, [r7, #4]
 8000852:	f04f 0200 	mov.w	r2, #0
 8000856:	f04f 0300 	mov.w	r3, #0
 800085a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800085e:	6879      	ldr	r1, [r7, #4]
 8000860:	f04f 0200 	mov.w	r2, #0
 8000864:	f04f 0300 	mov.w	r3, #0
 8000868:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4618      	mov	r0, r3
 8000870:	370c      	adds	r7, #12
 8000872:	46bd      	mov	sp, r7
 8000874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000878:	4770      	bx	lr

0800087a <_ZN5XicroUt_Ut1_C1Ev>:
            double z= 0;
            double w= 0;
        } orientation;


        struct{
 800087a:	b480      	push	{r7}
 800087c:	b083      	sub	sp, #12
 800087e:	af00      	add	r7, sp, #0
 8000880:	6078      	str	r0, [r7, #4]
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	f04f 0200 	mov.w	r2, #0
 8000888:	f04f 0300 	mov.w	r3, #0
 800088c:	e9c1 2300 	strd	r2, r3, [r1]
 8000890:	6879      	ldr	r1, [r7, #4]
 8000892:	f04f 0200 	mov.w	r2, #0
 8000896:	f04f 0300 	mov.w	r3, #0
 800089a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	f04f 0200 	mov.w	r2, #0
 80008a4:	f04f 0300 	mov.w	r3, #0
 80008a8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <_ZN5XicroUt_Ut2_C1Ev>:
            double y= 0;
            double z= 0;
        } angular_velocity;


        struct{
 80008ba:	b480      	push	{r7}
 80008bc:	b083      	sub	sp, #12
 80008be:	af00      	add	r7, sp, #0
 80008c0:	6078      	str	r0, [r7, #4]
 80008c2:	6879      	ldr	r1, [r7, #4]
 80008c4:	f04f 0200 	mov.w	r2, #0
 80008c8:	f04f 0300 	mov.w	r3, #0
 80008cc:	e9c1 2300 	strd	r2, r3, [r1]
 80008d0:	6879      	ldr	r1, [r7, #4]
 80008d2:	f04f 0200 	mov.w	r2, #0
 80008d6:	f04f 0300 	mov.w	r3, #0
 80008da:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80008de:	6879      	ldr	r1, [r7, #4]
 80008e0:	f04f 0200 	mov.w	r2, #0
 80008e4:	f04f 0300 	mov.w	r3, #0
 80008e8:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4618      	mov	r0, r3
 80008f0:	370c      	adds	r7, #12
 80008f2:	46bd      	mov	sp, r7
 80008f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f8:	4770      	bx	lr

080008fa <_ZN5XicroUt_C1Ev>:
        struct{
 80008fa:	b580      	push	{r7, lr}
 80008fc:	b082      	sub	sp, #8
 80008fe:	af00      	add	r7, sp, #0
 8000900:	6078      	str	r0, [r7, #4]
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4618      	mov	r0, r3
 8000906:	2348      	movs	r3, #72	; 0x48
 8000908:	461a      	mov	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f010 ff2e 	bl	801176c <memset>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	3348      	adds	r3, #72	; 0x48
 8000914:	2248      	movs	r2, #72	; 0x48
 8000916:	2100      	movs	r1, #0
 8000918:	4618      	mov	r0, r3
 800091a:	f010 ff27 	bl	801176c <memset>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	3390      	adds	r3, #144	; 0x90
 8000922:	2248      	movs	r2, #72	; 0x48
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f010 ff20 	bl	801176c <memset>
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	33d8      	adds	r3, #216	; 0xd8
 8000930:	4618      	mov	r0, r3
 8000932:	f7ff ff57 	bl	80007e4 <_ZN5XicroUt_Ut_C1Ev>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	33f8      	adds	r3, #248	; 0xf8
 800093a:	4618      	mov	r0, r3
 800093c:	f7ff ff76 	bl	800082c <_ZN5XicroUt_Ut0_C1Ev>
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000946:	4618      	mov	r0, r3
 8000948:	f7ff ff97 	bl	800087a <_ZN5XicroUt_Ut1_C1Ev>
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8000952:	4618      	mov	r0, r3
 8000954:	f7ff ffb1 	bl	80008ba <_ZN5XicroUt_Ut2_C1Ev>
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <_ZN5XicroUt0_Ut_Ut_C1Ev>:


        struct{


        struct{
 8000962:	b480      	push	{r7}
 8000964:	b083      	sub	sp, #12
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	605a      	str	r2, [r3, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4618      	mov	r0, r3
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <_ZN5XicroUt0_Ut_C1Ev>:
        struct{
 8000984:	b590      	push	{r4, r7, lr}
 8000986:	b085      	sub	sp, #20
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffe7 	bl	8000962 <_ZN5XicroUt0_Ut_Ut_C1Ev>
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f103 0408 	add.w	r4, r3, #8
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4618      	mov	r0, r3
 80009a0:	f010 fb7c 	bl	801109c <_ZNSaIcEC1Ev>
 80009a4:	f107 030c 	add.w	r3, r7, #12
 80009a8:	461a      	mov	r2, r3
 80009aa:	4907      	ldr	r1, [pc, #28]	; (80009c8 <_ZN5XicroUt0_Ut_C1Ev+0x44>)
 80009ac:	4620      	mov	r0, r4
 80009ae:	f010 fdbf 	bl	8011530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	4618      	mov	r0, r3
 80009b8:	f010 fb71 	bl	801109e <_ZNSaIcED1Ev>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	4618      	mov	r0, r3
 80009c0:	3714      	adds	r7, #20
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd90      	pop	{r4, r7, pc}
 80009c6:	bf00      	nop
 80009c8:	08012824 	.word	0x08012824

080009cc <_ZN5XicroUt0_Ut0_C1Ev>:
        } stamp;
            std::string frame_id= "";
        } header;


        struct{
 80009cc:	b480      	push	{r7}
 80009ce:	b083      	sub	sp, #12
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6879      	ldr	r1, [r7, #4]
 80009d6:	f04f 0200 	mov.w	r2, #0
 80009da:	f04f 0300 	mov.w	r3, #0
 80009de:	e9c1 2300 	strd	r2, r3, [r1]
 80009e2:	6879      	ldr	r1, [r7, #4]
 80009e4:	f04f 0200 	mov.w	r2, #0
 80009e8:	f04f 0300 	mov.w	r3, #0
 80009ec:	e9c1 2302 	strd	r2, r3, [r1, #8]
 80009f0:	6879      	ldr	r1, [r7, #4]
 80009f2:	f04f 0200 	mov.w	r2, #0
 80009f6:	f04f 0300 	mov.w	r3, #0
 80009fa:	e9c1 2304 	strd	r2, r3, [r1, #16]
 80009fe:	6879      	ldr	r1, [r7, #4]
 8000a00:	f04f 0200 	mov.w	r2, #0
 8000a04:	f04f 0300 	mov.w	r3, #0
 8000a08:	e9c1 2306 	strd	r2, r3, [r1, #24]
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_ZN5XicroUt0_Ut1_C1Ev>:
            double z= 0;
            double w= 0;
        } orientation;


        struct{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6879      	ldr	r1, [r7, #4]
 8000a24:	f04f 0200 	mov.w	r2, #0
 8000a28:	f04f 0300 	mov.w	r3, #0
 8000a2c:	e9c1 2300 	strd	r2, r3, [r1]
 8000a30:	6879      	ldr	r1, [r7, #4]
 8000a32:	f04f 0200 	mov.w	r2, #0
 8000a36:	f04f 0300 	mov.w	r3, #0
 8000a3a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 0200 	mov.w	r2, #0
 8000a44:	f04f 0300 	mov.w	r3, #0
 8000a48:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	370c      	adds	r7, #12
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr

08000a5a <_ZN5XicroUt0_Ut2_C1Ev>:
            double y= 0;
            double z= 0;
        } angular_velocity;


        struct{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
 8000a62:	6879      	ldr	r1, [r7, #4]
 8000a64:	f04f 0200 	mov.w	r2, #0
 8000a68:	f04f 0300 	mov.w	r3, #0
 8000a6c:	e9c1 2300 	strd	r2, r3, [r1]
 8000a70:	6879      	ldr	r1, [r7, #4]
 8000a72:	f04f 0200 	mov.w	r2, #0
 8000a76:	f04f 0300 	mov.w	r3, #0
 8000a7a:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8000a7e:	6879      	ldr	r1, [r7, #4]
 8000a80:	f04f 0200 	mov.w	r2, #0
 8000a84:	f04f 0300 	mov.w	r3, #0
 8000a88:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	4618      	mov	r0, r3
 8000a90:	370c      	adds	r7, #12
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr

08000a9a <_ZN5XicroUt0_C1Ev>:
        struct{
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b082      	sub	sp, #8
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	2348      	movs	r3, #72	; 0x48
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	2100      	movs	r1, #0
 8000aac:	f010 fe5e 	bl	801176c <memset>
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	3348      	adds	r3, #72	; 0x48
 8000ab4:	2248      	movs	r2, #72	; 0x48
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f010 fe57 	bl	801176c <memset>
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	3390      	adds	r3, #144	; 0x90
 8000ac2:	2248      	movs	r2, #72	; 0x48
 8000ac4:	2100      	movs	r1, #0
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	f010 fe50 	bl	801176c <memset>
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	33d8      	adds	r3, #216	; 0xd8
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	f7ff ff57 	bl	8000984 <_ZN5XicroUt0_Ut_C1Ev>
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	33f8      	adds	r3, #248	; 0xf8
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff76 	bl	80009cc <_ZN5XicroUt0_Ut0_C1Ev>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f503 738c 	add.w	r3, r3, #280	; 0x118
 8000ae6:	4618      	mov	r0, r3
 8000ae8:	f7ff ff97 	bl	8000a1a <_ZN5XicroUt0_Ut1_C1Ev>
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	f503 7398 	add.w	r3, r3, #304	; 0x130
 8000af2:	4618      	mov	r0, r3
 8000af4:	f7ff ffb1 	bl	8000a5a <_ZN5XicroUt0_Ut2_C1Ev>
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	4618      	mov	r0, r3
 8000afc:	3708      	adds	r7, #8
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
	...

08000b04 <_ZN5XicroC1Ev>:
// ***************************************************************************************************************************************************


#include "Xicro_sub_N_pub_ID_3.h"

Xicro::Xicro(){
 8000b04:	b5b0      	push	{r4, r5, r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f7ff fef3 	bl	80008fa <_ZN5XicroUt_C1Ev>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2203      	movs	r2, #3
 8000b18:	f883 2148 	strb.w	r2, [r3, #328]	; 0x148
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a55      	ldr	r2, [pc, #340]	; (8000c74 <_ZN5XicroC1Ev+0x170>)
 8000b20:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000b24:	4611      	mov	r1, r2
 8000b26:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f010 fdf6 	bl	801171c <memcpy>
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a51      	ldr	r2, [pc, #324]	; (8000c78 <_ZN5XicroC1Ev+0x174>)
 8000b34:	6812      	ldr	r2, [r2, #0]
 8000b36:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4f      	ldr	r2, [pc, #316]	; (8000c7c <_ZN5XicroC1Ev+0x178>)
 8000b3e:	8812      	ldrh	r2, [r2, #0]
 8000b40:	f8a3 2254 	strh.w	r2, [r3, #596]	; 0x254
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a4e      	ldr	r2, [pc, #312]	; (8000c80 <_ZN5XicroC1Ev+0x17c>)
 8000b48:	8812      	ldrh	r2, [r2, #0]
 8000b4a:	f8a3 2256 	strh.w	r2, [r3, #598]	; 0x256
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2200      	movs	r2, #0
 8000b62:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 0200 	mov.w	r2, #0
 8000b6c:	f04f 0300 	mov.w	r3, #0
 8000b70:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	f883 2268 	strb.w	r2, [r3, #616]	; 0x268
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	22ff      	movs	r2, #255	; 0xff
 8000b80:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	2200      	movs	r2, #0
 8000b88:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	2200      	movs	r2, #0
 8000b90:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2200      	movs	r2, #0
 8000b98:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	f503 741c 	add.w	r4, r3, #624	; 0x270
 8000ba2:	f107 030c 	add.w	r3, r7, #12
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f010 fa78 	bl	801109c <_ZNSaIcEC1Ev>
 8000bac:	f107 030c 	add.w	r3, r7, #12
 8000bb0:	461a      	mov	r2, r3
 8000bb2:	4934      	ldr	r1, [pc, #208]	; (8000c84 <_ZN5XicroC1Ev+0x180>)
 8000bb4:	4620      	mov	r0, r4
 8000bb6:	f010 fcbb 	bl	8011530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000bba:	f107 030c 	add.w	r3, r7, #12
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f010 fa6d 	bl	801109e <_ZNSaIcED1Ev>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	2200      	movs	r2, #0
 8000bd0:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	2201      	movs	r2, #1
 8000be8:	f883 270c 	strb.w	r2, [r3, #1804]	; 0x70c
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <_ZN5XicroC1Ev+0x184>)
 8000bf0:	f203 740d 	addw	r4, r3, #1805	; 0x70d
 8000bf4:	4615      	mov	r5, r2
 8000bf6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000bf8:	6020      	str	r0, [r4, #0]
 8000bfa:	6061      	str	r1, [r4, #4]
 8000bfc:	60a2      	str	r2, [r4, #8]
 8000bfe:	60e3      	str	r3, [r4, #12]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	2210      	movs	r2, #16
 8000c04:	f883 271d 	strb.w	r2, [r3, #1821]	; 0x71d
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	4a20      	ldr	r2, [pc, #128]	; (8000c8c <_ZN5XicroC1Ev+0x188>)
 8000c0c:	f203 741e 	addw	r4, r3, #1822	; 0x71e
 8000c10:	4615      	mov	r5, r2
 8000c12:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000c14:	6020      	str	r0, [r4, #0]
 8000c16:	6061      	str	r1, [r4, #4]
 8000c18:	60a2      	str	r2, [r4, #8]
 8000c1a:	60e3      	str	r3, [r4, #12]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 8000c22:	4618      	mov	r0, r3
 8000c24:	f7ff ff39 	bl	8000a9a <_ZN5XicroUt0_C1Ev>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	2200      	movs	r2, #0
 8000c34:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2200      	movs	r2, #0
 8000c44:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8000c4e:	2240      	movs	r2, #64	; 0x40
 8000c50:	2100      	movs	r1, #0
 8000c52:	4618      	mov	r0, r3
 8000c54:	f010 fd8a 	bl	801176c <memset>
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	2200      	movs	r2, #0
 8000c64:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
}
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	3710      	adds	r7, #16
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bdb0      	pop	{r4, r5, r7, pc}
 8000c72:	bf00      	nop
 8000c74:	08012828 	.word	0x08012828
 8000c78:	08012928 	.word	0x08012928
 8000c7c:	0801292c 	.word	0x0801292c
 8000c80:	08012930 	.word	0x08012930
 8000c84:	08012824 	.word	0x08012824
 8000c88:	08012934 	.word	0x08012934
 8000c8c:	08012944 	.word	0x08012944

08000c90 <_ZN5Xicro5beginEP20__UART_HandleTypeDef>:
void Xicro::begin(UART_HandleTypeDef* SerialObject){
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
 8000c98:	6039      	str	r1, [r7, #0]
    _serial=SerialObject;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	683a      	ldr	r2, [r7, #0]
 8000c9e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
    HAL_UART_Receive_DMA(_serial, _UartBuff, 64);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f603 037c 	addw	r3, r3, #2172	; 0x87c
 8000cae:	2240      	movs	r2, #64	; 0x40
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f00e f803 	bl	800ecbc <HAL_UART_Receive_DMA>

  

    // gen
    _nonverify[0][0][0]=&_Sub_fake_Imu.header.stamp.sec;
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	f603 0208 	addw	r2, r3, #2056	; 0x808
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    _nonverify[0][1][0]=&_Sub_fake_Imu.header.stamp.nanosec;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	f603 020c 	addw	r2, r3, #2060	; 0x80c
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
    _nonverify[0][2][0]=&_Sub_fake_Imu.header.frame_id;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	f503 6201 	add.w	r2, r3, #2064	; 0x810
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
    _nonverify[0][3][0]=&_Sub_fake_Imu.orientation.x;
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	f603 0228 	addw	r2, r3, #2088	; 0x828
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	f8c3 22f8 	str.w	r2, [r3, #760]	; 0x2f8
    _nonverify[0][4][0]=&_Sub_fake_Imu.orientation.y;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	f503 6203 	add.w	r2, r3, #2096	; 0x830
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f8c3 231c 	str.w	r2, [r3, #796]	; 0x31c
    _nonverify[0][5][0]=&_Sub_fake_Imu.orientation.z;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f603 0238 	addw	r2, r3, #2104	; 0x838
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	f8c3 2340 	str.w	r2, [r3, #832]	; 0x340
    _nonverify[0][6][0]=&_Sub_fake_Imu.orientation.w;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f503 6204 	add.w	r2, r3, #2112	; 0x840
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	f8c3 2364 	str.w	r2, [r3, #868]	; 0x364
    _nonverify[0][7][0]=&_Sub_fake_Imu.orientation_covariance[0];
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f503 62e6 	add.w	r2, r3, #1840	; 0x730
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	f8c3 2388 	str.w	r2, [r3, #904]	; 0x388
    _nonverify[0][7][1]=&_Sub_fake_Imu.orientation_covariance[1];
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	f503 62e7 	add.w	r2, r3, #1848	; 0x738
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c
    _nonverify[0][7][2]=&_Sub_fake_Imu.orientation_covariance[2];
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	f503 62e8 	add.w	r2, r3, #1856	; 0x740
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390
    _nonverify[0][7][3]=&_Sub_fake_Imu.orientation_covariance[3];
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	f503 62e9 	add.w	r2, r3, #1864	; 0x748
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394
    _nonverify[0][7][4]=&_Sub_fake_Imu.orientation_covariance[4];
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	f503 62ea 	add.w	r2, r3, #1872	; 0x750
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398
    _nonverify[0][7][5]=&_Sub_fake_Imu.orientation_covariance[5];
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	f503 62eb 	add.w	r2, r3, #1880	; 0x758
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f8c3 239c 	str.w	r2, [r3, #924]	; 0x39c
    _nonverify[0][7][6]=&_Sub_fake_Imu.orientation_covariance[6];
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	f503 62ec 	add.w	r2, r3, #1888	; 0x760
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
    _nonverify[0][7][7]=&_Sub_fake_Imu.orientation_covariance[7];
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	f503 62ed 	add.w	r2, r3, #1896	; 0x768
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	f8c3 23a4 	str.w	r2, [r3, #932]	; 0x3a4
    _nonverify[0][7][8]=&_Sub_fake_Imu.orientation_covariance[8];
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	f503 62ee 	add.w	r2, r3, #1904	; 0x770
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	f8c3 23a8 	str.w	r2, [r3, #936]	; 0x3a8
    _nonverify[0][8][0]=&_Sub_fake_Imu.angular_velocity.x;
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f603 0248 	addw	r2, r3, #2120	; 0x848
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	f8c3 23ac 	str.w	r2, [r3, #940]	; 0x3ac
    _nonverify[0][9][0]=&_Sub_fake_Imu.angular_velocity.y;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	f503 6205 	add.w	r2, r3, #2128	; 0x850
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0
    _nonverify[0][10][0]=&_Sub_fake_Imu.angular_velocity.z;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	f603 0258 	addw	r2, r3, #2136	; 0x858
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	f8c3 23f4 	str.w	r2, [r3, #1012]	; 0x3f4
    _nonverify[0][11][0]=&_Sub_fake_Imu.angular_velocity_covariance[0];
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	f503 62ef 	add.w	r2, r3, #1912	; 0x778
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    _nonverify[0][11][1]=&_Sub_fake_Imu.angular_velocity_covariance[1];
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	f503 62f0 	add.w	r2, r3, #1920	; 0x780
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
    _nonverify[0][11][2]=&_Sub_fake_Imu.angular_velocity_covariance[2];
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	f503 62f1 	add.w	r2, r3, #1928	; 0x788
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
    _nonverify[0][11][3]=&_Sub_fake_Imu.angular_velocity_covariance[3];
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f503 62f2 	add.w	r2, r3, #1936	; 0x790
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
    _nonverify[0][11][4]=&_Sub_fake_Imu.angular_velocity_covariance[4];
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	f503 62f3 	add.w	r2, r3, #1944	; 0x798
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
    _nonverify[0][11][5]=&_Sub_fake_Imu.angular_velocity_covariance[5];
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f503 62f4 	add.w	r2, r3, #1952	; 0x7a0
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
    _nonverify[0][11][6]=&_Sub_fake_Imu.angular_velocity_covariance[6];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	f503 62f5 	add.w	r2, r3, #1960	; 0x7a8
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
    _nonverify[0][11][7]=&_Sub_fake_Imu.angular_velocity_covariance[7];
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	f503 62f6 	add.w	r2, r3, #1968	; 0x7b0
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
    _nonverify[0][11][8]=&_Sub_fake_Imu.angular_velocity_covariance[8];
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	f503 62f7 	add.w	r2, r3, #1976	; 0x7b8
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	f8c3 2438 	str.w	r2, [r3, #1080]	; 0x438
    _nonverify[0][12][0]=&_Sub_fake_Imu.linear_acceleration.x;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	f503 6206 	add.w	r2, r3, #2144	; 0x860
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	f8c3 243c 	str.w	r2, [r3, #1084]	; 0x43c
    _nonverify[0][13][0]=&_Sub_fake_Imu.linear_acceleration.y;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	f603 0268 	addw	r2, r3, #2152	; 0x868
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f8c3 2460 	str.w	r2, [r3, #1120]	; 0x460
    _nonverify[0][14][0]=&_Sub_fake_Imu.linear_acceleration.z;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f503 6207 	add.w	r2, r3, #2160	; 0x870
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f8c3 2484 	str.w	r2, [r3, #1156]	; 0x484
    _nonverify[0][15][0]=&_Sub_fake_Imu.linear_acceleration_covariance[0];
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	f503 62f8 	add.w	r2, r3, #1984	; 0x7c0
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f8c3 24a8 	str.w	r2, [r3, #1192]	; 0x4a8
    _nonverify[0][15][1]=&_Sub_fake_Imu.linear_acceleration_covariance[1];
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	f503 62f9 	add.w	r2, r3, #1992	; 0x7c8
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	f8c3 24ac 	str.w	r2, [r3, #1196]	; 0x4ac
    _nonverify[0][15][2]=&_Sub_fake_Imu.linear_acceleration_covariance[2];
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f503 62fa 	add.w	r2, r3, #2000	; 0x7d0
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	f8c3 24b0 	str.w	r2, [r3, #1200]	; 0x4b0
    _nonverify[0][15][3]=&_Sub_fake_Imu.linear_acceleration_covariance[3];
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f503 62fb 	add.w	r2, r3, #2008	; 0x7d8
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	f8c3 24b4 	str.w	r2, [r3, #1204]	; 0x4b4
    _nonverify[0][15][4]=&_Sub_fake_Imu.linear_acceleration_covariance[4];
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	f503 62fc 	add.w	r2, r3, #2016	; 0x7e0
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	f8c3 24b8 	str.w	r2, [r3, #1208]	; 0x4b8
    _nonverify[0][15][5]=&_Sub_fake_Imu.linear_acceleration_covariance[5];
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	f503 62fd 	add.w	r2, r3, #2024	; 0x7e8
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	f8c3 24bc 	str.w	r2, [r3, #1212]	; 0x4bc
    _nonverify[0][15][6]=&_Sub_fake_Imu.linear_acceleration_covariance[6];
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	f503 62fe 	add.w	r2, r3, #2032	; 0x7f0
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f8c3 24c0 	str.w	r2, [r3, #1216]	; 0x4c0
    _nonverify[0][15][7]=&_Sub_fake_Imu.linear_acceleration_covariance[7];
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	f503 62ff 	add.w	r2, r3, #2040	; 0x7f8
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	f8c3 24c4 	str.w	r2, [r3, #1220]	; 0x4c4
    _nonverify[0][15][8]=&_Sub_fake_Imu.linear_acceleration_covariance[8];
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	f503 6200 	add.w	r2, r3, #2048	; 0x800
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	f8c3 24c8 	str.w	r2, [r3, #1224]	; 0x4c8


    _verify[0][0][0]=&Sub_fake_Imu.header.stamp.sec;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	f103 02d8 	add.w	r2, r3, #216	; 0xd8
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	f8c3 24cc 	str.w	r2, [r3, #1228]	; 0x4cc
    _verify[0][1][0]=&Sub_fake_Imu.header.stamp.nanosec;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 02dc 	add.w	r2, r3, #220	; 0xdc
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f8c3 24f0 	str.w	r2, [r3, #1264]	; 0x4f0
    _verify[0][2][0]=&Sub_fake_Imu.header.frame_id;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	f103 02e0 	add.w	r2, r3, #224	; 0xe0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    _verify[0][3][0]=&Sub_fake_Imu.orientation.x;
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	f103 02f8 	add.w	r2, r3, #248	; 0xf8
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    _verify[0][4][0]=&Sub_fake_Imu.orientation.y;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f503 7280 	add.w	r2, r3, #256	; 0x100
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	f8c3 255c 	str.w	r2, [r3, #1372]	; 0x55c
    _verify[0][5][0]=&Sub_fake_Imu.orientation.z;
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	f503 7284 	add.w	r2, r3, #264	; 0x108
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
    _verify[0][6][0]=&Sub_fake_Imu.orientation.w;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 7288 	add.w	r2, r3, #272	; 0x110
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	f8c3 25a4 	str.w	r2, [r3, #1444]	; 0x5a4
    _verify[0][7][0]=&Sub_fake_Imu.orientation_covariance[0];
 8000eea:	687a      	ldr	r2, [r7, #4]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f8c3 25c8 	str.w	r2, [r3, #1480]	; 0x5c8
    _verify[0][7][1]=&Sub_fake_Imu.orientation_covariance[1];
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	f103 0208 	add.w	r2, r3, #8
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	f8c3 25cc 	str.w	r2, [r3, #1484]	; 0x5cc
    _verify[0][7][2]=&Sub_fake_Imu.orientation_covariance[2];
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f103 0210 	add.w	r2, r3, #16
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f8c3 25d0 	str.w	r2, [r3, #1488]	; 0x5d0
    _verify[0][7][3]=&Sub_fake_Imu.orientation_covariance[3];
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f103 0218 	add.w	r2, r3, #24
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	f8c3 25d4 	str.w	r2, [r3, #1492]	; 0x5d4
    _verify[0][7][4]=&Sub_fake_Imu.orientation_covariance[4];
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	f103 0220 	add.w	r2, r3, #32
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f8c3 25d8 	str.w	r2, [r3, #1496]	; 0x5d8
    _verify[0][7][5]=&Sub_fake_Imu.orientation_covariance[5];
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f103 0228 	add.w	r2, r3, #40	; 0x28
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	f8c3 25dc 	str.w	r2, [r3, #1500]	; 0x5dc
    _verify[0][7][6]=&Sub_fake_Imu.orientation_covariance[6];
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f8c3 25e0 	str.w	r2, [r3, #1504]	; 0x5e0
    _verify[0][7][7]=&Sub_fake_Imu.orientation_covariance[7];
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f103 0238 	add.w	r2, r3, #56	; 0x38
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f8c3 25e4 	str.w	r2, [r3, #1508]	; 0x5e4
    _verify[0][7][8]=&Sub_fake_Imu.orientation_covariance[8];
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	f8c3 25e8 	str.w	r2, [r3, #1512]	; 0x5e8
    _verify[0][8][0]=&Sub_fake_Imu.angular_velocity.x;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f503 728c 	add.w	r2, r3, #280	; 0x118
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	f8c3 25ec 	str.w	r2, [r3, #1516]	; 0x5ec
    _verify[0][9][0]=&Sub_fake_Imu.angular_velocity.y;
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	f503 7290 	add.w	r2, r3, #288	; 0x120
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f8c3 2610 	str.w	r2, [r3, #1552]	; 0x610
    _verify[0][10][0]=&Sub_fake_Imu.angular_velocity.z;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	f503 7294 	add.w	r2, r3, #296	; 0x128
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f8c3 2634 	str.w	r2, [r3, #1588]	; 0x634
    _verify[0][11][0]=&Sub_fake_Imu.angular_velocity_covariance[0];
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f8c3 2658 	str.w	r2, [r3, #1624]	; 0x658
    _verify[0][11][1]=&Sub_fake_Imu.angular_velocity_covariance[1];
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	f103 0250 	add.w	r2, r3, #80	; 0x50
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	f8c3 265c 	str.w	r2, [r3, #1628]	; 0x65c
    _verify[0][11][2]=&Sub_fake_Imu.angular_velocity_covariance[2];
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	f103 0258 	add.w	r2, r3, #88	; 0x58
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8c3 2660 	str.w	r2, [r3, #1632]	; 0x660
    _verify[0][11][3]=&Sub_fake_Imu.angular_velocity_covariance[3];
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	f8c3 2664 	str.w	r2, [r3, #1636]	; 0x664
    _verify[0][11][4]=&Sub_fake_Imu.angular_velocity_covariance[4];
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f8c3 2668 	str.w	r2, [r3, #1640]	; 0x668
    _verify[0][11][5]=&Sub_fake_Imu.angular_velocity_covariance[5];
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	f8c3 266c 	str.w	r2, [r3, #1644]	; 0x66c
    _verify[0][11][6]=&Sub_fake_Imu.angular_velocity_covariance[6];
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f103 0278 	add.w	r2, r3, #120	; 0x78
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f8c3 2670 	str.w	r2, [r3, #1648]	; 0x670
    _verify[0][11][7]=&Sub_fake_Imu.angular_velocity_covariance[7];
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	f8c3 2674 	str.w	r2, [r3, #1652]	; 0x674
    _verify[0][11][8]=&Sub_fake_Imu.angular_velocity_covariance[8];
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f103 0288 	add.w	r2, r3, #136	; 0x88
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f8c3 2678 	str.w	r2, [r3, #1656]	; 0x678
    _verify[0][12][0]=&Sub_fake_Imu.linear_acceleration.x;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f503 7298 	add.w	r2, r3, #304	; 0x130
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f8c3 267c 	str.w	r2, [r3, #1660]	; 0x67c
    _verify[0][13][0]=&Sub_fake_Imu.linear_acceleration.y;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	f503 729c 	add.w	r2, r3, #312	; 0x138
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f8c3 26a0 	str.w	r2, [r3, #1696]	; 0x6a0
    _verify[0][14][0]=&Sub_fake_Imu.linear_acceleration.z;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	f503 72a0 	add.w	r2, r3, #320	; 0x140
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f8c3 26c4 	str.w	r2, [r3, #1732]	; 0x6c4
    _verify[0][15][0]=&Sub_fake_Imu.linear_acceleration_covariance[0];
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	f103 0290 	add.w	r2, r3, #144	; 0x90
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f8c3 26e8 	str.w	r2, [r3, #1768]	; 0x6e8
    _verify[0][15][1]=&Sub_fake_Imu.linear_acceleration_covariance[1];
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	f103 0298 	add.w	r2, r3, #152	; 0x98
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f8c3 26ec 	str.w	r2, [r3, #1772]	; 0x6ec
    _verify[0][15][2]=&Sub_fake_Imu.linear_acceleration_covariance[2];
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f8c3 26f0 	str.w	r2, [r3, #1776]	; 0x6f0
    _verify[0][15][3]=&Sub_fake_Imu.linear_acceleration_covariance[3];
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f8c3 26f4 	str.w	r2, [r3, #1780]	; 0x6f4
    _verify[0][15][4]=&Sub_fake_Imu.linear_acceleration_covariance[4];
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	f8c3 26f8 	str.w	r2, [r3, #1784]	; 0x6f8
    _verify[0][15][5]=&Sub_fake_Imu.linear_acceleration_covariance[5];
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f103 02b8 	add.w	r2, r3, #184	; 0xb8
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f8c3 26fc 	str.w	r2, [r3, #1788]	; 0x6fc
    _verify[0][15][6]=&Sub_fake_Imu.linear_acceleration_covariance[6];
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f103 02c0 	add.w	r2, r3, #192	; 0xc0
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
    _verify[0][15][7]=&Sub_fake_Imu.linear_acceleration_covariance[7];
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	f8c3 2704 	str.w	r2, [r3, #1796]	; 0x704
    _verify[0][15][8]=&Sub_fake_Imu.linear_acceleration_covariance[8];
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f103 02d0 	add.w	r2, r3, #208	; 0xd0
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	f8c3 2708 	str.w	r2, [r3, #1800]	; 0x708



// get
}     
 8001072:	bf00      	nop
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <_ZN5Xicro7_getcrcEhPht>:
uint8_t Xicro::_getcrc(uint8_t crc,uint8_t *data,uint16_t len){
 800107a:	b480      	push	{r7}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	607a      	str	r2, [r7, #4]
 8001084:	461a      	mov	r2, r3
 8001086:	460b      	mov	r3, r1
 8001088:	72fb      	strb	r3, [r7, #11]
 800108a:	4613      	mov	r3, r2
 800108c:	813b      	strh	r3, [r7, #8]
    if(len>1){
 800108e:	893b      	ldrh	r3, [r7, #8]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d916      	bls.n	80010c2 <_ZN5Xicro7_getcrcEhPht+0x48>
        for (int i = 0; i < len; i++){
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
 8001098:	893b      	ldrh	r3, [r7, #8]
 800109a:	697a      	ldr	r2, [r7, #20]
 800109c:	429a      	cmp	r2, r3
 800109e:	da1b      	bge.n	80010d8 <_ZN5Xicro7_getcrcEhPht+0x5e>
        crc = _CRC_8_TABLE[crc ^ data[i]];
 80010a0:	697b      	ldr	r3, [r7, #20]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	781a      	ldrb	r2, [r3, #0]
 80010a8:	7afb      	ldrb	r3, [r7, #11]
 80010aa:	4053      	eors	r3, r2
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	461a      	mov	r2, r3
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80010b8:	72fb      	strb	r3, [r7, #11]
        for (int i = 0; i < len; i++){
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	3301      	adds	r3, #1
 80010be:	617b      	str	r3, [r7, #20]
 80010c0:	e7ea      	b.n	8001098 <_ZN5Xicro7_getcrcEhPht+0x1e>
        }
    }else{
        crc = _CRC_8_TABLE[crc ^ (uint8_t)*data];
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	781a      	ldrb	r2, [r3, #0]
 80010c6:	7afb      	ldrb	r3, [r7, #11]
 80010c8:	4053      	eors	r3, r2
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
 80010d6:	72fb      	strb	r3, [r7, #11]
    }
    
    return crc;
 80010d8:	7afb      	ldrb	r3, [r7, #11]
}
 80010da:	4618      	mov	r0, r3
 80010dc:	371c      	adds	r7, #28
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <_ZN5Xicro10_SendstartEv>:

void Xicro::_Sendstart(){
 80010e6:	b580      	push	{r7, lr}
 80010e8:	b082      	sub	sp, #8
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(_serial, _start, 4, 10000);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f503 7114 	add.w	r1, r3, #592	; 0x250
 80010fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80010fe:	2204      	movs	r2, #4
 8001100:	f00d fd46 	bl	800eb90 <HAL_UART_Transmit>
}
 8001104:	bf00      	nop
 8001106:	3708      	adds	r7, #8
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <_ZN5Xicro9_SendstopEv>:
void Xicro::_Sendstop(){
 800110c:	b580      	push	{r7, lr}
 800110e:	b082      	sub	sp, #8
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
    _crc=_getcrc(_crc,_stop,2);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	f503 7215 	add.w	r2, r3, #596	; 0x254
 8001120:	2302      	movs	r3, #2
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f7ff ffa9 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 8001128:	4603      	mov	r3, r0
 800112a:	461a      	mov	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
    HAL_UART_Transmit(_serial, _stop, 2, 1000);
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f503 7115 	add.w	r1, r3, #596	; 0x254
 800113e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001142:	2202      	movs	r2, #2
 8001144:	f00d fd24 	bl	800eb90 <HAL_UART_Transmit>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <_ZN5Xicro13_SendcontinueEv>:
void Xicro::_Sendcontinue(){
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
    _crc=_getcrc(_crc,_continue,2);
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f203 2256 	addw	r2, r3, #598	; 0x256
 8001164:	2302      	movs	r3, #2
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f7ff ff87 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 800116c:	4603      	mov	r3, r0
 800116e:	461a      	mov	r2, r3
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
    HAL_UART_Transmit(_serial, _continue, 2, 1000);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f203 2156 	addw	r1, r3, #598	; 0x256
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	2202      	movs	r2, #2
 8001188:	f00d fd02 	bl	800eb90 <HAL_UART_Transmit>
}
 800118c:	bf00      	nop
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <_ZN5Xicro14_SendSignatureEhh>:
void Xicro::_SendSignature(uint8_t Idmcu,uint8_t Mode){
 8001194:	b580      	push	{r7, lr}
 8001196:	b084      	sub	sp, #16
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	460b      	mov	r3, r1
 800119e:	70fb      	strb	r3, [r7, #3]
 80011a0:	4613      	mov	r3, r2
 80011a2:	70bb      	strb	r3, [r7, #2]
   uint8_t q[1]={0};
 80011a4:	2300      	movs	r3, #0
 80011a6:	733b      	strb	r3, [r7, #12]
   q[0]=Idmcu<<4;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	011b      	lsls	r3, r3, #4
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	733b      	strb	r3, [r7, #12]
   q[0]=q[0]|Mode;
 80011b0:	7b3a      	ldrb	r2, [r7, #12]
 80011b2:	78bb      	ldrb	r3, [r7, #2]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	733b      	strb	r3, [r7, #12]
   _crc=_getcrc(_crc, &q[0],1);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 80011c0:	f107 020c 	add.w	r2, r7, #12
 80011c4:	2301      	movs	r3, #1
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f7ff ff57 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80011cc:	4603      	mov	r3, r0
 80011ce:	461a      	mov	r2, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
   HAL_UART_Transmit(_serial, q, 1, 1000);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80011dc:	f107 010c 	add.w	r1, r7, #12
 80011e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011e4:	2201      	movs	r2, #1
 80011e6:	f00d fcd3 	bl	800eb90 <HAL_UART_Transmit>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
	...

080011f4 <_ZN5Xicro11_SendUint32EPmh>:
        _crc=_getcrc(_crc,buff,3);
        HAL_UART_Transmit(_serial, buff, 3, 1000);
    }
    
}
void Xicro::_SendUint32(uint32_t *data,uint8_t len){
 80011f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011f8:	b08d      	sub	sp, #52	; 0x34
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	60f8      	str	r0, [r7, #12]
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	4613      	mov	r3, r2
 8001202:	71fb      	strb	r3, [r7, #7]
   
    if(len>1){
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	2b01      	cmp	r3, #1
 8001208:	f240 8098 	bls.w	800133c <_ZN5Xicro11_SendUint32EPmh+0x148>
            sp[(i*4)+2] = (uint32_t)data[i] >> 8 & 0xFF;
            sp[(i*4)+1] = (uint32_t)data[i] >> 16 & 0xFF;
            sp[(i*4)]   = (uint32_t)data[i] >> 24 & 0xFF;     
        }
        _crc=_getcrc(_crc,sp,sizee);
        HAL_UART_Transmit(_serial, sp, sizee, 1000);
 800120c:	466b      	mov	r3, sp
 800120e:	461e      	mov	r6, r3
        const uint16_t sizee=len*4;
 8001210:	79fb      	ldrb	r3, [r7, #7]
 8001212:	b29b      	uxth	r3, r3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	857b      	strh	r3, [r7, #42]	; 0x2a
        uint8_t buff[2]={33,0};
 8001218:	2321      	movs	r3, #33	; 0x21
 800121a:	83bb      	strh	r3, [r7, #28]
        buff[1]=len & 0xFF;
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	777b      	strb	r3, [r7, #29]
        _crc=_getcrc(_crc,buff,2);
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001226:	f107 021c 	add.w	r2, r7, #28
 800122a:	2302      	movs	r3, #2
 800122c:	68f8      	ldr	r0, [r7, #12]
 800122e:	f7ff ff24 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buff, 2, 1000);
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8001242:	f107 011c 	add.w	r1, r7, #28
 8001246:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124a:	2202      	movs	r2, #2
 800124c:	f00d fca0 	bl	800eb90 <HAL_UART_Transmit>
        uint8_t sp[sizee];
 8001250:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001252:	3b01      	subs	r3, #1
 8001254:	627b      	str	r3, [r7, #36]	; 0x24
 8001256:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001258:	2200      	movs	r2, #0
 800125a:	4698      	mov	r8, r3
 800125c:	4691      	mov	r9, r2
 800125e:	f04f 0200 	mov.w	r2, #0
 8001262:	f04f 0300 	mov.w	r3, #0
 8001266:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800126a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800126e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001272:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001274:	2200      	movs	r2, #0
 8001276:	461c      	mov	r4, r3
 8001278:	4615      	mov	r5, r2
 800127a:	f04f 0200 	mov.w	r2, #0
 800127e:	f04f 0300 	mov.w	r3, #0
 8001282:	00eb      	lsls	r3, r5, #3
 8001284:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001288:	00e2      	lsls	r2, r4, #3
 800128a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800128c:	3307      	adds	r3, #7
 800128e:	08db      	lsrs	r3, r3, #3
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	ebad 0d03 	sub.w	sp, sp, r3
 8001296:	466b      	mov	r3, sp
 8001298:	3300      	adds	r3, #0
 800129a:	623b      	str	r3, [r7, #32]
        for (int i=0;i<len;i++){
 800129c:	2300      	movs	r3, #0
 800129e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012a0:	79fb      	ldrb	r3, [r7, #7]
 80012a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80012a4:	429a      	cmp	r2, r3
 80012a6:	da31      	bge.n	800130c <_ZN5Xicro11_SendUint32EPmh+0x118>
            sp[(i*4)+3] = (uint32_t)data[i] >> 0 & 0xFF;
 80012a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	68ba      	ldr	r2, [r7, #8]
 80012ae:	4413      	add	r3, r2
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012b4:	009b      	lsls	r3, r3, #2
 80012b6:	3303      	adds	r3, #3
 80012b8:	b2d1      	uxtb	r1, r2
 80012ba:	6a3a      	ldr	r2, [r7, #32]
 80012bc:	54d1      	strb	r1, [r2, r3]
            sp[(i*4)+2] = (uint32_t)data[i] >> 8 & 0xFF;
 80012be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	4413      	add	r3, r2
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	0a1a      	lsrs	r2, r3, #8
 80012ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	3302      	adds	r3, #2
 80012d0:	b2d1      	uxtb	r1, r2
 80012d2:	6a3a      	ldr	r2, [r7, #32]
 80012d4:	54d1      	strb	r1, [r2, r3]
            sp[(i*4)+1] = (uint32_t)data[i] >> 16 & 0xFF;
 80012d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	4413      	add	r3, r2
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	0c1a      	lsrs	r2, r3, #16
 80012e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012e4:	009b      	lsls	r3, r3, #2
 80012e6:	3301      	adds	r3, #1
 80012e8:	b2d1      	uxtb	r1, r2
 80012ea:	6a3a      	ldr	r2, [r7, #32]
 80012ec:	54d1      	strb	r1, [r2, r3]
            sp[(i*4)]   = (uint32_t)data[i] >> 24 & 0xFF;     
 80012ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	68ba      	ldr	r2, [r7, #8]
 80012f4:	4413      	add	r3, r2
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0e1a      	lsrs	r2, r3, #24
 80012fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	b2d1      	uxtb	r1, r2
 8001300:	6a3a      	ldr	r2, [r7, #32]
 8001302:	54d1      	strb	r1, [r2, r3]
        for (int i=0;i<len;i++){
 8001304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001306:	3301      	adds	r3, #1
 8001308:	62fb      	str	r3, [r7, #44]	; 0x2c
 800130a:	e7c9      	b.n	80012a0 <_ZN5Xicro11_SendUint32EPmh+0xac>
        _crc=_getcrc(_crc,sp,sizee);
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001312:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001314:	6a3a      	ldr	r2, [r7, #32]
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff feaf 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 800131c:	4603      	mov	r3, r0
 800131e:	461a      	mov	r2, r3
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, sp, sizee, 1000);
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 800132c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800132e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001332:	6a39      	ldr	r1, [r7, #32]
 8001334:	f00d fc2c 	bl	800eb90 <HAL_UART_Transmit>
 8001338:	46b5      	mov	sp, r6
        buff[1] = (uint32_t)*data >> 24 & 0xFF;
        _crc=_getcrc(_crc,buff,5);
        HAL_UART_Transmit(_serial, buff, 5, 1000);
        
    }
}
 800133a:	e032      	b.n	80013a2 <_ZN5Xicro11_SendUint32EPmh+0x1ae>
        uint8_t buff[5]={32,0,0,0,0};
 800133c:	4a1b      	ldr	r2, [pc, #108]	; (80013ac <_ZN5Xicro11_SendUint32EPmh+0x1b8>)
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001346:	6018      	str	r0, [r3, #0]
 8001348:	3304      	adds	r3, #4
 800134a:	7019      	strb	r1, [r3, #0]
        buff[4] = (uint32_t)*data >> 0 & 0xFF;
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	b2db      	uxtb	r3, r3
 8001352:	763b      	strb	r3, [r7, #24]
        buff[3] = (uint32_t)*data >> 8 & 0xFF;
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	b2db      	uxtb	r3, r3
 800135c:	75fb      	strb	r3, [r7, #23]
        buff[2] = (uint32_t)*data >> 16 & 0xFF;
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	0c1b      	lsrs	r3, r3, #16
 8001364:	b2db      	uxtb	r3, r3
 8001366:	75bb      	strb	r3, [r7, #22]
        buff[1] = (uint32_t)*data >> 24 & 0xFF;
 8001368:	68bb      	ldr	r3, [r7, #8]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	0e1b      	lsrs	r3, r3, #24
 800136e:	b2db      	uxtb	r3, r3
 8001370:	757b      	strb	r3, [r7, #21]
        _crc=_getcrc(_crc,buff,5);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001378:	f107 0214 	add.w	r2, r7, #20
 800137c:	2305      	movs	r3, #5
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff fe7b 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 8001384:	4603      	mov	r3, r0
 8001386:	461a      	mov	r2, r3
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buff, 5, 1000);
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8001394:	f107 0114 	add.w	r1, r7, #20
 8001398:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800139c:	2205      	movs	r2, #5
 800139e:	f00d fbf7 	bl	800eb90 <HAL_UART_Transmit>
}
 80013a2:	bf00      	nop
 80013a4:	3734      	adds	r7, #52	; 0x34
 80013a6:	46bd      	mov	sp, r7
 80013a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ac:	08012958 	.word	0x08012958

080013b0 <_ZN5Xicro10_SendInt32EPlh>:
        buff[1] = (int16_t)*data >> 8 & 0xFF;
        _crc=_getcrc(_crc,buff,3);
        HAL_UART_Transmit(_serial, buff, 3, 1000);
    }
}
void Xicro::_SendInt32(int32_t *data,uint8_t len){
 80013b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80013b4:	b08d      	sub	sp, #52	; 0x34
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	60f8      	str	r0, [r7, #12]
 80013ba:	60b9      	str	r1, [r7, #8]
 80013bc:	4613      	mov	r3, r2
 80013be:	71fb      	strb	r3, [r7, #7]
    if(len>1){
 80013c0:	79fb      	ldrb	r3, [r7, #7]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	f240 8098 	bls.w	80014f8 <_ZN5Xicro10_SendInt32EPlh+0x148>
            sp[(i*4)+2] = (int32_t)data[i] >> 8 & 0xFF;
            sp[(i*4)+1] = (int32_t)data[i] >> 16 & 0xFF;
            sp[(i*4)]   = (int32_t)data[i] >> 24 & 0xFF;     
        }
        _crc=_getcrc(_crc,sp,sizee);
        HAL_UART_Transmit(_serial, sp, sizee, 1000);
 80013c8:	466b      	mov	r3, sp
 80013ca:	461e      	mov	r6, r3
        const uint16_t sizee=len*4;
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	857b      	strh	r3, [r7, #42]	; 0x2a
        uint8_t buff[2]={133,0};
 80013d4:	2385      	movs	r3, #133	; 0x85
 80013d6:	83bb      	strh	r3, [r7, #28]
        buff[1]=len & 0xFF;
 80013d8:	79fb      	ldrb	r3, [r7, #7]
 80013da:	777b      	strb	r3, [r7, #29]
        _crc=_getcrc(_crc,buff,2);
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 80013e2:	f107 021c 	add.w	r2, r7, #28
 80013e6:	2302      	movs	r3, #2
 80013e8:	68f8      	ldr	r0, [r7, #12]
 80013ea:	f7ff fe46 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80013ee:	4603      	mov	r3, r0
 80013f0:	461a      	mov	r2, r3
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buff, 2, 1000);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80013fe:	f107 011c 	add.w	r1, r7, #28
 8001402:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001406:	2202      	movs	r2, #2
 8001408:	f00d fbc2 	bl	800eb90 <HAL_UART_Transmit>
        uint8_t sp[sizee];
 800140c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800140e:	3b01      	subs	r3, #1
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
 8001412:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001414:	2200      	movs	r2, #0
 8001416:	4698      	mov	r8, r3
 8001418:	4691      	mov	r9, r2
 800141a:	f04f 0200 	mov.w	r2, #0
 800141e:	f04f 0300 	mov.w	r3, #0
 8001422:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001426:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800142a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800142e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001430:	2200      	movs	r2, #0
 8001432:	461c      	mov	r4, r3
 8001434:	4615      	mov	r5, r2
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	00eb      	lsls	r3, r5, #3
 8001440:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001444:	00e2      	lsls	r2, r4, #3
 8001446:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001448:	3307      	adds	r3, #7
 800144a:	08db      	lsrs	r3, r3, #3
 800144c:	00db      	lsls	r3, r3, #3
 800144e:	ebad 0d03 	sub.w	sp, sp, r3
 8001452:	466b      	mov	r3, sp
 8001454:	3300      	adds	r3, #0
 8001456:	623b      	str	r3, [r7, #32]
        for (int i=0;i<len;i++){
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001460:	429a      	cmp	r2, r3
 8001462:	da31      	bge.n	80014c8 <_ZN5Xicro10_SendInt32EPlh+0x118>
            sp[(i*4)+3] = (int32_t)data[i] >> 0 & 0xFF;
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	68ba      	ldr	r2, [r7, #8]
 800146a:	4413      	add	r3, r2
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001470:	009b      	lsls	r3, r3, #2
 8001472:	3303      	adds	r3, #3
 8001474:	b2d1      	uxtb	r1, r2
 8001476:	6a3a      	ldr	r2, [r7, #32]
 8001478:	54d1      	strb	r1, [r2, r3]
            sp[(i*4)+2] = (int32_t)data[i] >> 8 & 0xFF;
 800147a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800147c:	009b      	lsls	r3, r3, #2
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	4413      	add	r3, r2
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	121a      	asrs	r2, r3, #8
 8001486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	b2d1      	uxtb	r1, r2
 800148e:	6a3a      	ldr	r2, [r7, #32]
 8001490:	54d1      	strb	r1, [r2, r3]
            sp[(i*4)+1] = (int32_t)data[i] >> 16 & 0xFF;
 8001492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	68ba      	ldr	r2, [r7, #8]
 8001498:	4413      	add	r3, r2
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	141a      	asrs	r2, r3, #16
 800149e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	3301      	adds	r3, #1
 80014a4:	b2d1      	uxtb	r1, r2
 80014a6:	6a3a      	ldr	r2, [r7, #32]
 80014a8:	54d1      	strb	r1, [r2, r3]
            sp[(i*4)]   = (int32_t)data[i] >> 24 & 0xFF;     
 80014aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ac:	009b      	lsls	r3, r3, #2
 80014ae:	68ba      	ldr	r2, [r7, #8]
 80014b0:	4413      	add	r3, r2
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	0e1a      	lsrs	r2, r3, #24
 80014b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	b2d1      	uxtb	r1, r2
 80014bc:	6a3a      	ldr	r2, [r7, #32]
 80014be:	54d1      	strb	r1, [r2, r3]
        for (int i=0;i<len;i++){
 80014c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014c2:	3301      	adds	r3, #1
 80014c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80014c6:	e7c9      	b.n	800145c <_ZN5Xicro10_SendInt32EPlh+0xac>
        _crc=_getcrc(_crc,sp,sizee);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 80014ce:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80014d0:	6a3a      	ldr	r2, [r7, #32]
 80014d2:	68f8      	ldr	r0, [r7, #12]
 80014d4:	f7ff fdd1 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80014d8:	4603      	mov	r3, r0
 80014da:	461a      	mov	r2, r3
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, sp, sizee, 1000);
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80014e8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80014ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014ee:	6a39      	ldr	r1, [r7, #32]
 80014f0:	f00d fb4e 	bl	800eb90 <HAL_UART_Transmit>
 80014f4:	46b5      	mov	sp, r6
        buff[2] = (int32_t)*data >> 16 & 0xFF;
        buff[1] = (int32_t)*data >> 24 & 0xFF;
        _crc=_getcrc(_crc,buff,5);
        HAL_UART_Transmit(_serial, buff, 5, 1000);
    }
}
 80014f6:	e032      	b.n	800155e <_ZN5Xicro10_SendInt32EPlh+0x1ae>
        uint8_t buff[5]={132,0,0,0,0};
 80014f8:	4a1b      	ldr	r2, [pc, #108]	; (8001568 <_ZN5Xicro10_SendInt32EPlh+0x1b8>)
 80014fa:	f107 0314 	add.w	r3, r7, #20
 80014fe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001502:	6018      	str	r0, [r3, #0]
 8001504:	3304      	adds	r3, #4
 8001506:	7019      	strb	r1, [r3, #0]
        buff[4] = (int32_t)*data >> 0 & 0xFF;
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	b2db      	uxtb	r3, r3
 800150e:	763b      	strb	r3, [r7, #24]
        buff[3] = (int32_t)*data >> 8 & 0xFF;
 8001510:	68bb      	ldr	r3, [r7, #8]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	121b      	asrs	r3, r3, #8
 8001516:	b2db      	uxtb	r3, r3
 8001518:	75fb      	strb	r3, [r7, #23]
        buff[2] = (int32_t)*data >> 16 & 0xFF;
 800151a:	68bb      	ldr	r3, [r7, #8]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	141b      	asrs	r3, r3, #16
 8001520:	b2db      	uxtb	r3, r3
 8001522:	75bb      	strb	r3, [r7, #22]
        buff[1] = (int32_t)*data >> 24 & 0xFF;
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0e1b      	lsrs	r3, r3, #24
 800152a:	b2db      	uxtb	r3, r3
 800152c:	757b      	strb	r3, [r7, #21]
        _crc=_getcrc(_crc,buff,5);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001534:	f107 0214 	add.w	r2, r7, #20
 8001538:	2305      	movs	r3, #5
 800153a:	68f8      	ldr	r0, [r7, #12]
 800153c:	f7ff fd9d 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 8001540:	4603      	mov	r3, r0
 8001542:	461a      	mov	r2, r3
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buff, 5, 1000);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8001550:	f107 0114 	add.w	r1, r7, #20
 8001554:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001558:	2205      	movs	r2, #5
 800155a:	f00d fb19 	bl	800eb90 <HAL_UART_Transmit>
}
 800155e:	bf00      	nop
 8001560:	3734      	adds	r7, #52	; 0x34
 8001562:	46bd      	mov	sp, r7
 8001564:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001568:	08012970 	.word	0x08012970

0800156c <_ZN5Xicro11_SendDoubleEPdh>:
        HAL_UART_Transmit(_serial, buff, 1, 1000);
        HAL_UART_Transmit(_serial, bb, 4, 1000);
    }
    
}
void Xicro::_SendDouble(double *data,uint8_t len){
 800156c:	b580      	push	{r7, lr}
 800156e:	b08a      	sub	sp, #40	; 0x28
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	4613      	mov	r3, r2
 8001578:	71fb      	strb	r3, [r7, #7]
    if(len>1){
 800157a:	79fb      	ldrb	r3, [r7, #7]
 800157c:	2b01      	cmp	r3, #1
 800157e:	d940      	bls.n	8001602 <_ZN5Xicro11_SendDoubleEPdh+0x96>
        uint8_t buff[2]={223,0};
 8001580:	23df      	movs	r3, #223	; 0xdf
 8001582:	833b      	strh	r3, [r7, #24]
        buff[1]=len & 0xFF;
 8001584:	79fb      	ldrb	r3, [r7, #7]
 8001586:	767b      	strb	r3, [r7, #25]
        _crc=_getcrc(_crc,buff,2);
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 800158e:	f107 0218 	add.w	r2, r7, #24
 8001592:	2302      	movs	r3, #2
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f7ff fd70 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buff, 2, 1000);
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80015aa:	f107 0118 	add.w	r1, r7, #24
 80015ae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015b2:	2202      	movs	r2, #2
 80015b4:	f00d faec 	bl	800eb90 <HAL_UART_Transmit>
        for(int i=0;i<len;i++){
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	; 0x24
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80015c0:	429a      	cmp	r2, r3
 80015c2:	da50      	bge.n	8001666 <_ZN5Xicro11_SendDoubleEPdh+0xfa>
            uint8_t * bb = (uint8_t *) &data[i];
 80015c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	68ba      	ldr	r2, [r7, #8]
 80015ca:	4413      	add	r3, r2
 80015cc:	61fb      	str	r3, [r7, #28]
            _crc=_getcrc(_crc,bb,8);
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 80015d4:	2308      	movs	r3, #8
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	68f8      	ldr	r0, [r7, #12]
 80015da:	f7ff fd4e 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80015de:	4603      	mov	r3, r0
 80015e0:	461a      	mov	r2, r3
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
            HAL_UART_Transmit(_serial, bb, 8, 1000);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80015ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f2:	2208      	movs	r2, #8
 80015f4:	69f9      	ldr	r1, [r7, #28]
 80015f6:	f00d facb 	bl	800eb90 <HAL_UART_Transmit>
        for(int i=0;i<len;i++){
 80015fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015fc:	3301      	adds	r3, #1
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001600:	e7dc      	b.n	80015bc <_ZN5Xicro11_SendDoubleEPdh+0x50>
        }

    }else{
        uint8_t * bb = (uint8_t *) &*data;
 8001602:	68bb      	ldr	r3, [r7, #8]
 8001604:	623b      	str	r3, [r7, #32]
        uint8_t buff[1]={222};
 8001606:	23de      	movs	r3, #222	; 0xde
 8001608:	753b      	strb	r3, [r7, #20]
        _crc=_getcrc(_crc,&buff[0],1);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001610:	f107 0214 	add.w	r2, r7, #20
 8001614:	2301      	movs	r3, #1
 8001616:	68f8      	ldr	r0, [r7, #12]
 8001618:	f7ff fd2f 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 800161c:	4603      	mov	r3, r0
 800161e:	461a      	mov	r2, r3
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        _crc=_getcrc(_crc,bb,8);
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 800162c:	2308      	movs	r3, #8
 800162e:	6a3a      	ldr	r2, [r7, #32]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fd22 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buff, 1, 1000);
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8001646:	f107 0114 	add.w	r1, r7, #20
 800164a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800164e:	2201      	movs	r2, #1
 8001650:	f00d fa9e 	bl	800eb90 <HAL_UART_Transmit>
        HAL_UART_Transmit(_serial, bb, 8, 1000);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 800165a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800165e:	2208      	movs	r2, #8
 8001660:	6a39      	ldr	r1, [r7, #32]
 8001662:	f00d fa95 	bl	800eb90 <HAL_UART_Transmit>
    }
    
}
 8001666:	bf00      	nop
 8001668:	3728      	adds	r7, #40	; 0x28
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <_ZN5Xicro11_SendStringEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEh>:
void Xicro::_SendString(std::string *data,uint8_t len){
 800166e:	b5b0      	push	{r4, r5, r7, lr}
 8001670:	b088      	sub	sp, #32
 8001672:	af00      	add	r7, sp, #0
 8001674:	60f8      	str	r0, [r7, #12]
 8001676:	60b9      	str	r1, [r7, #8]
 8001678:	4613      	mov	r3, r2
 800167a:	71fb      	strb	r3, [r7, #7]
    uint8_t buffE[2]={42,126};
 800167c:	f647 632a 	movw	r3, #32298	; 0x7e2a
 8001680:	833b      	strh	r3, [r7, #24]
    if(len>1){
 8001682:	79fb      	ldrb	r3, [r7, #7]
 8001684:	2b01      	cmp	r3, #1
 8001686:	f240 8089 	bls.w	800179c <_ZN5Xicro11_SendStringEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEh+0x12e>
        uint8_t buffS[2]={243,0};
 800168a:	23f3      	movs	r3, #243	; 0xf3
 800168c:	82bb      	strh	r3, [r7, #20]
        buffS[1]=len & 0xFF;
 800168e:	79fb      	ldrb	r3, [r7, #7]
 8001690:	757b      	strb	r3, [r7, #21]
        _crc=_getcrc(_crc,buffS,2);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001698:	f107 0214 	add.w	r2, r7, #20
 800169c:	2302      	movs	r3, #2
 800169e:	68f8      	ldr	r0, [r7, #12]
 80016a0:	f7ff fceb 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80016a4:	4603      	mov	r3, r0
 80016a6:	461a      	mov	r2, r3
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buffS, 2, 1000);
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80016b4:	f107 0114 	add.w	r1, r7, #20
 80016b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016bc:	2202      	movs	r2, #2
 80016be:	f00d fa67 	bl	800eb90 <HAL_UART_Transmit>
        for(int j=0;j<len;j++){
 80016c2:	2300      	movs	r3, #0
 80016c4:	61fb      	str	r3, [r7, #28]
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	69fa      	ldr	r2, [r7, #28]
 80016ca:	429a      	cmp	r2, r3
 80016cc:	f280 80c2 	bge.w	8001854 <_ZN5Xicro11_SendStringEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEh+0x1e6>
            _crc=_getcrc(_crc,(uint8_t*)&data[j][0],data[j].length());
 80016d0:	68fb      	ldr	r3, [r7, #12]
 80016d2:	f893 4258 	ldrb.w	r4, [r3, #600]	; 0x258
 80016d6:	69fa      	ldr	r2, [r7, #28]
 80016d8:	4613      	mov	r3, r2
 80016da:	005b      	lsls	r3, r3, #1
 80016dc:	4413      	add	r3, r2
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	461a      	mov	r2, r3
 80016e2:	68bb      	ldr	r3, [r7, #8]
 80016e4:	4413      	add	r3, r2
 80016e6:	2100      	movs	r1, #0
 80016e8:	4618      	mov	r0, r3
 80016ea:	f00f fdea 	bl	80112c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80016ee:	4605      	mov	r5, r0
 80016f0:	69fa      	ldr	r2, [r7, #28]
 80016f2:	4613      	mov	r3, r2
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	4413      	add	r3, r2
 80016f8:	00db      	lsls	r3, r3, #3
 80016fa:	461a      	mov	r2, r3
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	4413      	add	r3, r2
 8001700:	4618      	mov	r0, r3
 8001702:	f00f fddc 	bl	80112be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001706:	4603      	mov	r3, r0
 8001708:	b29b      	uxth	r3, r3
 800170a:	462a      	mov	r2, r5
 800170c:	4621      	mov	r1, r4
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f7ff fcb3 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
            _crc=_getcrc(_crc,buffE,2);
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001724:	f107 0218 	add.w	r2, r7, #24
 8001728:	2302      	movs	r3, #2
 800172a:	68f8      	ldr	r0, [r7, #12]
 800172c:	f7ff fca5 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 8001730:	4603      	mov	r3, r0
 8001732:	461a      	mov	r2, r3
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
            HAL_UART_Transmit(_serial, (uint8_t*)&data[j][0], data[j].length(), 1000);
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
 8001740:	69fa      	ldr	r2, [r7, #28]
 8001742:	4613      	mov	r3, r2
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	461a      	mov	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	4413      	add	r3, r2
 8001750:	2100      	movs	r1, #0
 8001752:	4618      	mov	r0, r3
 8001754:	f00f fdb5 	bl	80112c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001758:	4605      	mov	r5, r0
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	4613      	mov	r3, r2
 800175e:	005b      	lsls	r3, r3, #1
 8001760:	4413      	add	r3, r2
 8001762:	00db      	lsls	r3, r3, #3
 8001764:	461a      	mov	r2, r3
 8001766:	68bb      	ldr	r3, [r7, #8]
 8001768:	4413      	add	r3, r2
 800176a:	4618      	mov	r0, r3
 800176c:	f00f fda7 	bl	80112be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001770:	4603      	mov	r3, r0
 8001772:	b29a      	uxth	r2, r3
 8001774:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001778:	4629      	mov	r1, r5
 800177a:	4620      	mov	r0, r4
 800177c:	f00d fa08 	bl	800eb90 <HAL_UART_Transmit>
            HAL_UART_Transmit(_serial, buffE, 2, 1000);
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8001786:	f107 0118 	add.w	r1, r7, #24
 800178a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800178e:	2202      	movs	r2, #2
 8001790:	f00d f9fe 	bl	800eb90 <HAL_UART_Transmit>
        for(int j=0;j<len;j++){
 8001794:	69fb      	ldr	r3, [r7, #28]
 8001796:	3301      	adds	r3, #1
 8001798:	61fb      	str	r3, [r7, #28]
 800179a:	e794      	b.n	80016c6 <_ZN5Xicro11_SendStringEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEh+0x58>
        }

    }else{
        uint8_t buffS[1]={242};
 800179c:	23f2      	movs	r3, #242	; 0xf2
 800179e:	743b      	strb	r3, [r7, #16]
        _crc=_getcrc(_crc,&buffS[0],1);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 80017a6:	f107 0210 	add.w	r2, r7, #16
 80017aa:	2301      	movs	r3, #1
 80017ac:	68f8      	ldr	r0, [r7, #12]
 80017ae:	f7ff fc64 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80017b2:	4603      	mov	r3, r0
 80017b4:	461a      	mov	r2, r3
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        _crc=_getcrc(_crc,(uint8_t*)&data[0][0],data[0].length());
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	f893 4258 	ldrb.w	r4, [r3, #600]	; 0x258
 80017c2:	2100      	movs	r1, #0
 80017c4:	68b8      	ldr	r0, [r7, #8]
 80017c6:	f00f fd7c 	bl	80112c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 80017ca:	4605      	mov	r5, r0
 80017cc:	68b8      	ldr	r0, [r7, #8]
 80017ce:	f00f fd76 	bl	80112be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80017d2:	4603      	mov	r3, r0
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	462a      	mov	r2, r5
 80017d8:	4621      	mov	r1, r4
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f7ff fc4d 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80017e0:	4603      	mov	r3, r0
 80017e2:	461a      	mov	r2, r3
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        _crc=_getcrc(_crc,buffE,2);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 80017f0:	f107 0218 	add.w	r2, r7, #24
 80017f4:	2302      	movs	r3, #2
 80017f6:	68f8      	ldr	r0, [r7, #12]
 80017f8:	f7ff fc3f 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 80017fc:	4603      	mov	r3, r0
 80017fe:	461a      	mov	r2, r3
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
        HAL_UART_Transmit(_serial, buffS, 1, 1000);
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 800180c:	f107 0110 	add.w	r1, r7, #16
 8001810:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001814:	2201      	movs	r2, #1
 8001816:	f00d f9bb 	bl	800eb90 <HAL_UART_Transmit>
        HAL_UART_Transmit(_serial, (uint8_t*)&data[0][0], data[0].length(), 1000);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
 8001820:	2100      	movs	r1, #0
 8001822:	68b8      	ldr	r0, [r7, #8]
 8001824:	f00f fd4d 	bl	80112c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8001828:	4605      	mov	r5, r0
 800182a:	68b8      	ldr	r0, [r7, #8]
 800182c:	f00f fd47 	bl	80112be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8001830:	4603      	mov	r3, r0
 8001832:	b29a      	uxth	r2, r3
 8001834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001838:	4629      	mov	r1, r5
 800183a:	4620      	mov	r0, r4
 800183c:	f00d f9a8 	bl	800eb90 <HAL_UART_Transmit>
        HAL_UART_Transmit(_serial, buffE, 2, 1000);
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 8001846:	f107 0118 	add.w	r1, r7, #24
 800184a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800184e:	2202      	movs	r2, #2
 8001850:	f00d f99e 	bl	800eb90 <HAL_UART_Transmit>
    }
    

}
 8001854:	bf00      	nop
 8001856:	3720      	adds	r7, #32
 8001858:	46bd      	mov	sp, r7
 800185a:	bdb0      	pop	{r4, r5, r7, pc}

0800185c <_ZN5Xicro8_SendcrcEv>:
        }
        _crc=_getcrc(_crc,buff,3);
        HAL_UART_Transmit(_serial, buff, 3, 1000);
    }
}
void Xicro::_Sendcrc(){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(_serial, &_crc, 1, 1000);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	f503 7116 	add.w	r1, r3, #600	; 0x258
 8001870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001874:	2201      	movs	r2, #1
 8001876:	f00d f98b 	bl	800eb90 <HAL_UART_Transmit>
}
 800187a:	bf00      	nop
 800187c:	3708      	adds	r7, #8
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <_ZN5Xicro12_SendIdTopicEh>:
void Xicro::_SendIdTopic(uint8_t IdTopic){
 8001882:	b580      	push	{r7, lr}
 8001884:	b082      	sub	sp, #8
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
 800188a:	460b      	mov	r3, r1
 800188c:	70fb      	strb	r3, [r7, #3]
    _crc=_getcrc(_crc,&IdTopic,1);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f893 1258 	ldrb.w	r1, [r3, #600]	; 0x258
 8001894:	1cfa      	adds	r2, r7, #3
 8001896:	2301      	movs	r3, #1
 8001898:	6878      	ldr	r0, [r7, #4]
 800189a:	f7ff fbee 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 800189e:	4603      	mov	r3, r0
 80018a0:	461a      	mov	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
    HAL_UART_Transmit(_serial, &IdTopic, 1, 1000);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	f8d3 014c 	ldr.w	r0, [r3, #332]	; 0x14c
 80018ae:	1cf9      	adds	r1, r7, #3
 80018b0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018b4:	2201      	movs	r2, #1
 80018b6:	f00d f96b 	bl	800eb90 <HAL_UART_Transmit>
}
 80018ba:	bf00      	nop
 80018bc:	3708      	adds	r7, #8
 80018be:	46bd      	mov	sp, r7
 80018c0:	bd80      	pop	{r7, pc}

080018c2 <_ZN5Xicro22publish_fake_Imu_stm32ElmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEddddPddddS6_dddS6_>:




// gen
void Xicro::publish_fake_Imu_stm32(int32_t header__of__stamp__of__sec ,uint32_t header__of__stamp__of__nanosec ,std::string header__of__frame_id ,double orientation__of__x ,double orientation__of__y ,double orientation__of__z ,double orientation__of__w ,double *orientation_covariance ,double angular_velocity__of__x ,double angular_velocity__of__y ,double angular_velocity__of__z ,double *angular_velocity_covariance ,double linear_acceleration__of__x ,double linear_acceleration__of__y ,double linear_acceleration__of__z ,double *linear_acceleration_covariance ){
 80018c2:	b580      	push	{r7, lr}
 80018c4:	b094      	sub	sp, #80	; 0x50
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80018ca:	64b9      	str	r1, [r7, #72]	; 0x48
 80018cc:	647a      	str	r2, [r7, #68]	; 0x44
 80018ce:	643b      	str	r3, [r7, #64]	; 0x40
 80018d0:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
 80018d4:	ed87 1b0c 	vstr	d1, [r7, #48]	; 0x30
 80018d8:	ed87 2b0a 	vstr	d2, [r7, #40]	; 0x28
 80018dc:	ed87 3b08 	vstr	d3, [r7, #32]
 80018e0:	ed87 4b06 	vstr	d4, [r7, #24]
 80018e4:	ed87 5b04 	vstr	d5, [r7, #16]
 80018e8:	ed87 6b02 	vstr	d6, [r7, #8]
 80018ec:	ed87 7b00 	vstr	d7, [r7]
    _crc=0;
 80018f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2258 	strb.w	r2, [r3, #600]	; 0x258
    _Sendstart();
 80018f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80018fa:	f7ff fbf4 	bl	80010e6 <_ZN5Xicro10_SendstartEv>
    _SendSignature(3,4);
 80018fe:	2204      	movs	r2, #4
 8001900:	2103      	movs	r1, #3
 8001902:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001904:	f7ff fc46 	bl	8001194 <_ZN5Xicro14_SendSignatureEhh>
    _SendIdTopic(1);
 8001908:	2101      	movs	r1, #1
 800190a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800190c:	f7ff ffb9 	bl	8001882 <_ZN5Xicro12_SendIdTopicEh>
    _SendInt32((int32_t*)&header__of__stamp__of__sec,1);
 8001910:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001914:	2201      	movs	r2, #1
 8001916:	4619      	mov	r1, r3
 8001918:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800191a:	f7ff fd49 	bl	80013b0 <_ZN5Xicro10_SendInt32EPlh>
    _Sendcontinue();
 800191e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001920:	f7ff fc16 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendUint32((uint32_t*)&header__of__stamp__of__nanosec,1);
 8001924:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001928:	2201      	movs	r2, #1
 800192a:	4619      	mov	r1, r3
 800192c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800192e:	f7ff fc61 	bl	80011f4 <_ZN5Xicro11_SendUint32EPmh>
    _Sendcontinue();
 8001932:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001934:	f7ff fc0c 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendString(&header__of__frame_id,1);
 8001938:	2201      	movs	r2, #1
 800193a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800193c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800193e:	f7ff fe96 	bl	800166e <_ZN5Xicro11_SendStringEPNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEh>
    _Sendcontinue();
 8001942:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001944:	f7ff fc04 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&orientation__of__x,1);
 8001948:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800194c:	2201      	movs	r2, #1
 800194e:	4619      	mov	r1, r3
 8001950:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001952:	f7ff fe0b 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 8001956:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001958:	f7ff fbfa 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&orientation__of__y,1);
 800195c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001960:	2201      	movs	r2, #1
 8001962:	4619      	mov	r1, r3
 8001964:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001966:	f7ff fe01 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 800196a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800196c:	f7ff fbf0 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&orientation__of__z,1);
 8001970:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001974:	2201      	movs	r2, #1
 8001976:	4619      	mov	r1, r3
 8001978:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800197a:	f7ff fdf7 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 800197e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001980:	f7ff fbe6 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&orientation__of__w,1);
 8001984:	f107 0320 	add.w	r3, r7, #32
 8001988:	2201      	movs	r2, #1
 800198a:	4619      	mov	r1, r3
 800198c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800198e:	f7ff fded 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 8001992:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001994:	f7ff fbdc 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble(orientation_covariance,9);
 8001998:	2209      	movs	r2, #9
 800199a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800199c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800199e:	f7ff fde5 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 80019a2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019a4:	f7ff fbd4 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&angular_velocity__of__x,1);
 80019a8:	f107 0318 	add.w	r3, r7, #24
 80019ac:	2201      	movs	r2, #1
 80019ae:	4619      	mov	r1, r3
 80019b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019b2:	f7ff fddb 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 80019b6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019b8:	f7ff fbca 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&angular_velocity__of__y,1);
 80019bc:	f107 0310 	add.w	r3, r7, #16
 80019c0:	2201      	movs	r2, #1
 80019c2:	4619      	mov	r1, r3
 80019c4:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019c6:	f7ff fdd1 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 80019ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019cc:	f7ff fbc0 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&angular_velocity__of__z,1);
 80019d0:	f107 0308 	add.w	r3, r7, #8
 80019d4:	2201      	movs	r2, #1
 80019d6:	4619      	mov	r1, r3
 80019d8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019da:	f7ff fdc7 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 80019de:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019e0:	f7ff fbb6 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble(angular_velocity_covariance,9);
 80019e4:	2209      	movs	r2, #9
 80019e6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80019e8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019ea:	f7ff fdbf 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 80019ee:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019f0:	f7ff fbae 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&linear_acceleration__of__x,1);
 80019f4:	463b      	mov	r3, r7
 80019f6:	2201      	movs	r2, #1
 80019f8:	4619      	mov	r1, r3
 80019fa:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80019fc:	f7ff fdb6 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 8001a00:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a02:	f7ff fba5 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&linear_acceleration__of__y,1);
 8001a06:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a10:	f7ff fdac 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 8001a14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a16:	f7ff fb9b 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble((double*)&linear_acceleration__of__z,1);
 8001a1a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a1e:	2201      	movs	r2, #1
 8001a20:	4619      	mov	r1, r3
 8001a22:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a24:	f7ff fda2 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendcontinue();
 8001a28:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a2a:	f7ff fb91 	bl	8001150 <_ZN5Xicro13_SendcontinueEv>
    _SendDouble(linear_acceleration_covariance,9);
 8001a2e:	2209      	movs	r2, #9
 8001a30:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8001a32:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a34:	f7ff fd9a 	bl	800156c <_ZN5Xicro11_SendDoubleEPdh>
    _Sendstop();
 8001a38:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a3a:	f7ff fb67 	bl	800110c <_ZN5Xicro9_SendstopEv>
    _Sendcrc();
 8001a3e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8001a40:	f7ff ff0c 	bl	800185c <_ZN5Xicro8_SendcrcEv>
}
 8001a44:	bf00      	nop
 8001a46:	3750      	adds	r7, #80	; 0x50
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <_ZN5Xicro9Spin_nodeEv>:




//get
void Xicro::Spin_node(){
 8001a4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001a50:	f6ad 3d0c 	subw	sp, sp, #2828	; 0xb0c
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001a5a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001a5e:	6018      	str	r0, [r3, #0]
    _Posdata=((UART_HandleTypeDef)*_serial).RxXferSize-__HAL_DMA_GET_COUNTER(((UART_HandleTypeDef)*_serial).hdmarx);
 8001a60:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001a64:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001a6e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001a72:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8001a76:	4618      	mov	r0, r3
 8001a78:	4611      	mov	r1, r2
 8001a7a:	2390      	movs	r3, #144	; 0x90
 8001a7c:	461a      	mov	r2, r3
 8001a7e:	f00f fe4d 	bl	801171c <memcpy>
 8001a82:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001a86:	f5a3 632f 	sub.w	r3, r3, #2800	; 0xaf0
 8001a8a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8001a8e:	b2de      	uxtb	r6, r3
 8001a90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001a94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001a9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001aa2:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	4611      	mov	r1, r2
 8001aaa:	2390      	movs	r3, #144	; 0x90
 8001aac:	461a      	mov	r2, r3
 8001aae:	f00f fe35 	bl	801171c <memcpy>
 8001ab2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ab6:	f5a3 6326 	sub.w	r3, r3, #2656	; 0xa60
 8001aba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4acb      	ldr	r2, [pc, #812]	; (8001dec <_ZN5Xicro9Spin_nodeEv+0x3a0>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	f000 81b3 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001ac6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001aca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001ad4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ad8:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 8001adc:	4618      	mov	r0, r3
 8001ade:	4611      	mov	r1, r2
 8001ae0:	2390      	movs	r3, #144	; 0x90
 8001ae2:	461a      	mov	r2, r3
 8001ae4:	f00f fe1a 	bl	801171c <memcpy>
 8001ae8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001aec:	f5a3 631d 	sub.w	r3, r3, #2512	; 0x9d0
 8001af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4abe      	ldr	r2, [pc, #760]	; (8001df0 <_ZN5Xicro9Spin_nodeEv+0x3a4>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	f000 8198 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001afc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b00:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001b0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b0e:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 8001b12:	4618      	mov	r0, r3
 8001b14:	4611      	mov	r1, r2
 8001b16:	2390      	movs	r3, #144	; 0x90
 8001b18:	461a      	mov	r2, r3
 8001b1a:	f00f fdff 	bl	801171c <memcpy>
 8001b1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b22:	f5a3 6314 	sub.w	r3, r3, #2368	; 0x940
 8001b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	4ab2      	ldr	r2, [pc, #712]	; (8001df4 <_ZN5Xicro9Spin_nodeEv+0x3a8>)
 8001b2c:	4293      	cmp	r3, r2
 8001b2e:	f000 817d 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001b32:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b36:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001b40:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b44:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	4611      	mov	r1, r2
 8001b4c:	2390      	movs	r3, #144	; 0x90
 8001b4e:	461a      	mov	r2, r3
 8001b50:	f00f fde4 	bl	801171c <memcpy>
 8001b54:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b58:	f5a3 630b 	sub.w	r3, r3, #2224	; 0x8b0
 8001b5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4aa5      	ldr	r2, [pc, #660]	; (8001df8 <_ZN5Xicro9Spin_nodeEv+0x3ac>)
 8001b62:	4293      	cmp	r3, r2
 8001b64:	f000 8162 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001b68:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b6c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001b76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b7a:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001b7e:	4618      	mov	r0, r3
 8001b80:	4611      	mov	r1, r2
 8001b82:	2390      	movs	r3, #144	; 0x90
 8001b84:	461a      	mov	r2, r3
 8001b86:	f00f fdc9 	bl	801171c <memcpy>
 8001b8a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001b8e:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001b92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a99      	ldr	r2, [pc, #612]	; (8001dfc <_ZN5Xicro9Spin_nodeEv+0x3b0>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	f000 8147 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001b9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ba2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001bac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001bb0:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	4611      	mov	r1, r2
 8001bb8:	2390      	movs	r3, #144	; 0x90
 8001bba:	461a      	mov	r2, r3
 8001bbc:	f00f fdae 	bl	801171c <memcpy>
 8001bc0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001bc4:	f5a3 63f2 	sub.w	r3, r3, #1936	; 0x790
 8001bc8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	4a8c      	ldr	r2, [pc, #560]	; (8001e00 <_ZN5Xicro9Spin_nodeEv+0x3b4>)
 8001bce:	4293      	cmp	r3, r2
 8001bd0:	f000 812c 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001bd4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001bd8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001be2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001be6:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 8001bea:	4618      	mov	r0, r3
 8001bec:	4611      	mov	r1, r2
 8001bee:	2390      	movs	r3, #144	; 0x90
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	f00f fd93 	bl	801171c <memcpy>
 8001bf6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001bfa:	f5a3 63e0 	sub.w	r3, r3, #1792	; 0x700
 8001bfe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a80      	ldr	r2, [pc, #512]	; (8001e04 <_ZN5Xicro9Spin_nodeEv+0x3b8>)
 8001c04:	4293      	cmp	r3, r2
 8001c06:	f000 8111 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001c0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c0e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001c18:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c1c:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8001c20:	4618      	mov	r0, r3
 8001c22:	4611      	mov	r1, r2
 8001c24:	2390      	movs	r3, #144	; 0x90
 8001c26:	461a      	mov	r2, r3
 8001c28:	f00f fd78 	bl	801171c <memcpy>
 8001c2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c30:	f5a3 63ce 	sub.w	r3, r3, #1648	; 0x670
 8001c34:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a73      	ldr	r2, [pc, #460]	; (8001e08 <_ZN5Xicro9Spin_nodeEv+0x3bc>)
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	f000 80f6 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001c40:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c44:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001c4e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c52:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001c56:	4618      	mov	r0, r3
 8001c58:	4611      	mov	r1, r2
 8001c5a:	2390      	movs	r3, #144	; 0x90
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	f00f fd5d 	bl	801171c <memcpy>
 8001c62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c66:	f5a3 63bc 	sub.w	r3, r3, #1504	; 0x5e0
 8001c6a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a67      	ldr	r2, [pc, #412]	; (8001e0c <_ZN5Xicro9Spin_nodeEv+0x3c0>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	f000 80db 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001c76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c7a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001c84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c88:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	4611      	mov	r1, r2
 8001c90:	2390      	movs	r3, #144	; 0x90
 8001c92:	461a      	mov	r2, r3
 8001c94:	f00f fd42 	bl	801171c <memcpy>
 8001c98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001c9c:	f5a3 63aa 	sub.w	r3, r3, #1360	; 0x550
 8001ca0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4a5a      	ldr	r2, [pc, #360]	; (8001e10 <_ZN5Xicro9Spin_nodeEv+0x3c4>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	f000 80c0 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001cac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001cb0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001cba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001cbe:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	2390      	movs	r3, #144	; 0x90
 8001cc8:	461a      	mov	r2, r3
 8001cca:	f00f fd27 	bl	801171c <memcpy>
 8001cce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001cd2:	f5a3 6398 	sub.w	r3, r3, #1216	; 0x4c0
 8001cd6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a4e      	ldr	r2, [pc, #312]	; (8001e14 <_ZN5Xicro9Spin_nodeEv+0x3c8>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	f000 80a5 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001ce2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ce6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001cf0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001cf4:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	4611      	mov	r1, r2
 8001cfc:	2390      	movs	r3, #144	; 0x90
 8001cfe:	461a      	mov	r2, r3
 8001d00:	f00f fd0c 	bl	801171c <memcpy>
 8001d04:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d08:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 8001d0c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a41      	ldr	r2, [pc, #260]	; (8001e18 <_ZN5Xicro9Spin_nodeEv+0x3cc>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	f000 808a 	beq.w	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001d18:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d1c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001d26:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d2a:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	4611      	mov	r1, r2
 8001d32:	2390      	movs	r3, #144	; 0x90
 8001d34:	461a      	mov	r2, r3
 8001d36:	f00f fcf1 	bl	801171c <memcpy>
 8001d3a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d3e:	f5a3 7368 	sub.w	r3, r3, #928	; 0x3a0
 8001d42:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a35      	ldr	r2, [pc, #212]	; (8001e1c <_ZN5Xicro9Spin_nodeEv+0x3d0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d06f      	beq.n	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001d4c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d50:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001d5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d5e:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001d62:	4618      	mov	r0, r3
 8001d64:	4611      	mov	r1, r2
 8001d66:	2390      	movs	r3, #144	; 0x90
 8001d68:	461a      	mov	r2, r3
 8001d6a:	f00f fcd7 	bl	801171c <memcpy>
 8001d6e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d72:	f5a3 7344 	sub.w	r3, r3, #784	; 0x310
 8001d76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a29      	ldr	r2, [pc, #164]	; (8001e20 <_ZN5Xicro9Spin_nodeEv+0x3d4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d055      	beq.n	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001d80:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d84:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001d8e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001d92:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001d96:	4618      	mov	r0, r3
 8001d98:	4611      	mov	r1, r2
 8001d9a:	2390      	movs	r3, #144	; 0x90
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	f00f fcbd 	bl	801171c <memcpy>
 8001da2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001da6:	f5a3 7320 	sub.w	r3, r3, #640	; 0x280
 8001daa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a1d      	ldr	r2, [pc, #116]	; (8001e24 <_ZN5Xicro9Spin_nodeEv+0x3d8>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d03b      	beq.n	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001db4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001db8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001dc2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001dc6:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001dca:	4618      	mov	r0, r3
 8001dcc:	4611      	mov	r1, r2
 8001dce:	2390      	movs	r3, #144	; 0x90
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	f00f fca3 	bl	801171c <memcpy>
 8001dd6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001dda:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001dde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <_ZN5Xicro9Spin_nodeEv+0x3dc>)
 8001de4:	4293      	cmp	r3, r2
 8001de6:	d13b      	bne.n	8001e60 <_ZN5Xicro9Spin_nodeEv+0x414>
 8001de8:	e020      	b.n	8001e2c <_ZN5Xicro9Spin_nodeEv+0x3e0>
 8001dea:	bf00      	nop
 8001dec:	40020010 	.word	0x40020010
 8001df0:	40020028 	.word	0x40020028
 8001df4:	40020040 	.word	0x40020040
 8001df8:	40020058 	.word	0x40020058
 8001dfc:	40020070 	.word	0x40020070
 8001e00:	40020088 	.word	0x40020088
 8001e04:	400200a0 	.word	0x400200a0
 8001e08:	400200b8 	.word	0x400200b8
 8001e0c:	40020410 	.word	0x40020410
 8001e10:	40020428 	.word	0x40020428
 8001e14:	40020440 	.word	0x40020440
 8001e18:	40020458 	.word	0x40020458
 8001e1c:	40020470 	.word	0x40020470
 8001e20:	40020488 	.word	0x40020488
 8001e24:	400204a0 	.word	0x400204a0
 8001e28:	400204b8 	.word	0x400204b8
 8001e2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001e30:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001e3a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001e3e:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e42:	4618      	mov	r0, r3
 8001e44:	4611      	mov	r1, r2
 8001e46:	2390      	movs	r3, #144	; 0x90
 8001e48:	461a      	mov	r2, r3
 8001e4a:	f00f fc67 	bl	801171c <memcpy>
 8001e4e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001e52:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 8001e56:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	e012      	b.n	8001e86 <_ZN5Xicro9Spin_nodeEv+0x43a>
 8001e60:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001e64:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d3 214c 	ldr.w	r2, [r3, #332]	; 0x14c
 8001e6e:	f607 2338 	addw	r3, r7, #2616	; 0xa38
 8001e72:	4611      	mov	r1, r2
 8001e74:	2290      	movs	r2, #144	; 0x90
 8001e76:	4618      	mov	r0, r3
 8001e78:	f00f fc50 	bl	801171c <memcpy>
 8001e7c:	f8d7 3ab4 	ldr.w	r3, [r7, #2740]	; 0xab4
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	1af3      	subs	r3, r6, r3
 8001e88:	b2da      	uxtb	r2, r3
 8001e8a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001e8e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f883 28bc 	strb.w	r2, [r3, #2236]	; 0x8bc
    if(_Posdata!=_Posdatapre ){
 8001e98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001e9c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f893 28bc 	ldrb.w	r2, [r3, #2236]	; 0x8bc
 8001ea6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001eaa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f893 38bd 	ldrb.w	r3, [r3, #2237]	; 0x8bd
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	f003 8109 	beq.w	80050cc <_ZN5Xicro9Spin_nodeEv+0x3680>
        _datain[0] = _UartBuff[_Posdatapre];
 8001eba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ebe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f893 38bd 	ldrb.w	r3, [r3, #2237]	; 0x8bd
 8001ec8:	461a      	mov	r2, r3
 8001eca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ece:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4413      	add	r3, r2
 8001ed6:	f893 287c 	ldrb.w	r2, [r3, #2172]	; 0x87c
 8001eda:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001ede:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f883 225a 	strb.w	r2, [r3, #602]	; 0x25a
        // _serial->write(_datain,1);
        
        switch (_state){
 8001ee8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8001eec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f893 3259 	ldrb.w	r3, [r3, #601]	; 0x259
 8001ef6:	2be1      	cmp	r3, #225	; 0xe1
 8001ef8:	f003 8094 	beq.w	8005024 <_ZN5Xicro9Spin_nodeEv+0x35d8>
 8001efc:	2be1      	cmp	r3, #225	; 0xe1
 8001efe:	f303 80af 	bgt.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
 8001f02:	2bdf      	cmp	r3, #223	; 0xdf
 8001f04:	f003 8063 	beq.w	8004fce <_ZN5Xicro9Spin_nodeEv+0x3582>
 8001f08:	2bdf      	cmp	r3, #223	; 0xdf
 8001f0a:	f303 80a9 	bgt.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
 8001f0e:	2b6f      	cmp	r3, #111	; 0x6f
 8001f10:	f300 80ea 	bgt.w	80020e8 <_ZN5Xicro9Spin_nodeEv+0x69c>
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	f2c3 80a3 	blt.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
 8001f1a:	2b6f      	cmp	r3, #111	; 0x6f
 8001f1c:	f203 80a0 	bhi.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
 8001f20:	a201      	add	r2, pc, #4	; (adr r2, 8001f28 <_ZN5Xicro9Spin_nodeEv+0x4dc>)
 8001f22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f26:	bf00      	nop
 8001f28:	080020f3 	.word	0x080020f3
 8001f2c:	0800213d 	.word	0x0800213d
 8001f30:	08002177 	.word	0x08002177
 8001f34:	080021b1 	.word	0x080021b1
 8001f38:	080021eb 	.word	0x080021eb
 8001f3c:	080022e1 	.word	0x080022e1
 8001f40:	0800237f 	.word	0x0800237f
 8001f44:	08005061 	.word	0x08005061
 8001f48:	08005061 	.word	0x08005061
 8001f4c:	080037e3 	.word	0x080037e3
 8001f50:	08003837 	.word	0x08003837
 8001f54:	080039b3 	.word	0x080039b3
 8001f58:	08005061 	.word	0x08005061
 8001f5c:	08005061 	.word	0x08005061
 8001f60:	08005061 	.word	0x08005061
 8001f64:	08005061 	.word	0x08005061
 8001f68:	08005061 	.word	0x08005061
 8001f6c:	08005061 	.word	0x08005061
 8001f70:	08005061 	.word	0x08005061
 8001f74:	08005061 	.word	0x08005061
 8001f78:	08005061 	.word	0x08005061
 8001f7c:	08005061 	.word	0x08005061
 8001f80:	08005061 	.word	0x08005061
 8001f84:	08005061 	.word	0x08005061
 8001f88:	08005061 	.word	0x08005061
 8001f8c:	08005061 	.word	0x08005061
 8001f90:	08005061 	.word	0x08005061
 8001f94:	08005061 	.word	0x08005061
 8001f98:	08005061 	.word	0x08005061
 8001f9c:	08005061 	.word	0x08005061
 8001fa0:	08005061 	.word	0x08005061
 8001fa4:	08005061 	.word	0x08005061
 8001fa8:	08005061 	.word	0x08005061
 8001fac:	08005061 	.word	0x08005061
 8001fb0:	08005061 	.word	0x08005061
 8001fb4:	08005061 	.word	0x08005061
 8001fb8:	08005061 	.word	0x08005061
 8001fbc:	08005061 	.word	0x08005061
 8001fc0:	08005061 	.word	0x08005061
 8001fc4:	08005061 	.word	0x08005061
 8001fc8:	08005061 	.word	0x08005061
 8001fcc:	08005061 	.word	0x08005061
 8001fd0:	08005061 	.word	0x08005061
 8001fd4:	08005061 	.word	0x08005061
 8001fd8:	08005061 	.word	0x08005061
 8001fdc:	08005061 	.word	0x08005061
 8001fe0:	08005061 	.word	0x08005061
 8001fe4:	08005061 	.word	0x08005061
 8001fe8:	08005061 	.word	0x08005061
 8001fec:	08005061 	.word	0x08005061
 8001ff0:	080034af 	.word	0x080034af
 8001ff4:	0800355b 	.word	0x0800355b
 8001ff8:	0800360d 	.word	0x0800360d
 8001ffc:	080036bf 	.word	0x080036bf
 8002000:	08003751 	.word	0x08003751
 8002004:	08005061 	.word	0x08005061
 8002008:	08005061 	.word	0x08005061
 800200c:	08005061 	.word	0x08005061
 8002010:	08005061 	.word	0x08005061
 8002014:	08005061 	.word	0x08005061
 8002018:	080032e1 	.word	0x080032e1
 800201c:	08005061 	.word	0x08005061
 8002020:	08005061 	.word	0x08005061
 8002024:	08005061 	.word	0x08005061
 8002028:	08005061 	.word	0x08005061
 800202c:	08005061 	.word	0x08005061
 8002030:	08005061 	.word	0x08005061
 8002034:	08005061 	.word	0x08005061
 8002038:	08005061 	.word	0x08005061
 800203c:	08005061 	.word	0x08005061
 8002040:	08005061 	.word	0x08005061
 8002044:	08005061 	.word	0x08005061
 8002048:	08005061 	.word	0x08005061
 800204c:	08005061 	.word	0x08005061
 8002050:	08005061 	.word	0x08005061
 8002054:	08005061 	.word	0x08005061
 8002058:	08005061 	.word	0x08005061
 800205c:	08005061 	.word	0x08005061
 8002060:	08005061 	.word	0x08005061
 8002064:	08005061 	.word	0x08005061
 8002068:	08005061 	.word	0x08005061
 800206c:	08005061 	.word	0x08005061
 8002070:	08005061 	.word	0x08005061
 8002074:	08005061 	.word	0x08005061
 8002078:	08005061 	.word	0x08005061
 800207c:	08005061 	.word	0x08005061
 8002080:	08005061 	.word	0x08005061
 8002084:	08005061 	.word	0x08005061
 8002088:	08005061 	.word	0x08005061
 800208c:	08005061 	.word	0x08005061
 8002090:	0800428d 	.word	0x0800428d
 8002094:	08005061 	.word	0x08005061
 8002098:	08005061 	.word	0x08005061
 800209c:	08005061 	.word	0x08005061
 80020a0:	08005061 	.word	0x08005061
 80020a4:	08005061 	.word	0x08005061
 80020a8:	08005061 	.word	0x08005061
 80020ac:	08005061 	.word	0x08005061
 80020b0:	08005061 	.word	0x08005061
 80020b4:	08004de9 	.word	0x08004de9
 80020b8:	08004e69 	.word	0x08004e69
 80020bc:	08005061 	.word	0x08005061
 80020c0:	08005061 	.word	0x08005061
 80020c4:	08005061 	.word	0x08005061
 80020c8:	08005061 	.word	0x08005061
 80020cc:	08005061 	.word	0x08005061
 80020d0:	08005061 	.word	0x08005061
 80020d4:	08005061 	.word	0x08005061
 80020d8:	08005061 	.word	0x08005061
 80020dc:	08005061 	.word	0x08005061
 80020e0:	08005061 	.word	0x08005061
 80020e4:	080042c7 	.word	0x080042c7
 80020e8:	2bde      	cmp	r3, #222	; 0xde
 80020ea:	f002 8743 	beq.w	8004f74 <_ZN5Xicro9Spin_nodeEv+0x3528>
 80020ee:	f002 bfb7 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 0:
                if(_datain[0]==73){
 80020f2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80020f6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002100:	2b49      	cmp	r3, #73	; 0x49
 8002102:	d111      	bne.n	8002128 <_ZN5Xicro9Spin_nodeEv+0x6dc>
                    _crcIn=0;
 8002104:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002108:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c
                    _state=1;
 8002114:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002118:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 8002124:	f002 bf9c 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8002128:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800212c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8002138:	f002 bf92 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 1:
                if(_datain[0]==109){
 800213c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002140:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800214a:	2b6d      	cmp	r3, #109	; 0x6d
 800214c:	d109      	bne.n	8002162 <_ZN5Xicro9Spin_nodeEv+0x716>
                    _state=2;
 800214e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002152:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2202      	movs	r2, #2
 800215a:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 800215e:	f002 bf7f 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8002162:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002166:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8002172:	f002 bf75 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 2:
                if(_datain[0]==64){
 8002176:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800217a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002184:	2b40      	cmp	r3, #64	; 0x40
 8002186:	d109      	bne.n	800219c <_ZN5Xicro9Spin_nodeEv+0x750>
                    _state=3;
 8002188:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800218c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	2203      	movs	r2, #3
 8002194:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 8002198:	f002 bf62 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 800219c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80021a0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	2200      	movs	r2, #0
 80021a8:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80021ac:	f002 bf58 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 3:
                if(_datain[0]==99){
 80021b0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80021b4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80021be:	2b63      	cmp	r3, #99	; 0x63
 80021c0:	d109      	bne.n	80021d6 <_ZN5Xicro9Spin_nodeEv+0x78a>
                    _state=4;
 80021c2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80021c6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2204      	movs	r2, #4
 80021ce:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 80021d2:	f002 bf45 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 80021d6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80021da:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2200      	movs	r2, #0
 80021e2:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80021e6:	f002 bf3b 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            //strat protocol done
            case 4: // Signature
                q = _datain[0];
 80021ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80021ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 80021f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80021fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
                w = _datain[0];
 8002206:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800220a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002214:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002218:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
                q=q&0b11110000;
 8002222:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002226:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f893 3288 	ldrb.w	r3, [r3, #648]	; 0x288
 8002230:	f023 030f 	bic.w	r3, r3, #15
 8002234:	b2da      	uxtb	r2, r3
 8002236:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800223a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
                q=q>>4;
 8002244:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002248:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f893 3288 	ldrb.w	r3, [r3, #648]	; 0x288
 8002252:	091b      	lsrs	r3, r3, #4
 8002254:	b2da      	uxtb	r2, r3
 8002256:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800225a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f883 2288 	strb.w	r2, [r3, #648]	; 0x288
                w=w&0b1111;
 8002264:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002268:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f893 3289 	ldrb.w	r3, [r3, #649]	; 0x289
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	b2da      	uxtb	r2, r3
 8002278:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800227c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f883 2289 	strb.w	r2, [r3, #649]	; 0x289
                if(q == _Idmcu && w==2){
 8002286:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800228a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f893 2288 	ldrb.w	r2, [r3, #648]	; 0x288
 8002294:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002298:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f893 3148 	ldrb.w	r3, [r3, #328]	; 0x148
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d112      	bne.n	80022cc <_ZN5Xicro9Spin_nodeEv+0x880>
 80022a6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80022aa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f893 3289 	ldrb.w	r3, [r3, #649]	; 0x289
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d109      	bne.n	80022cc <_ZN5Xicro9Spin_nodeEv+0x880>
                   _state=5;  //check Idtopic
 80022b8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80022bc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	2205      	movs	r2, #5
 80022c4:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 80022c8:	f002 beca 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 80022cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80022d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80022dc:	f002 bec0 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 5:
                for (uint i=0;i<sizeof(_Idtopic_sub);i++){
 80022e0:	2300      	movs	r3, #0
 80022e2:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 80022e6:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	f042 86b5 	bne.w	800505a <_ZN5Xicro9Spin_nodeEv+0x360e>
                    if(_Idtopic_sub[i]== _datain[0]){
 80022f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80022f4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 80022fe:	4413      	add	r3, r2
 8002300:	f203 730c 	addw	r3, r3, #1804	; 0x70c
 8002304:	781a      	ldrb	r2, [r3, #0]
 8002306:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800230a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002314:	429a      	cmp	r2, r3
 8002316:	d124      	bne.n	8002362 <_ZN5Xicro9Spin_nodeEv+0x916>
                        _Indexdata=255;
 8002318:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800231c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	22ff      	movs	r2, #255	; 0xff
 8002324:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _OnTopic=i;
 8002328:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 800232c:	b25a      	sxtb	r2, r3
 800232e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002332:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f883 2269 	strb.w	r2, [r3, #617]	; 0x269
                        _Onindex=0;
 800233c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002340:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
                        _state=6;
 800234c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002350:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2206      	movs	r2, #6
 8002358:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                      
                        break;
 800235c:	bf00      	nop
                    }else{
                        _state=0;
                    }
                }
                break;
 800235e:	f002 be7c 	b.w	800505a <_ZN5Xicro9Spin_nodeEv+0x360e>
                        _state=0;
 8002362:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002366:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2200      	movs	r2, #0
 800236e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                for (uint i=0;i<sizeof(_Idtopic_sub);i++){
 8002372:	f8d7 3b04 	ldr.w	r3, [r7, #2820]	; 0xb04
 8002376:	3301      	adds	r3, #1
 8002378:	f8c7 3b04 	str.w	r3, [r7, #2820]	; 0xb04
 800237c:	e7b3      	b.n	80022e6 <_ZN5Xicro9Spin_nodeEv+0x89a>
            case 6:  //select type
                if(_datain[0]==_TopicType[_OnTopic][_Onindex]){
 800237e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002382:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 800238c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002390:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800239a:	461c      	mov	r4, r3
 800239c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80023a0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f893 3878 	ldrb.w	r3, [r3, #2168]	; 0x878
 80023aa:	4618      	mov	r0, r3
 80023ac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80023b0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80023b4:	6819      	ldr	r1, [r3, #0]
 80023b6:	0123      	lsls	r3, r4, #4
 80023b8:	440b      	add	r3, r1
 80023ba:	4403      	add	r3, r0
 80023bc:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	f040 8780 	bne.w	80032c8 <_ZN5Xicro9Spin_nodeEv+0x187c>
                    if(_datain[0]== 8  ||_datain[0]== 18 ){
 80023c8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80023cc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80023d6:	2b08      	cmp	r3, #8
 80023d8:	d008      	beq.n	80023ec <_ZN5Xicro9Spin_nodeEv+0x9a0>
 80023da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80023de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80023e8:	2b12      	cmp	r3, #18
 80023ea:	d151      	bne.n	8002490 <_ZN5Xicro9Spin_nodeEv+0xa44>
                        _Indexdata=_Indexdata+1;
 80023ec:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80023f0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80023fa:	3301      	adds	r3, #1
 80023fc:	b2da      	uxtb	r2, r3
 80023fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002402:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 800240c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002410:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800241a:	4618      	mov	r0, r3
 800241c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002420:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800242a:	4619      	mov	r1, r3
 800242c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002430:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002434:	681a      	ldr	r2, [r3, #0]
 8002436:	0103      	lsls	r3, r0, #4
 8002438:	4413      	add	r3, r2
 800243a:	440b      	add	r3, r1
 800243c:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002440:	781a      	ldrb	r2, [r3, #0]
 8002442:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002446:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ontype=_datain[0];
 8002450:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002454:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 800245e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002462:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _Ongrab=0;
 800246c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002470:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	2200      	movs	r2, #0
 8002478:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _state=10;
 800247c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002480:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	220a      	movs	r2, #10
 8002488:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 800248c:	f000 bf26 	b.w	80032dc <_ZN5Xicro9Spin_nodeEv+0x1890>
                    }else if(_datain[0]== 9 ||_datain[0]== 19){
 8002490:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002494:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800249e:	2b09      	cmp	r3, #9
 80024a0:	d008      	beq.n	80024b4 <_ZN5Xicro9Spin_nodeEv+0xa68>
 80024a2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80024a6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80024b0:	2b13      	cmp	r3, #19
 80024b2:	d159      	bne.n	8002568 <_ZN5Xicro9Spin_nodeEv+0xb1c>
                        _Indexdata=_Indexdata+1;
 80024b4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80024b8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80024c2:	3301      	adds	r3, #1
 80024c4:	b2da      	uxtb	r2, r3
 80024c6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80024ca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 80024d4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80024d8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80024e2:	4618      	mov	r0, r3
 80024e4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80024e8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80024f2:	4619      	mov	r1, r3
 80024f4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80024f8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	0103      	lsls	r3, r0, #4
 8002500:	4413      	add	r3, r2
 8002502:	440b      	add	r3, r1
 8002504:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002508:	781a      	ldrb	r2, [r3, #0]
 800250a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800250e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ontype=_datain[0];
 8002518:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800251c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002526:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800252a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _Ongrab=0;
 8002534:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002538:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2200      	movs	r2, #0
 8002540:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _statetogo=10;
 8002544:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002548:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	220a      	movs	r2, #10
 8002550:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
                        _state=9;
 8002554:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002558:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2209      	movs	r2, #9
 8002560:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8002564:	f000 beba 	b.w	80032dc <_ZN5Xicro9Spin_nodeEv+0x1890>
                    }else if(_datain[0]==16 ||_datain[0]== 116){
 8002568:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800256c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002576:	2b10      	cmp	r3, #16
 8002578:	d009      	beq.n	800258e <_ZN5Xicro9Spin_nodeEv+0xb42>
 800257a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800257e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002588:	2b74      	cmp	r3, #116	; 0x74
 800258a:	f040 8084 	bne.w	8002696 <_ZN5Xicro9Spin_nodeEv+0xc4a>
                        _loop=0;
 800258e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002592:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=2;
 800259e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80025a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2202      	movs	r2, #2
 80025aa:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;_Posdatapre=(_Posdatapre+1)%32;
 80025ae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80025b2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80025bc:	3301      	adds	r3, #1
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80025c4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
 80025ce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80025d2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f893 38bd 	ldrb.w	r3, [r3, #2237]	; 0x8bd
 80025dc:	3301      	adds	r3, #1
 80025de:	425a      	negs	r2, r3
 80025e0:	f003 031f 	and.w	r3, r3, #31
 80025e4:	f002 021f 	and.w	r2, r2, #31
 80025e8:	bf58      	it	pl
 80025ea:	4253      	negpl	r3, r2
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80025f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
                        _Ontype=_datain[0];
 80025fc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002600:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 800260a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800260e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002618:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800261c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002626:	4618      	mov	r0, r3
 8002628:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800262c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002636:	4619      	mov	r1, r3
 8002638:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800263c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002640:	681a      	ldr	r2, [r3, #0]
 8002642:	0103      	lsls	r3, r0, #4
 8002644:	4413      	add	r3, r2
 8002646:	440b      	add	r3, r1
 8002648:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 800264c:	781a      	ldrb	r2, [r3, #0]
 800264e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002652:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 800265c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002660:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2200      	movs	r2, #0
 8002668:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 800266c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002670:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002674:	6819      	ldr	r1, [r3, #0]
 8002676:	f04f 0200 	mov.w	r2, #0
 800267a:	f04f 0300 	mov.w	r3, #0
 800267e:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _state=11;  
 8002682:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002686:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	220b      	movs	r2, #11
 800268e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8002692:	f000 be23 	b.w	80032dc <_ZN5Xicro9Spin_nodeEv+0x1890>

                    }else if(_datain[0]==17 ||_datain[0]== 117){
 8002696:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800269a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80026a4:	2b11      	cmp	r3, #17
 80026a6:	d008      	beq.n	80026ba <_ZN5Xicro9Spin_nodeEv+0xc6e>
 80026a8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80026ac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80026b6:	2b75      	cmp	r3, #117	; 0x75
 80026b8:	d174      	bne.n	80027a4 <_ZN5Xicro9Spin_nodeEv+0xd58>
                        _loop=0;
 80026ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80026be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2200      	movs	r2, #0
 80026c6:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=2;
 80026ca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80026ce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2202      	movs	r2, #2
 80026d6:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 80026da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80026de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80026e8:	3301      	adds	r3, #1
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80026f0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 80026fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80026fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002708:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800270c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002716:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800271a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002724:	4618      	mov	r0, r3
 8002726:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800272a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002734:	4619      	mov	r1, r3
 8002736:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800273a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	0103      	lsls	r3, r0, #4
 8002742:	4413      	add	r3, r2
 8002744:	440b      	add	r3, r1
 8002746:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 800274a:	781a      	ldrb	r2, [r3, #0]
 800274c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002750:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 800275a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800275e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	2200      	movs	r2, #0
 8002766:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 800276a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800276e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002772:	6819      	ldr	r1, [r3, #0]
 8002774:	f04f 0200 	mov.w	r2, #0
 8002778:	f04f 0300 	mov.w	r3, #0
 800277c:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _statetogo=11;
 8002780:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002784:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	220b      	movs	r2, #11
 800278c:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
                        _state=9;  // verity N grab
 8002790:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002794:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	2209      	movs	r2, #9
 800279c:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 80027a0:	f000 bd9c 	b.w	80032dc <_ZN5Xicro9Spin_nodeEv+0x1890>
                    }else if(_datain[0]==32 ||_datain[0]== 132){
 80027a4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80027a8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80027b2:	2b20      	cmp	r3, #32
 80027b4:	d008      	beq.n	80027c8 <_ZN5Xicro9Spin_nodeEv+0xd7c>
 80027b6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80027ba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80027c4:	2b84      	cmp	r3, #132	; 0x84
 80027c6:	d17a      	bne.n	80028be <_ZN5Xicro9Spin_nodeEv+0xe72>
                        _loop=0;
 80027c8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80027cc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2200      	movs	r2, #0
 80027d4:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=4;
 80027d8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80027dc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2204      	movs	r2, #4
 80027e4:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 80027e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80027ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80027f6:	3301      	adds	r3, #1
 80027f8:	b2da      	uxtb	r2, r3
 80027fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80027fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002808:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800280c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002816:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800281a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _Ontype=_datain[0];
 8002824:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002828:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002832:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002836:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002840:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002844:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800284e:	4618      	mov	r0, r3
 8002850:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002854:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800285e:	4619      	mov	r1, r3
 8002860:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002864:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	0103      	lsls	r3, r0, #4
 800286c:	4413      	add	r3, r2
 800286e:	440b      	add	r3, r1
 8002870:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002874:	781a      	ldrb	r2, [r3, #0]
 8002876:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800287a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002884:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002888:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	2200      	movs	r2, #0
 8002890:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 8002894:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002898:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800289c:	6819      	ldr	r1, [r3, #0]
 800289e:	f04f 0200 	mov.w	r2, #0
 80028a2:	f04f 0300 	mov.w	r3, #0
 80028a6:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _state=11;
 80028aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80028ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	220b      	movs	r2, #11
 80028b6:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 80028ba:	f000 bd0f 	b.w	80032dc <_ZN5Xicro9Spin_nodeEv+0x1890>

                    }else if(_datain[0]==33 ||_datain[0]== 133){
 80028be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80028c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80028cc:	2b21      	cmp	r3, #33	; 0x21
 80028ce:	d009      	beq.n	80028e4 <_ZN5Xicro9Spin_nodeEv+0xe98>
 80028d0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80028d4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80028de:	2b85      	cmp	r3, #133	; 0x85
 80028e0:	f040 80e0 	bne.w	8002aa4 <_ZN5Xicro9Spin_nodeEv+0x1058>
                        _loop=0;
 80028e4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80028e8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=4;
 80028f4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80028f8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	2204      	movs	r2, #4
 8002900:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 8002904:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002908:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002912:	3301      	adds	r3, #1
 8002914:	b2da      	uxtb	r2, r3
 8002916:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800291a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002924:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002928:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002932:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002936:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002940:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002944:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800294e:	4618      	mov	r0, r3
 8002950:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002954:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800295e:	4619      	mov	r1, r3
 8002960:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002964:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	0103      	lsls	r3, r0, #4
 800296c:	4413      	add	r3, r2
 800296e:	440b      	add	r3, r1
 8002970:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002974:	781a      	ldrb	r2, [r3, #0]
 8002976:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800297a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002984:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002988:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2200      	movs	r2, #0
 8002990:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 8002994:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002998:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800299c:	6819      	ldr	r1, [r3, #0]
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _statetogo=11;
 80029aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80029ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	220b      	movs	r2, #11
 80029b6:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
                        _state=9;  // verity N grab_Posdatapre=(_Posdatapre+1)%32;){
 80029ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80029be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2209      	movs	r2, #9
 80029c6:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                        _loop=0;
 80029ca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80029ce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=8;
 80029da:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80029de:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2208      	movs	r2, #8
 80029e6:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 80029ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80029ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80029f8:	3301      	adds	r3, #1
 80029fa:	b2da      	uxtb	r2, r3
 80029fc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a00:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002a0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a0e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002a18:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a1c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002a26:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a2a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002a34:	4618      	mov	r0, r3
 8002a36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a3a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002a44:	4619      	mov	r1, r3
 8002a46:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a4a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	0103      	lsls	r3, r0, #4
 8002a52:	4413      	add	r3, r2
 8002a54:	440b      	add	r3, r1
 8002a56:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002a5a:	781a      	ldrb	r2, [r3, #0]
 8002a5c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a60:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002a6a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a6e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 8002a7a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a7e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a82:	6819      	ldr	r1, [r3, #0]
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _state=11;
 8002a90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002a94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	220b      	movs	r2, #11
 8002a9c:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8002aa0:	f000 bc1c 	b.w	80032dc <_ZN5Xicro9Spin_nodeEv+0x1890>
                    }else if(_datain[0]==65 || _datain[0]==165){
 8002aa4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002aa8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002ab2:	2b41      	cmp	r3, #65	; 0x41
 8002ab4:	d008      	beq.n	8002ac8 <_ZN5Xicro9Spin_nodeEv+0x107c>
 8002ab6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002aba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002ac4:	2ba5      	cmp	r3, #165	; 0xa5
 8002ac6:	d173      	bne.n	8002bb0 <_ZN5Xicro9Spin_nodeEv+0x1164>
                        _loop=0;
 8002ac8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002acc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=8;
 8002ad8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002adc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2208      	movs	r2, #8
 8002ae4:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 8002ae8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002aec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002af6:	3301      	adds	r3, #1
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002afe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002b08:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b0c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002b16:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b1a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002b24:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b28:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002b32:	4618      	mov	r0, r3
 8002b34:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b38:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002b42:	4619      	mov	r1, r3
 8002b44:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b48:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	0103      	lsls	r3, r0, #4
 8002b50:	4413      	add	r3, r2
 8002b52:	440b      	add	r3, r1
 8002b54:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002b58:	781a      	ldrb	r2, [r3, #0]
 8002b5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002b68:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b6c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 8002b78:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b7c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b80:	6819      	ldr	r1, [r3, #0]
 8002b82:	f04f 0200 	mov.w	r2, #0
 8002b86:	f04f 0300 	mov.w	r3, #0
 8002b8a:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _statetogo=11;
 8002b8e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002b92:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	220b      	movs	r2, #11
 8002b9a:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
                        _state=9;  // verity N grab
 8002b9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002ba2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2209      	movs	r2, #9
 8002baa:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8002bae:	e395      	b.n	80032dc <_ZN5Xicro9Spin_nodeEv+0x1890>
                    }else if(_datain[0]==111){
 8002bb0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002bb4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002bbe:	2b6f      	cmp	r3, #111	; 0x6f
 8002bc0:	d16c      	bne.n	8002c9c <_ZN5Xicro9Spin_nodeEv+0x1250>
                        _loop=0;
 8002bc2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002bc6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=4;
 8002bd2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002bd6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2204      	movs	r2, #4
 8002bde:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 8002be2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002be6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002bf0:	3301      	adds	r3, #1
 8002bf2:	b2da      	uxtb	r2, r3
 8002bf4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002bf8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002c02:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c06:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002c10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c14:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002c1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c22:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c32:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c42:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c46:	681a      	ldr	r2, [r3, #0]
 8002c48:	0103      	lsls	r3, r0, #4
 8002c4a:	4413      	add	r3, r2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002c52:	781a      	ldrb	r2, [r3, #0]
 8002c54:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c58:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002c62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c66:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 8002c72:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c76:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c7a:	6819      	ldr	r1, [r3, #0]
 8002c7c:	f04f 0200 	mov.w	r2, #0
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _state=11;  //get N byte
 8002c88:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002c8c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	220b      	movs	r2, #11
 8002c94:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                
                    
                }else{
                    _state=0;
                }
                break;
 8002c98:	f002 b9e2 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if(_datain[0]==112){
 8002c9c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002ca0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002caa:	2b70      	cmp	r3, #112	; 0x70
 8002cac:	d174      	bne.n	8002d98 <_ZN5Xicro9Spin_nodeEv+0x134c>
                        _loop=0;
 8002cae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002cb2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=4;
 8002cbe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002cc2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2204      	movs	r2, #4
 8002cca:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 8002cce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002cd2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002cdc:	3301      	adds	r3, #1
 8002cde:	b2da      	uxtb	r2, r3
 8002ce0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002ce4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002cee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002cf2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002cfc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d00:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _bb=0;
 8002d0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d0e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d12:	6819      	ldr	r1, [r3, #0]
 8002d14:	f04f 0200 	mov.w	r2, #0
 8002d18:	f04f 0300 	mov.w	r3, #0
 8002d1c:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002d20:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d24:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d34:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002d3e:	4619      	mov	r1, r3
 8002d40:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d44:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	0103      	lsls	r3, r0, #4
 8002d4c:	4413      	add	r3, r2
 8002d4e:	440b      	add	r3, r1
 8002d50:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002d54:	781a      	ldrb	r2, [r3, #0]
 8002d56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d5a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002d64:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d68:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	2200      	movs	r2, #0
 8002d70:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _statetogo=11;
 8002d74:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d78:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	220b      	movs	r2, #11
 8002d80:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
                        _state=9; // verity N grab
 8002d84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	2209      	movs	r2, #9
 8002d90:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8002d94:	f002 b964 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if(_datain[0]==222){
 8002d98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002d9c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002da6:	2bde      	cmp	r3, #222	; 0xde
 8002da8:	d16c      	bne.n	8002e84 <_ZN5Xicro9Spin_nodeEv+0x1438>
                        _loop=0;
 8002daa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002dae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2200      	movs	r2, #0
 8002db6:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=8;
 8002dba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002dbe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2208      	movs	r2, #8
 8002dc6:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 8002dca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002dce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002dd8:	3301      	adds	r3, #1
 8002dda:	b2da      	uxtb	r2, r3
 8002ddc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002de0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002dea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002dee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002df8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002dfc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002e06:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e0a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002e14:	4618      	mov	r0, r3
 8002e16:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e1a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002e24:	4619      	mov	r1, r3
 8002e26:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e2a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	0103      	lsls	r3, r0, #4
 8002e32:	4413      	add	r3, r2
 8002e34:	440b      	add	r3, r1
 8002e36:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002e3a:	781a      	ldrb	r2, [r3, #0]
 8002e3c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e40:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002e4a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e4e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2200      	movs	r2, #0
 8002e56:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bb=0;
 8002e5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	f04f 0200 	mov.w	r2, #0
 8002e68:	f04f 0300 	mov.w	r3, #0
 8002e6c:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _state=11;  //get N byte
 8002e70:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e74:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	220b      	movs	r2, #11
 8002e7c:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8002e80:	f002 b8ee 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if(_datain[0]==223){
 8002e84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002e92:	2bdf      	cmp	r3, #223	; 0xdf
 8002e94:	d174      	bne.n	8002f80 <_ZN5Xicro9Spin_nodeEv+0x1534>
                        _loop=0;
 8002e96:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002e9a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                        _loopTo=8;
 8002ea6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002eaa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	2208      	movs	r2, #8
 8002eb2:	f883 228b 	strb.w	r2, [r3, #651]	; 0x28b
                        _Indexdata=_Indexdata+1;
 8002eb6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002eba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002ecc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 8002ed6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002eda:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8002ee4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002ee8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _bb=0;
 8002ef2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002ef6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002efa:	6819      	ldr	r1, [r3, #0]
 8002efc:	f04f 0200 	mov.w	r2, #0
 8002f00:	f04f 0300 	mov.w	r3, #0
 8002f04:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002f08:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f0c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002f16:	4618      	mov	r0, r3
 8002f18:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f1c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002f26:	4619      	mov	r1, r3
 8002f28:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f2c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	0103      	lsls	r3, r0, #4
 8002f34:	4413      	add	r3, r2
 8002f36:	440b      	add	r3, r1
 8002f38:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002f3c:	781a      	ldrb	r2, [r3, #0]
 8002f3e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f42:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 8002f4c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f50:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	2200      	movs	r2, #0
 8002f58:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _statetogo=11;
 8002f5c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f60:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	220b      	movs	r2, #11
 8002f68:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
                        _state=9; // verity N grab
 8002f6c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f70:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	2209      	movs	r2, #9
 8002f78:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8002f7c:	f002 b870 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if(_datain[0]==242 ){
 8002f80:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f84:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8002f8e:	2bf2      	cmp	r3, #242	; 0xf2
 8002f90:	d15c      	bne.n	800304c <_ZN5Xicro9Spin_nodeEv+0x1600>
                        _Indexdata=_Indexdata+1;
 8002f92:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002f96:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002fa8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8002fb2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002fb6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002fc6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002fd6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	0103      	lsls	r3, r0, #4
 8002fde:	4413      	add	r3, r2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8002fe6:	781a      	ldrb	r2, [r3, #0]
 8002fe8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002fec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ontype=_datain[0];
 8002ff6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8002ffa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8003004:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003008:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _Ongrab=0;
 8003012:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003016:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bufff="";
 8003022:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003026:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f503 731c 	add.w	r3, r3, #624	; 0x270
 8003030:	49b8      	ldr	r1, [pc, #736]	; (8003314 <_ZN5Xicro9Spin_nodeEv+0x18c8>)
 8003032:	4618      	mov	r0, r3
 8003034:	f00e fa1f 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
                        _state=99; // get 1 string
 8003038:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800303c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	2263      	movs	r2, #99	; 0x63
 8003044:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8003048:	f002 b80a 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if (_datain[0]==243){
 800304c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003050:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800305a:	2bf3      	cmp	r3, #243	; 0xf3
 800305c:	d164      	bne.n	8003128 <_ZN5Xicro9Spin_nodeEv+0x16dc>
                        _Indexdata=_Indexdata+1;
 800305e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003062:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800306c:	3301      	adds	r3, #1
 800306e:	b2da      	uxtb	r2, r3
 8003070:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003074:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 800307e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003082:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800308c:	4618      	mov	r0, r3
 800308e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003092:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800309c:	4619      	mov	r1, r3
 800309e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80030a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	0103      	lsls	r3, r0, #4
 80030aa:	4413      	add	r3, r2
 80030ac:	440b      	add	r3, r1
 80030ae:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80030b8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ontype=_datain[0];
 80030c2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80030c6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 80030d0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80030d4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _Ongrab=0;
 80030de:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80030e2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	2200      	movs	r2, #0
 80030ea:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _bufff="";
 80030ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80030f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80030fc:	4985      	ldr	r1, [pc, #532]	; (8003314 <_ZN5Xicro9Spin_nodeEv+0x18c8>)
 80030fe:	4618      	mov	r0, r3
 8003100:	f00e f9b9 	bl	8011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
                        _statetogo=99;
 8003104:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003108:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	2263      	movs	r2, #99	; 0x63
 8003110:	f883 287b 	strb.w	r2, [r3, #2171]	; 0x87b
                        _state=9; // vreity N grab_Posdatapre=(_Posdatapre+1)%32;
 8003114:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003118:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2209      	movs	r2, #9
 8003120:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8003124:	f001 bf9c 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if(_datain[0]==88){
 8003128:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800312c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8003136:	2b58      	cmp	r3, #88	; 0x58
 8003138:	d14e      	bne.n	80031d8 <_ZN5Xicro9Spin_nodeEv+0x178c>
                        _Indexdata=_Indexdata+1;
 800313a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800313e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003148:	3301      	adds	r3, #1
 800314a:	b2da      	uxtb	r2, r3
 800314c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003150:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _bb=0;
 800315a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800315e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003162:	6819      	ldr	r1, [r3, #0]
 8003164:	f04f 0200 	mov.w	r2, #0
 8003168:	f04f 0300 	mov.w	r3, #0
 800316c:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8003170:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003174:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800317e:	4618      	mov	r0, r3
 8003180:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003184:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800318e:	4619      	mov	r1, r3
 8003190:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003194:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003198:	681a      	ldr	r2, [r3, #0]
 800319a:	0103      	lsls	r3, r0, #4
 800319c:	4413      	add	r3, r2
 800319e:	440b      	add	r3, r1
 80031a0:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 80031a4:	781a      	ldrb	r2, [r3, #0]
 80031a6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80031aa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 80031b4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80031b8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2200      	movs	r2, #0
 80031c0:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _state=50;  // 1 bool 
 80031c4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80031c8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	2232      	movs	r2, #50	; 0x32
 80031d0:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80031d4:	f001 bf44 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if(_datain[0]==89){
 80031d8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80031dc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80031e6:	2b59      	cmp	r3, #89	; 0x59
 80031e8:	d151      	bne.n	800328e <_ZN5Xicro9Spin_nodeEv+0x1842>
                        _Indexdata=_Indexdata+1;
 80031ea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80031ee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80031f8:	3301      	adds	r3, #1
 80031fa:	b2da      	uxtb	r2, r3
 80031fc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003200:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f883 226b 	strb.w	r2, [r3, #619]	; 0x26b
                        _Ontype=_datain[0];
 800320a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800320e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8003218:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800321c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f883 226a 	strb.w	r2, [r3, #618]	; 0x26a
                        _OngrabTo=_Nofdata[_OnTopic][_Indexdata];
 8003226:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800322a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003234:	4618      	mov	r0, r3
 8003236:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800323a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003244:	4619      	mov	r1, r3
 8003246:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800324a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800324e:	681a      	ldr	r2, [r3, #0]
 8003250:	0103      	lsls	r3, r0, #4
 8003252:	4413      	add	r3, r2
 8003254:	440b      	add	r3, r1
 8003256:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 800325a:	781a      	ldrb	r2, [r3, #0]
 800325c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003260:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f883 287a 	strb.w	r2, [r3, #2170]	; 0x87a
                        _Ongrab=0;
 800326a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800326e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2200      	movs	r2, #0
 8003276:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                        _state=60;  // Check N bool _Posdatapre=(_Posdatapre+1)%32;
 800327a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800327e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	223c      	movs	r2, #60	; 0x3c
 8003286:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 800328a:	f001 bee9 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    }else if(_datain[0]==126){
 800328e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003292:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800329c:	2b7e      	cmp	r3, #126	; 0x7e
 800329e:	d109      	bne.n	80032b4 <_ZN5Xicro9Spin_nodeEv+0x1868>
                        _state=90;
 80032a0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80032a4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	225a      	movs	r2, #90	; 0x5a
 80032ac:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80032b0:	f001 bed6 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                        _state=0;
 80032b4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80032b8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80032c4:	f001 becc 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 80032c8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80032cc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	2200      	movs	r2, #0
 80032d4:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80032d8:	f001 bec2 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
 80032dc:	f001 bec0 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 60:
                if(_datain[0]==_OngrabTo){
 80032e0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80032e4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 80032ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80032f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f893 387a 	ldrb.w	r3, [r3, #2170]	; 0x87a
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d10b      	bne.n	8003318 <_ZN5Xicro9Spin_nodeEv+0x18cc>
                    _state=61;
 8003300:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003304:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	223d      	movs	r2, #61	; 0x3d
 800330c:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003310:	e00a      	b.n	8003328 <_ZN5Xicro9Spin_nodeEv+0x18dc>
 8003312:	bf00      	nop
 8003314:	08012824 	.word	0x08012824
                }else{
                    _state=0;
 8003318:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800331c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }_Posdatapre=(_Posdatapre+1)%32;
 8003328:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800332c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f893 38bd 	ldrb.w	r3, [r3, #2237]	; 0x8bd
 8003336:	3301      	adds	r3, #1
 8003338:	425a      	negs	r2, r3
 800333a:	f003 031f 	and.w	r3, r3, #31
 800333e:	f002 021f 	and.w	r2, r2, #31
 8003342:	bf58      	it	pl
 8003344:	4253      	negpl	r3, r2
 8003346:	b2da      	uxtb	r2, r3
 8003348:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800334c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
                for(uint i=0;i<(8);i++){
 8003356:	2300      	movs	r3, #0
 8003358:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 800335c:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8003360:	2b07      	cmp	r3, #7
 8003362:	d85c      	bhi.n	800341e <_ZN5Xicro9Spin_nodeEv+0x19d2>
                    if(i+ (_Ongrab*8)<_OngrabTo){
 8003364:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003368:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003372:	00db      	lsls	r3, r3, #3
 8003374:	461a      	mov	r2, r3
 8003376:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 800337a:	4413      	add	r3, r2
 800337c:	f607 3208 	addw	r2, r7, #2824	; 0xb08
 8003380:	f6a2 3204 	subw	r2, r2, #2820	; 0xb04
 8003384:	6812      	ldr	r2, [r2, #0]
 8003386:	f892 287a 	ldrb.w	r2, [r2, #2170]	; 0x87a
 800338a:	4293      	cmp	r3, r2
 800338c:	d241      	bcs.n	8003412 <_ZN5Xicro9Spin_nodeEv+0x19c6>
                        *(bool*)_nonverify[_OnTopic][_Indexdata][i+ (_Ongrab*8)] = (bool)(((uint8_t)_datain[0] >>i)&0x01);
 800338e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003392:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800339c:	461a      	mov	r2, r3
 800339e:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80033a2:	fa42 f303 	asr.w	r3, r2, r3
 80033a6:	f003 0101 	and.w	r1, r3, #1
 80033aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80033ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80033b8:	461d      	mov	r5, r3
 80033ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80033be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80033c8:	461e      	mov	r6, r3
 80033ca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80033ce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 80033d8:	00db      	lsls	r3, r3, #3
 80033da:	461a      	mov	r2, r3
 80033dc:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 80033e0:	18d4      	adds	r4, r2, r3
 80033e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80033e6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80033ea:	6818      	ldr	r0, [r3, #0]
 80033ec:	4632      	mov	r2, r6
 80033ee:	00d2      	lsls	r2, r2, #3
 80033f0:	4432      	add	r2, r6
 80033f2:	462b      	mov	r3, r5
 80033f4:	00db      	lsls	r3, r3, #3
 80033f6:	442b      	add	r3, r5
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	4413      	add	r3, r2
 80033fc:	4423      	add	r3, r4
 80033fe:	33a2      	adds	r3, #162	; 0xa2
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4403      	add	r3, r0
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2900      	cmp	r1, #0
 8003408:	bf14      	ite	ne
 800340a:	2201      	movne	r2, #1
 800340c:	2200      	moveq	r2, #0
 800340e:	b2d2      	uxtb	r2, r2
 8003410:	701a      	strb	r2, [r3, #0]
                for(uint i=0;i<(8);i++){
 8003412:	f8d7 3b00 	ldr.w	r3, [r7, #2816]	; 0xb00
 8003416:	3301      	adds	r3, #1
 8003418:	f8c7 3b00 	str.w	r3, [r7, #2816]	; 0xb00
 800341c:	e79e      	b.n	800335c <_ZN5Xicro9Spin_nodeEv+0x1910>
                    }
                    
                }
                _Ongrab=_Ongrab+1;
 800341e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003422:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 800342c:	3301      	adds	r3, #1
 800342e:	b2da      	uxtb	r2, r3
 8003430:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003434:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                if(_Ongrab==(uint8_t)ceil(_OngrabTo/8.00)){
 800343e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003442:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f893 4879 	ldrb.w	r4, [r3, #2169]	; 0x879
 800344c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003450:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f893 387a 	ldrb.w	r3, [r3, #2170]	; 0x87a
 800345a:	ee07 3a90 	vmov	s15, r3
 800345e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8003462:	eeb2 5b00 	vmov.f64	d5, #32	; 0x41000000  8.0
 8003466:	ee87 6b05 	vdiv.f64	d6, d7, d5
 800346a:	eeb0 0b46 	vmov.f64	d0, d6
 800346e:	f00e f89b 	bl	80115a8 <ceil>
 8003472:	eeb0 7b40 	vmov.f64	d7, d0
 8003476:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 800347a:	edc7 7a00 	vstr	s15, [r7]
 800347e:	783b      	ldrb	r3, [r7, #0]
 8003480:	b2db      	uxtb	r3, r3
 8003482:	429c      	cmp	r4, r3
 8003484:	d109      	bne.n	800349a <_ZN5Xicro9Spin_nodeEv+0x1a4e>
                    
                    _state=222; // check main continue or stop
 8003486:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800348a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	22de      	movs	r2, #222	; 0xde
 8003492:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{

                    _state=61; // grab more data
                }

                break;
 8003496:	f001 bde3 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=61; // grab more data
 800349a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800349e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	223d      	movs	r2, #61	; 0x3d
 80034a6:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80034aa:	f001 bdd9 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 50:
                if(_datain[0]==250){ // continu true
 80034ae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80034b2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80034bc:	2bfa      	cmp	r3, #250	; 0xfa
 80034be:	d109      	bne.n	80034d4 <_ZN5Xicro9Spin_nodeEv+0x1a88>
                    _state=51;
 80034c0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80034c4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2233      	movs	r2, #51	; 0x33
 80034cc:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else if(_datain[0]==127){ //stop false
                    _state=54;
                }else{
                    _state=0;
                }
                break;
 80034d0:	f001 bdc6 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                }else if(_datain[0]==47){ // continue false
 80034d4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80034d8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80034e2:	2b2f      	cmp	r3, #47	; 0x2f
 80034e4:	d109      	bne.n	80034fa <_ZN5Xicro9Spin_nodeEv+0x1aae>
                    _state=52;
 80034e6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80034ea:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	2234      	movs	r2, #52	; 0x34
 80034f2:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80034f6:	f001 bdb3 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                }else if(_datain[0]==254){ // stop true
 80034fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80034fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8003508:	2bfe      	cmp	r3, #254	; 0xfe
 800350a:	d109      	bne.n	8003520 <_ZN5Xicro9Spin_nodeEv+0x1ad4>
                    _state=53;
 800350c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003510:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2235      	movs	r2, #53	; 0x35
 8003518:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 800351c:	f001 bda0 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                }else if(_datain[0]==127){ //stop false
 8003520:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003524:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800352e:	2b7f      	cmp	r3, #127	; 0x7f
 8003530:	d109      	bne.n	8003546 <_ZN5Xicro9Spin_nodeEv+0x1afa>
                    _state=54;
 8003532:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003536:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2236      	movs	r2, #54	; 0x36
 800353e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8003542:	f001 bd8d 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8003546:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800354a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	2200      	movs	r2, #0
 8003552:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8003556:	f001 bd83 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 51: //confiirm true and continue
                if(_datain[0]==250){
 800355a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800355e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8003568:	2bfa      	cmp	r3, #250	; 0xfa
 800356a:	d145      	bne.n	80035f8 <_ZN5Xicro9Spin_nodeEv+0x1bac>
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 800356c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003570:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800357a:	4618      	mov	r0, r3
 800357c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003580:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800358a:	461c      	mov	r4, r3
 800358c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003590:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 800359a:	461d      	mov	r5, r3
 800359c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80035a0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	4622      	mov	r2, r4
 80035a8:	00d2      	lsls	r2, r2, #3
 80035aa:	4422      	add	r2, r4
 80035ac:	4603      	mov	r3, r0
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	4403      	add	r3, r0
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	4413      	add	r3, r2
 80035b6:	442b      	add	r3, r5
 80035b8:	33a2      	adds	r3, #162	; 0xa2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	440b      	add	r3, r1
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	2201      	movs	r2, #1
 80035c2:	701a      	strb	r2, [r3, #0]
                    _Onindex=_Onindex+1;
 80035c4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80035c8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f893 3878 	ldrb.w	r3, [r3, #2168]	; 0x878
 80035d2:	3301      	adds	r3, #1
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80035da:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
                    _state=6;
 80035e4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80035e8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	2206      	movs	r2, #6
 80035f0:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 80035f4:	f001 bd34 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 80035f8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80035fc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8003608:	f001 bd2a 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 52: //confiirm false and continue
                if(_datain[0]==47){
 800360c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003610:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800361a:	2b2f      	cmp	r3, #47	; 0x2f
 800361c:	d145      	bne.n	80036aa <_ZN5Xicro9Spin_nodeEv+0x1c5e>
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)0;
 800361e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003622:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800362c:	4618      	mov	r0, r3
 800362e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003632:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800363c:	461c      	mov	r4, r3
 800363e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003642:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 800364c:	461d      	mov	r5, r3
 800364e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003652:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003656:	6819      	ldr	r1, [r3, #0]
 8003658:	4622      	mov	r2, r4
 800365a:	00d2      	lsls	r2, r2, #3
 800365c:	4422      	add	r2, r4
 800365e:	4603      	mov	r3, r0
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4403      	add	r3, r0
 8003664:	011b      	lsls	r3, r3, #4
 8003666:	4413      	add	r3, r2
 8003668:	442b      	add	r3, r5
 800366a:	33a2      	adds	r3, #162	; 0xa2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	440b      	add	r3, r1
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	2200      	movs	r2, #0
 8003674:	701a      	strb	r2, [r3, #0]
                    _Onindex=_Onindex+1;
 8003676:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800367a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f893 3878 	ldrb.w	r3, [r3, #2168]	; 0x878
 8003684:	3301      	adds	r3, #1
 8003686:	b2da      	uxtb	r2, r3
 8003688:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800368c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
                    _state=6;
 8003696:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800369a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	2206      	movs	r2, #6
 80036a2:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 80036a6:	f001 bcdb 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 80036aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80036ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80036ba:	f001 bcd1 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 53: //confiirm true and stop
                if(_datain[0]==254){
 80036be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80036c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80036cc:	2bfe      	cmp	r3, #254	; 0xfe
 80036ce:	d135      	bne.n	800373c <_ZN5Xicro9Spin_nodeEv+0x1cf0>
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)1;
 80036d0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80036d4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80036de:	4618      	mov	r0, r3
 80036e0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80036e4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 80036ee:	461c      	mov	r4, r3
 80036f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80036f4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 80036fe:	461d      	mov	r5, r3
 8003700:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003704:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003708:	6819      	ldr	r1, [r3, #0]
 800370a:	4622      	mov	r2, r4
 800370c:	00d2      	lsls	r2, r2, #3
 800370e:	4422      	add	r2, r4
 8003710:	4603      	mov	r3, r0
 8003712:	00db      	lsls	r3, r3, #3
 8003714:	4403      	add	r3, r0
 8003716:	011b      	lsls	r3, r3, #4
 8003718:	4413      	add	r3, r2
 800371a:	442b      	add	r3, r5
 800371c:	33a2      	adds	r3, #162	; 0xa2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	2201      	movs	r2, #1
 8003726:	701a      	strb	r2, [r3, #0]
                    _state=111;
 8003728:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800372c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	226f      	movs	r2, #111	; 0x6f
 8003734:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 8003738:	f001 bc92 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 800373c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003740:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 800374c:	f001 bc88 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 54: //confirm false and stop
                if(_datain[0]==127){
 8003750:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003754:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800375e:	2b7f      	cmp	r3, #127	; 0x7f
 8003760:	d135      	bne.n	80037ce <_ZN5Xicro9Spin_nodeEv+0x1d82>
                    *(bool*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (bool)0;
 8003762:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003766:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003770:	4618      	mov	r0, r3
 8003772:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003776:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003780:	461c      	mov	r4, r3
 8003782:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003786:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003790:	461d      	mov	r5, r3
 8003792:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003796:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800379a:	6819      	ldr	r1, [r3, #0]
 800379c:	4622      	mov	r2, r4
 800379e:	00d2      	lsls	r2, r2, #3
 80037a0:	4422      	add	r2, r4
 80037a2:	4603      	mov	r3, r0
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4403      	add	r3, r0
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	4413      	add	r3, r2
 80037ac:	442b      	add	r3, r5
 80037ae:	33a2      	adds	r3, #162	; 0xa2
 80037b0:	009b      	lsls	r3, r3, #2
 80037b2:	440b      	add	r3, r1
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]
                    _state=111;
 80037ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80037be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	226f      	movs	r2, #111	; 0x6f
 80037c6:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 80037ca:	f001 bc49 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 80037ce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80037d2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2200      	movs	r2, #0
 80037da:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80037de:	f001 bc3f 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>




            case 9: // check N grab 
                if(_datain[0]==_OngrabTo){
 80037e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80037e6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 80037f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80037f4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f893 387a 	ldrb.w	r3, [r3, #2170]	; 0x87a
 80037fe:	429a      	cmp	r2, r3
 8003800:	d10f      	bne.n	8003822 <_ZN5Xicro9Spin_nodeEv+0x1dd6>
                    _state=_statetogo;
 8003802:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003806:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f893 287b 	ldrb.w	r2, [r3, #2171]	; 0x87b
 8003810:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003814:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 800381e:	f001 bc1f 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8003822:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003826:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8003832:	f001 bc15 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 10: //uint8 and  int 8 
                if(_Ontype==8 || _Ontype==9){
 8003836:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800383a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003844:	2b08      	cmp	r3, #8
 8003846:	d008      	beq.n	800385a <_ZN5Xicro9Spin_nodeEv+0x1e0e>
 8003848:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800384c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003856:	2b09      	cmp	r3, #9
 8003858:	d132      	bne.n	80038c0 <_ZN5Xicro9Spin_nodeEv+0x1e74>
                    *(uint8_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (uint8_t)_datain[0];
 800385a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800385e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003868:	4618      	mov	r0, r3
 800386a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800386e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003878:	461c      	mov	r4, r3
 800387a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800387e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003888:	461d      	mov	r5, r3
 800388a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800388e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003892:	6819      	ldr	r1, [r3, #0]
 8003894:	4622      	mov	r2, r4
 8003896:	00d2      	lsls	r2, r2, #3
 8003898:	4422      	add	r2, r4
 800389a:	4603      	mov	r3, r0
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4403      	add	r3, r0
 80038a0:	011b      	lsls	r3, r3, #4
 80038a2:	4413      	add	r3, r2
 80038a4:	442b      	add	r3, r5
 80038a6:	33a2      	adds	r3, #162	; 0xa2
 80038a8:	009b      	lsls	r3, r3, #2
 80038aa:	440b      	add	r3, r1
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f607 3208 	addw	r2, r7, #2824	; 0xb08
 80038b2:	f6a2 3204 	subw	r2, r2, #2820	; 0xb04
 80038b6:	6812      	ldr	r2, [r2, #0]
 80038b8:	f892 225a 	ldrb.w	r2, [r2, #602]	; 0x25a
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e044      	b.n	800394a <_ZN5Xicro9Spin_nodeEv+0x1efe>
                }else if(_Ontype==18 || _Ontype==19){
 80038c0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80038c4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 80038ce:	2b12      	cmp	r3, #18
 80038d0:	d008      	beq.n	80038e4 <_ZN5Xicro9Spin_nodeEv+0x1e98>
 80038d2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80038d6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 80038e0:	2b13      	cmp	r3, #19
 80038e2:	d132      	bne.n	800394a <_ZN5Xicro9Spin_nodeEv+0x1efe>
                    *(int8_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] = (int8_t)_datain[0];
 80038e4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80038e8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f893 525a 	ldrb.w	r5, [r3, #602]	; 0x25a
 80038f2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80038f6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003900:	4618      	mov	r0, r3
 8003902:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003906:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003910:	461c      	mov	r4, r3
 8003912:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003916:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003920:	461e      	mov	r6, r3
 8003922:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003926:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800392a:	6819      	ldr	r1, [r3, #0]
 800392c:	4622      	mov	r2, r4
 800392e:	00d2      	lsls	r2, r2, #3
 8003930:	4422      	add	r2, r4
 8003932:	4603      	mov	r3, r0
 8003934:	00db      	lsls	r3, r3, #3
 8003936:	4403      	add	r3, r0
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	4413      	add	r3, r2
 800393c:	4433      	add	r3, r6
 800393e:	33a2      	adds	r3, #162	; 0xa2
 8003940:	009b      	lsls	r3, r3, #2
 8003942:	440b      	add	r3, r1
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	b26a      	sxtb	r2, r5
 8003948:	701a      	strb	r2, [r3, #0]
                }

                _Ongrab=_Ongrab+1;
 800394a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800394e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003958:	3301      	adds	r3, #1
 800395a:	b2da      	uxtb	r2, r3
 800395c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003960:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                if(_Ongrab==_OngrabTo){
 800396a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800396e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f893 2879 	ldrb.w	r2, [r3, #2169]	; 0x879
 8003978:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800397c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f893 387a 	ldrb.w	r3, [r3, #2170]	; 0x87a
 8003986:	429a      	cmp	r2, r3
 8003988:	d109      	bne.n	800399e <_ZN5Xicro9Spin_nodeEv+0x1f52>
                    _state=222; // check main continue or stop
 800398a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800398e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	22de      	movs	r2, #222	; 0xde
 8003996:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=10; // grab more data
                }
                break;
 800399a:	f001 bb61 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=10; // grab more data
 800399e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80039a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	220a      	movs	r2, #10
 80039aa:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80039ae:	f001 bb57 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
   
            case 11: //n byte
                _loop=_loop+1;
 80039b2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80039b6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	f893 328a 	ldrb.w	r3, [r3, #650]	; 0x28a
 80039c0:	3301      	adds	r3, #1
 80039c2:	b2da      	uxtb	r2, r3
 80039c4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80039c8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                _bb= _bb<<8 ;
 80039d2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80039d6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	020b      	lsls	r3, r1, #8
 80039ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80039ee:	0202      	lsls	r2, r0, #8
 80039f0:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 80039f4:	f6a1 3104 	subw	r1, r1, #2820	; 0xb04
 80039f8:	6809      	ldr	r1, [r1, #0]
 80039fa:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                _bb=_bb | _datain[0];
 80039fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a02:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8003a0c:	f607 3108 	addw	r1, r7, #2824	; 0xb08
 8003a10:	f6a1 3104 	subw	r1, r1, #2820	; 0xb04
 8003a14:	6809      	ldr	r1, [r1, #0]
 8003a16:	f891 125a 	ldrb.w	r1, [r1, #602]	; 0x25a
 8003a1a:	b2c9      	uxtb	r1, r1
 8003a1c:	2000      	movs	r0, #0
 8003a1e:	460c      	mov	r4, r1
 8003a20:	4605      	mov	r5, r0
 8003a22:	ea42 0804 	orr.w	r8, r2, r4
 8003a26:	ea43 0905 	orr.w	r9, r3, r5
 8003a2a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a2e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	e9c3 8998 	strd	r8, r9, [r3, #608]	; 0x260
                if((_Ontype==16 || _Ontype==17 ) && _loop==_loopTo){
 8003a38:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a3c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003a46:	2b10      	cmp	r3, #16
 8003a48:	d008      	beq.n	8003a5c <_ZN5Xicro9Spin_nodeEv+0x2010>
 8003a4a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a4e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003a58:	2b11      	cmp	r3, #17
 8003a5a:	d14b      	bne.n	8003af4 <_ZN5Xicro9Spin_nodeEv+0x20a8>
 8003a5c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a60:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 8003a6a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a6e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d13b      	bne.n	8003af4 <_ZN5Xicro9Spin_nodeEv+0x20a8>
                    *(uint16_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (uint16_t)_bb;
 8003a7c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a80:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003a8a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a8e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003a98:	461d      	mov	r5, r3
 8003a9a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003a9e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003aa8:	461e      	mov	r6, r3
 8003aaa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003aae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003ab8:	469c      	mov	ip, r3
 8003aba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003abe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ac2:	681c      	ldr	r4, [r3, #0]
 8003ac4:	4632      	mov	r2, r6
 8003ac6:	00d2      	lsls	r2, r2, #3
 8003ac8:	4432      	add	r2, r6
 8003aca:	462b      	mov	r3, r5
 8003acc:	00db      	lsls	r3, r3, #3
 8003ace:	442b      	add	r3, r5
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	4413      	add	r3, r2
 8003ad4:	4463      	add	r3, ip
 8003ad6:	33a2      	adds	r3, #162	; 0xa2
 8003ad8:	009b      	lsls	r3, r3, #2
 8003ada:	4423      	add	r3, r4
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	b282      	uxth	r2, r0
 8003ae0:	801a      	strh	r2, [r3, #0]
                    _state=222;
 8003ae2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ae6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	22de      	movs	r2, #222	; 0xde
 8003aee:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003af2:	e375      	b.n	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                }else if((_Ontype==116 || _Ontype==117 ) && _loop==_loopTo){
 8003af4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003af8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003b02:	2b74      	cmp	r3, #116	; 0x74
 8003b04:	d008      	beq.n	8003b18 <_ZN5Xicro9Spin_nodeEv+0x20cc>
 8003b06:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b0a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003b14:	2b75      	cmp	r3, #117	; 0x75
 8003b16:	d14b      	bne.n	8003bb0 <_ZN5Xicro9Spin_nodeEv+0x2164>
 8003b18:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b1c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 8003b26:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b2a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d13b      	bne.n	8003bb0 <_ZN5Xicro9Spin_nodeEv+0x2164>
                    *(int16_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (int16_t)_bb;
 8003b38:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b3c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003b46:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b4a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003b54:	461d      	mov	r5, r3
 8003b56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b5a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003b64:	461e      	mov	r6, r3
 8003b66:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b6a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003b74:	469c      	mov	ip, r3
 8003b76:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003b7a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003b7e:	681c      	ldr	r4, [r3, #0]
 8003b80:	4632      	mov	r2, r6
 8003b82:	00d2      	lsls	r2, r2, #3
 8003b84:	4432      	add	r2, r6
 8003b86:	462b      	mov	r3, r5
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	442b      	add	r3, r5
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	4413      	add	r3, r2
 8003b90:	4463      	add	r3, ip
 8003b92:	33a2      	adds	r3, #162	; 0xa2
 8003b94:	009b      	lsls	r3, r3, #2
 8003b96:	4423      	add	r3, r4
 8003b98:	685b      	ldr	r3, [r3, #4]
 8003b9a:	b202      	sxth	r2, r0
 8003b9c:	801a      	strh	r2, [r3, #0]
                    _state=222;
 8003b9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ba2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	22de      	movs	r2, #222	; 0xde
 8003baa:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003bae:	e317      	b.n	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                }else if((_Ontype==32 || _Ontype==33 ) && _loop==_loopTo){
 8003bb0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003bb4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003bbe:	2b20      	cmp	r3, #32
 8003bc0:	d008      	beq.n	8003bd4 <_ZN5Xicro9Spin_nodeEv+0x2188>
 8003bc2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003bc6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003bd0:	2b21      	cmp	r3, #33	; 0x21
 8003bd2:	d14b      	bne.n	8003c6c <_ZN5Xicro9Spin_nodeEv+0x2220>
 8003bd4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003bd8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 8003be2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003be6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d13b      	bne.n	8003c6c <_ZN5Xicro9Spin_nodeEv+0x2220>
                    *(uint32_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (uint32_t)_bb;
 8003bf4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003bf8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003c02:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c06:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003c10:	461d      	mov	r5, r3
 8003c12:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c16:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003c20:	461e      	mov	r6, r3
 8003c22:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c26:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003c30:	469c      	mov	ip, r3
 8003c32:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c36:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c3a:	681c      	ldr	r4, [r3, #0]
 8003c3c:	4632      	mov	r2, r6
 8003c3e:	00d2      	lsls	r2, r2, #3
 8003c40:	4432      	add	r2, r6
 8003c42:	462b      	mov	r3, r5
 8003c44:	00db      	lsls	r3, r3, #3
 8003c46:	442b      	add	r3, r5
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	4413      	add	r3, r2
 8003c4c:	4463      	add	r3, ip
 8003c4e:	33a2      	adds	r3, #162	; 0xa2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	4423      	add	r3, r4
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	4602      	mov	r2, r0
 8003c58:	601a      	str	r2, [r3, #0]
                    _state=222;
 8003c5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	22de      	movs	r2, #222	; 0xde
 8003c66:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003c6a:	e2b9      	b.n	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                }else if((_Ontype==132 || _Ontype==133 ) && _loop==_loopTo){
 8003c6c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c70:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003c7a:	2b84      	cmp	r3, #132	; 0x84
 8003c7c:	d008      	beq.n	8003c90 <_ZN5Xicro9Spin_nodeEv+0x2244>
 8003c7e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c82:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003c8c:	2b85      	cmp	r3, #133	; 0x85
 8003c8e:	d14b      	bne.n	8003d28 <_ZN5Xicro9Spin_nodeEv+0x22dc>
 8003c90:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003c94:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 8003c9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ca2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8003cac:	429a      	cmp	r2, r3
 8003cae:	d13b      	bne.n	8003d28 <_ZN5Xicro9Spin_nodeEv+0x22dc>
                    *(int32_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (int32_t)_bb;
 8003cb0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003cb4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003cbe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003cc2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003ccc:	461d      	mov	r5, r3
 8003cce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003cd2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003cdc:	461e      	mov	r6, r3
 8003cde:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ce2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003cec:	469c      	mov	ip, r3
 8003cee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003cf2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003cf6:	681c      	ldr	r4, [r3, #0]
 8003cf8:	4632      	mov	r2, r6
 8003cfa:	00d2      	lsls	r2, r2, #3
 8003cfc:	4432      	add	r2, r6
 8003cfe:	462b      	mov	r3, r5
 8003d00:	00db      	lsls	r3, r3, #3
 8003d02:	442b      	add	r3, r5
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	4413      	add	r3, r2
 8003d08:	4463      	add	r3, ip
 8003d0a:	33a2      	adds	r3, #162	; 0xa2
 8003d0c:	009b      	lsls	r3, r3, #2
 8003d0e:	4423      	add	r3, r4
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	4602      	mov	r2, r0
 8003d14:	601a      	str	r2, [r3, #0]
                    _state=222;
 8003d16:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d1a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	22de      	movs	r2, #222	; 0xde
 8003d22:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003d26:	e25b      	b.n	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                }else if((_Ontype==64 || _Ontype==65 ) && _loop==_loopTo){
 8003d28:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d2c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003d36:	2b40      	cmp	r3, #64	; 0x40
 8003d38:	d008      	beq.n	8003d4c <_ZN5Xicro9Spin_nodeEv+0x2300>
 8003d3a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d3e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003d48:	2b41      	cmp	r3, #65	; 0x41
 8003d4a:	d14b      	bne.n	8003de4 <_ZN5Xicro9Spin_nodeEv+0x2398>
 8003d4c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d50:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 8003d5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8003d68:	429a      	cmp	r2, r3
 8003d6a:	d13b      	bne.n	8003de4 <_ZN5Xicro9Spin_nodeEv+0x2398>
                    *(uint64_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (uint64_t)_bb;
 8003d6c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d70:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003d7a:	4618      	mov	r0, r3
 8003d7c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d80:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003d8a:	461c      	mov	r4, r3
 8003d8c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003d90:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003da0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003da4:	6819      	ldr	r1, [r3, #0]
 8003da6:	4622      	mov	r2, r4
 8003da8:	00d2      	lsls	r2, r2, #3
 8003daa:	4422      	add	r2, r4
 8003dac:	4603      	mov	r3, r0
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4403      	add	r3, r0
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	4413      	add	r3, r2
 8003db6:	442b      	add	r3, r5
 8003db8:	33a2      	adds	r3, #162	; 0xa2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003dc4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8003dce:	e9c1 2300 	strd	r2, r3, [r1]
                    _state=222;
 8003dd2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003dd6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	22de      	movs	r2, #222	; 0xde
 8003dde:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003de2:	e1fd      	b.n	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                }else if((_Ontype==164 || _Ontype==165 ) && _loop==_loopTo){
 8003de4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003de8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003df2:	2ba4      	cmp	r3, #164	; 0xa4
 8003df4:	d008      	beq.n	8003e08 <_ZN5Xicro9Spin_nodeEv+0x23bc>
 8003df6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003dfa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003e04:	2ba5      	cmp	r3, #165	; 0xa5
 8003e06:	d14d      	bne.n	8003ea4 <_ZN5Xicro9Spin_nodeEv+0x2458>
 8003e08:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e0c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 8003e16:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e1a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d13d      	bne.n	8003ea4 <_ZN5Xicro9Spin_nodeEv+0x2458>
                    *(int64_t*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (int64_t)_bb;
 8003e28:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e2c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003e36:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e3a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003e44:	461d      	mov	r5, r3
 8003e46:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e4a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003e54:	461e      	mov	r6, r3
 8003e56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e5a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003e64:	469c      	mov	ip, r3
 8003e66:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e6a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e6e:	681c      	ldr	r4, [r3, #0]
 8003e70:	4632      	mov	r2, r6
 8003e72:	00d2      	lsls	r2, r2, #3
 8003e74:	4432      	add	r2, r6
 8003e76:	462b      	mov	r3, r5
 8003e78:	00db      	lsls	r3, r3, #3
 8003e7a:	442b      	add	r3, r5
 8003e7c:	011b      	lsls	r3, r3, #4
 8003e7e:	4413      	add	r3, r2
 8003e80:	4463      	add	r3, ip
 8003e82:	33a2      	adds	r3, #162	; 0xa2
 8003e84:	009b      	lsls	r3, r3, #2
 8003e86:	4423      	add	r3, r4
 8003e88:	685c      	ldr	r4, [r3, #4]
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	e9c4 2300 	strd	r2, r3, [r4]
                    _state=222;
 8003e92:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003e96:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	22de      	movs	r2, #222	; 0xde
 8003e9e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003ea2:	e19d      	b.n	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                }else if((_Ontype==111 || _Ontype==112 ) && _loop==_loopTo){
 8003ea4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ea8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003eb2:	2b6f      	cmp	r3, #111	; 0x6f
 8003eb4:	d009      	beq.n	8003eca <_ZN5Xicro9Spin_nodeEv+0x247e>
 8003eb6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003eba:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8003ec4:	2b70      	cmp	r3, #112	; 0x70
 8003ec6:	f040 8096 	bne.w	8003ff6 <_ZN5Xicro9Spin_nodeEv+0x25aa>
 8003eca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ece:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 8003ed8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003edc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	f040 8085 	bne.w	8003ff6 <_ZN5Xicro9Spin_nodeEv+0x25aa>
                    uint8_t bu[4];
                    bu[0] = (_bb >> 0)  & 0xFF;
 8003eec:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ef0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f00:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8003f04:	701a      	strb	r2, [r3, #0]
                    bu[1] = (_bb >> 8)  & 0xFF;
 8003f06:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f0a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003f14:	f04f 0200 	mov.w	r2, #0
 8003f18:	f04f 0300 	mov.w	r3, #0
 8003f1c:	0a02      	lsrs	r2, r0, #8
 8003f1e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003f22:	0a0b      	lsrs	r3, r1, #8
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f2a:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8003f2e:	705a      	strb	r2, [r3, #1]
                    bu[2] = (_bb >> 16) & 0xFF;
 8003f30:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f34:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003f3e:	f04f 0200 	mov.w	r2, #0
 8003f42:	f04f 0300 	mov.w	r3, #0
 8003f46:	0c02      	lsrs	r2, r0, #16
 8003f48:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003f4c:	0c0b      	lsrs	r3, r1, #16
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f54:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8003f58:	709a      	strb	r2, [r3, #2]
                    bu[3] = (_bb >> 24) & 0xFF;
 8003f5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	0e02      	lsrs	r2, r0, #24
 8003f72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003f76:	0e0b      	lsrs	r3, r1, #24
 8003f78:	b2d2      	uxtb	r2, r2
 8003f7a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f7e:	f6a3 23f4 	subw	r3, r3, #2804	; 0xaf4
 8003f82:	70da      	strb	r2, [r3, #3]
                    memcpy (_nonverify[_OnTopic][_Indexdata][_Ongrab], bu, 4);
 8003f84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8003f92:	4618      	mov	r0, r3
 8003f94:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003f98:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8003fa2:	461c      	mov	r4, r3
 8003fa4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003fa8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8003fb2:	461d      	mov	r5, r3
 8003fb4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003fb8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003fbc:	6819      	ldr	r1, [r3, #0]
 8003fbe:	4622      	mov	r2, r4
 8003fc0:	00d2      	lsls	r2, r2, #3
 8003fc2:	4422      	add	r2, r4
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	00db      	lsls	r3, r3, #3
 8003fc8:	4403      	add	r3, r0
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	4413      	add	r3, r2
 8003fce:	442b      	add	r3, r5
 8003fd0:	33a2      	adds	r3, #162	; 0xa2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	440b      	add	r3, r1
 8003fd6:	685b      	ldr	r3, [r3, #4]
 8003fd8:	f607 3208 	addw	r2, r7, #2824	; 0xb08
 8003fdc:	f6a2 22f4 	subw	r2, r2, #2804	; 0xaf4
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	601a      	str	r2, [r3, #0]
                    _state=222;
 8003fe4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003fe8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	22de      	movs	r2, #222	; 0xde
 8003ff0:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
 8003ff4:	e0f4      	b.n	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                }else if((_Ontype==222 || _Ontype==223 ) && _loop==_loopTo){
 8003ff6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8003ffa:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8004004:	2bde      	cmp	r3, #222	; 0xde
 8004006:	d009      	beq.n	800401c <_ZN5Xicro9Spin_nodeEv+0x25d0>
 8004008:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800400c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f893 326a 	ldrb.w	r3, [r3, #618]	; 0x26a
 8004016:	2bdf      	cmp	r3, #223	; 0xdf
 8004018:	f040 80e2 	bne.w	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
 800401c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004020:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 800402a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800402e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 8004038:	429a      	cmp	r2, r3
 800403a:	f040 80d1 	bne.w	80041e0 <_ZN5Xicro9Spin_nodeEv+0x2794>
                    uint8_t bu[8];
                    bu[0] = (_bb >> 0)  & 0xFF;
 800403e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004042:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	e9d3 2398 	ldrd	r2, r3, [r3, #608]	; 0x260
 800404c:	b2d2      	uxtb	r2, r2
 800404e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004052:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8004056:	701a      	strb	r2, [r3, #0]
                    bu[1] = (_bb >> 8)  & 0xFF;
 8004058:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800405c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8004066:	f04f 0200 	mov.w	r2, #0
 800406a:	f04f 0300 	mov.w	r3, #0
 800406e:	0a02      	lsrs	r2, r0, #8
 8004070:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8004074:	0a0b      	lsrs	r3, r1, #8
 8004076:	b2d2      	uxtb	r2, r2
 8004078:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800407c:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8004080:	705a      	strb	r2, [r3, #1]
                    bu[2] = (_bb >> 16) & 0xFF;
 8004082:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004086:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8004090:	f04f 0200 	mov.w	r2, #0
 8004094:	f04f 0300 	mov.w	r3, #0
 8004098:	0c02      	lsrs	r2, r0, #16
 800409a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800409e:	0c0b      	lsrs	r3, r1, #16
 80040a0:	b2d2      	uxtb	r2, r2
 80040a2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80040a6:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 80040aa:	709a      	strb	r2, [r3, #2]
                    bu[3] = (_bb >> 24) & 0xFF;
 80040ac:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80040b0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 80040ba:	f04f 0200 	mov.w	r2, #0
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	0e02      	lsrs	r2, r0, #24
 80040c4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80040c8:	0e0b      	lsrs	r3, r1, #24
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80040d0:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 80040d4:	70da      	strb	r2, [r3, #3]
                    bu[4] = (_bb >> 32)  & 0xFF;
 80040d6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80040da:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 80040e4:	f04f 0200 	mov.w	r2, #0
 80040e8:	f04f 0300 	mov.w	r3, #0
 80040ec:	000a      	movs	r2, r1
 80040ee:	2300      	movs	r3, #0
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80040f6:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 80040fa:	711a      	strb	r2, [r3, #4]
                    bu[5] = (_bb >> 40)  & 0xFF;
 80040fc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004100:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 800410a:	f04f 0200 	mov.w	r2, #0
 800410e:	f04f 0300 	mov.w	r3, #0
 8004112:	0a0a      	lsrs	r2, r1, #8
 8004114:	2300      	movs	r3, #0
 8004116:	b2d2      	uxtb	r2, r2
 8004118:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800411c:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8004120:	715a      	strb	r2, [r3, #5]
                    bu[6] = (_bb >> 48) & 0xFF;
 8004122:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004126:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8004130:	f04f 0200 	mov.w	r2, #0
 8004134:	f04f 0300 	mov.w	r3, #0
 8004138:	0c0a      	lsrs	r2, r1, #16
 800413a:	2300      	movs	r3, #0
 800413c:	b2d2      	uxtb	r2, r2
 800413e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004142:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 8004146:	719a      	strb	r2, [r3, #6]
                    bu[7] = (_bb >> 56) & 0xFF;
 8004148:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800414c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	e9d3 0198 	ldrd	r0, r1, [r3, #608]	; 0x260
 8004156:	f04f 0200 	mov.w	r2, #0
 800415a:	f04f 0300 	mov.w	r3, #0
 800415e:	0e0a      	lsrs	r2, r1, #24
 8004160:	2300      	movs	r3, #0
 8004162:	b2d2      	uxtb	r2, r2
 8004164:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004168:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 800416c:	71da      	strb	r2, [r3, #7]
                    memcpy (_nonverify[_OnTopic][_Indexdata][_Ongrab], bu, 8);
 800416e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004172:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800417c:	4618      	mov	r0, r3
 800417e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004182:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 800418c:	461c      	mov	r4, r3
 800418e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004192:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 800419c:	461d      	mov	r5, r3
 800419e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80041a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80041a6:	6819      	ldr	r1, [r3, #0]
 80041a8:	4622      	mov	r2, r4
 80041aa:	00d2      	lsls	r2, r2, #3
 80041ac:	4422      	add	r2, r4
 80041ae:	4603      	mov	r3, r0
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4403      	add	r3, r0
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	4413      	add	r3, r2
 80041b8:	442b      	add	r3, r5
 80041ba:	33a2      	adds	r3, #162	; 0xa2
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	440b      	add	r3, r1
 80041c0:	685a      	ldr	r2, [r3, #4]
 80041c2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80041c6:	f6a3 23fc 	subw	r3, r3, #2812	; 0xafc
 80041ca:	cb03      	ldmia	r3!, {r0, r1}
 80041cc:	6010      	str	r0, [r2, #0]
 80041ce:	6051      	str	r1, [r2, #4]
                    _state=222;
 80041d0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80041d4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	22de      	movs	r2, #222	; 0xde
 80041dc:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }

                if( _loop==_loopTo){
 80041e0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80041e4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f893 228a 	ldrb.w	r2, [r3, #650]	; 0x28a
 80041ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80041f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f893 328b 	ldrb.w	r3, [r3, #651]	; 0x28b
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d12a      	bne.n	8004256 <_ZN5Xicro9Spin_nodeEv+0x280a>
                    _bb= 0;
 8004200:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004204:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004208:	6819      	ldr	r1, [r3, #0]
 800420a:	f04f 0200 	mov.w	r2, #0
 800420e:	f04f 0300 	mov.w	r3, #0
 8004212:	e9c1 2398 	strd	r2, r3, [r1, #608]	; 0x260
                    _loop=0;
 8004216:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800421a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 228a 	strb.w	r2, [r3, #650]	; 0x28a
                    _state=11;  // get more N data
 8004226:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800422a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	220b      	movs	r2, #11
 8004232:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                    _Ongrab=_Ongrab+1;
 8004236:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800423a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8004244:	3301      	adds	r3, #1
 8004246:	b2da      	uxtb	r2, r3
 8004248:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800424c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                }
                if(_Ongrab==_OngrabTo ){
 8004256:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800425a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f893 2879 	ldrb.w	r2, [r3, #2169]	; 0x879
 8004264:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004268:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f893 387a 	ldrb.w	r3, [r3, #2170]	; 0x87a
 8004272:	429a      	cmp	r2, r3
 8004274:	f040 86f3 	bne.w	800505e <_ZN5Xicro9Spin_nodeEv+0x3612>
                    _state=222; // check main continue or stop
 8004278:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800427c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	22de      	movs	r2, #222	; 0xde
 8004284:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }

                break;
 8004288:	f000 bee9 	b.w	800505e <_ZN5Xicro9Spin_nodeEv+0x3612>
            case 90:
                if(_datain[0]==126){
 800428c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004290:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 800429a:	2b7e      	cmp	r3, #126	; 0x7e
 800429c:	d109      	bne.n	80042b2 <_ZN5Xicro9Spin_nodeEv+0x2866>
                    _state=111;  //checksum
 800429e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80042a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	226f      	movs	r2, #111	; 0x6f
 80042aa:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                        
                }else{
                    _state=0;
                }
            
                break;
 80042ae:	f000 bed7 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 80042b2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80042b6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2200      	movs	r2, #0
 80042be:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 80042c2:	f000 becd 	b.w	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 111:
                // _serial->write(_crcIn);
                if(_crcIn==_datain[0]){
 80042c6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80042ca:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f893 226c 	ldrb.w	r2, [r3, #620]	; 0x26c
 80042d4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80042d8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 80042e2:	429a      	cmp	r2, r3
 80042e4:	f040 8577 	bne.w	8004dd6 <_ZN5Xicro9Spin_nodeEv+0x338a>
                    for (int i=0;i<_Totalvar[_OnTopic];i++){
 80042e8:	2300      	movs	r3, #0
 80042ea:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 80042ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80042f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80042fc:	461a      	mov	r2, r3
 80042fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004302:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4413      	add	r3, r2
 800430a:	f893 371d 	ldrb.w	r3, [r3, #1821]	; 0x71d
 800430e:	461a      	mov	r2, r3
 8004310:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004314:	4293      	cmp	r3, r2
 8004316:	f280 855e 	bge.w	8004dd6 <_ZN5Xicro9Spin_nodeEv+0x338a>
                        for(int k=0;k<_Nofdata[_OnTopic][i];k++){
 800431a:	2300      	movs	r3, #0
 800431c:	f8c7 3af8 	str.w	r3, [r7, #2808]	; 0xaf8
 8004320:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004324:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800432e:	4619      	mov	r1, r3
 8004330:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004334:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004338:	681a      	ldr	r2, [r3, #0]
 800433a:	010b      	lsls	r3, r1, #4
 800433c:	441a      	add	r2, r3
 800433e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004342:	4413      	add	r3, r2
 8004344:	f203 731e 	addw	r3, r3, #1822	; 0x71e
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	461a      	mov	r2, r3
 800434c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004350:	4293      	cmp	r3, r2
 8004352:	f280 8539 	bge.w	8004dc8 <_ZN5Xicro9Spin_nodeEv+0x337c>
                            if(_TopicType[_OnTopic][i]== 8 || _TopicType[_OnTopic][i]== 9 ){
 8004356:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800435a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004364:	4619      	mov	r1, r3
 8004366:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800436a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	010b      	lsls	r3, r1, #4
 8004372:	441a      	add	r2, r3
 8004374:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004378:	4413      	add	r3, r2
 800437a:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	2b08      	cmp	r3, #8
 8004382:	d016      	beq.n	80043b2 <_ZN5Xicro9Spin_nodeEv+0x2966>
 8004384:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004388:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004392:	4619      	mov	r1, r3
 8004394:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004398:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	010b      	lsls	r3, r1, #4
 80043a0:	441a      	add	r2, r3
 80043a2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80043a6:	4413      	add	r3, r2
 80043a8:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 80043ac:	781b      	ldrb	r3, [r3, #0]
 80043ae:	2b09      	cmp	r3, #9
 80043b0:	d140      	bne.n	8004434 <_ZN5Xicro9Spin_nodeEv+0x29e8>
                                *(uint8_t*)_verify[_OnTopic][i][k]=*(uint8_t*)_nonverify[_OnTopic][i][k];
 80043b2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80043b6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80043c0:	4618      	mov	r0, r3
 80043c2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80043c6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80043ca:	6819      	ldr	r1, [r3, #0]
 80043cc:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80043d0:	461a      	mov	r2, r3
 80043d2:	00d2      	lsls	r2, r2, #3
 80043d4:	441a      	add	r2, r3
 80043d6:	4603      	mov	r3, r0
 80043d8:	00db      	lsls	r3, r3, #3
 80043da:	4403      	add	r3, r0
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	441a      	add	r2, r3
 80043e0:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80043e4:	4413      	add	r3, r2
 80043e6:	33a2      	adds	r3, #162	; 0xa2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	440b      	add	r3, r1
 80043ec:	6859      	ldr	r1, [r3, #4]
 80043ee:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80043f2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80043fc:	461c      	mov	r4, r3
 80043fe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004402:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004406:	6818      	ldr	r0, [r3, #0]
 8004408:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800440c:	461a      	mov	r2, r3
 800440e:	00d2      	lsls	r2, r2, #3
 8004410:	441a      	add	r2, r3
 8004412:	4623      	mov	r3, r4
 8004414:	00db      	lsls	r3, r3, #3
 8004416:	4423      	add	r3, r4
 8004418:	011b      	lsls	r3, r3, #4
 800441a:	441a      	add	r2, r3
 800441c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004420:	4413      	add	r3, r2
 8004422:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	4403      	add	r3, r0
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	780a      	ldrb	r2, [r1, #0]
 800442e:	701a      	strb	r2, [r3, #0]
 8004430:	f000 bcc3 	b.w	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if ( _TopicType[_OnTopic][i]== 88 || _TopicType[_OnTopic][i]== 89){
 8004434:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004438:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004442:	4619      	mov	r1, r3
 8004444:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004448:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	010b      	lsls	r3, r1, #4
 8004450:	441a      	add	r2, r3
 8004452:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004456:	4413      	add	r3, r2
 8004458:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	2b58      	cmp	r3, #88	; 0x58
 8004460:	d016      	beq.n	8004490 <_ZN5Xicro9Spin_nodeEv+0x2a44>
 8004462:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004466:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004470:	4619      	mov	r1, r3
 8004472:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004476:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	010b      	lsls	r3, r1, #4
 800447e:	441a      	add	r2, r3
 8004480:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004484:	4413      	add	r3, r2
 8004486:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 800448a:	781b      	ldrb	r3, [r3, #0]
 800448c:	2b59      	cmp	r3, #89	; 0x59
 800448e:	d140      	bne.n	8004512 <_ZN5Xicro9Spin_nodeEv+0x2ac6>
                                *(bool*)_verify[_OnTopic][i][k]=*(bool*)_nonverify[_OnTopic][i][k];
 8004490:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004494:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800449e:	4618      	mov	r0, r3
 80044a0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80044a4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80044a8:	6819      	ldr	r1, [r3, #0]
 80044aa:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80044ae:	461a      	mov	r2, r3
 80044b0:	00d2      	lsls	r2, r2, #3
 80044b2:	441a      	add	r2, r3
 80044b4:	4603      	mov	r3, r0
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4403      	add	r3, r0
 80044ba:	011b      	lsls	r3, r3, #4
 80044bc:	441a      	add	r2, r3
 80044be:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80044c2:	4413      	add	r3, r2
 80044c4:	33a2      	adds	r3, #162	; 0xa2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	6859      	ldr	r1, [r3, #4]
 80044cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80044d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80044da:	461c      	mov	r4, r3
 80044dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80044e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80044e4:	6818      	ldr	r0, [r3, #0]
 80044e6:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80044ea:	461a      	mov	r2, r3
 80044ec:	00d2      	lsls	r2, r2, #3
 80044ee:	441a      	add	r2, r3
 80044f0:	4623      	mov	r3, r4
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	4423      	add	r3, r4
 80044f6:	011b      	lsls	r3, r3, #4
 80044f8:	441a      	add	r2, r3
 80044fa:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80044fe:	4413      	add	r3, r2
 8004500:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	4403      	add	r3, r0
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	780a      	ldrb	r2, [r1, #0]
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	f000 bc54 	b.w	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 18 || _TopicType[_OnTopic][i]== 19){
 8004512:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004516:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004520:	4619      	mov	r1, r3
 8004522:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004526:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	010b      	lsls	r3, r1, #4
 800452e:	441a      	add	r2, r3
 8004530:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004534:	4413      	add	r3, r2
 8004536:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 800453a:	781b      	ldrb	r3, [r3, #0]
 800453c:	2b12      	cmp	r3, #18
 800453e:	d016      	beq.n	800456e <_ZN5Xicro9Spin_nodeEv+0x2b22>
 8004540:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004544:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800454e:	4619      	mov	r1, r3
 8004550:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004554:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004558:	681a      	ldr	r2, [r3, #0]
 800455a:	010b      	lsls	r3, r1, #4
 800455c:	441a      	add	r2, r3
 800455e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004562:	4413      	add	r3, r2
 8004564:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b13      	cmp	r3, #19
 800456c:	d140      	bne.n	80045f0 <_ZN5Xicro9Spin_nodeEv+0x2ba4>
                                *(int8_t*)_verify[_OnTopic][i][k]=*(int8_t*)_nonverify[_OnTopic][i][k];
 800456e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004572:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800457c:	4618      	mov	r0, r3
 800457e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004582:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004586:	6819      	ldr	r1, [r3, #0]
 8004588:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800458c:	461a      	mov	r2, r3
 800458e:	00d2      	lsls	r2, r2, #3
 8004590:	441a      	add	r2, r3
 8004592:	4603      	mov	r3, r0
 8004594:	00db      	lsls	r3, r3, #3
 8004596:	4403      	add	r3, r0
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	441a      	add	r2, r3
 800459c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80045a0:	4413      	add	r3, r2
 80045a2:	33a2      	adds	r3, #162	; 0xa2
 80045a4:	009b      	lsls	r3, r3, #2
 80045a6:	440b      	add	r3, r1
 80045a8:	6859      	ldr	r1, [r3, #4]
 80045aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80045ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80045b8:	461c      	mov	r4, r3
 80045ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80045be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80045c2:	6818      	ldr	r0, [r3, #0]
 80045c4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80045c8:	461a      	mov	r2, r3
 80045ca:	00d2      	lsls	r2, r2, #3
 80045cc:	441a      	add	r2, r3
 80045ce:	4623      	mov	r3, r4
 80045d0:	00db      	lsls	r3, r3, #3
 80045d2:	4423      	add	r3, r4
 80045d4:	011b      	lsls	r3, r3, #4
 80045d6:	441a      	add	r2, r3
 80045d8:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80045dc:	4413      	add	r3, r2
 80045de:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4403      	add	r3, r0
 80045e6:	685b      	ldr	r3, [r3, #4]
 80045e8:	f991 2000 	ldrsb.w	r2, [r1]
 80045ec:	701a      	strb	r2, [r3, #0]
 80045ee:	e3e4      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 16 || _TopicType[_OnTopic][i]== 17){
 80045f0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80045f4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80045fe:	4619      	mov	r1, r3
 8004600:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004604:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	010b      	lsls	r3, r1, #4
 800460c:	441a      	add	r2, r3
 800460e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004612:	4413      	add	r3, r2
 8004614:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	2b10      	cmp	r3, #16
 800461c:	d016      	beq.n	800464c <_ZN5Xicro9Spin_nodeEv+0x2c00>
 800461e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004622:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800462c:	4619      	mov	r1, r3
 800462e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004632:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	010b      	lsls	r3, r1, #4
 800463a:	441a      	add	r2, r3
 800463c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004640:	4413      	add	r3, r2
 8004642:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004646:	781b      	ldrb	r3, [r3, #0]
 8004648:	2b11      	cmp	r3, #17
 800464a:	d13f      	bne.n	80046cc <_ZN5Xicro9Spin_nodeEv+0x2c80>
                                *(uint16_t*)_verify[_OnTopic][i][k]=*(uint16_t*)_nonverify[_OnTopic][i][k];
 800464c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004650:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800465a:	4618      	mov	r0, r3
 800465c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004660:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004664:	6819      	ldr	r1, [r3, #0]
 8004666:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800466a:	461a      	mov	r2, r3
 800466c:	00d2      	lsls	r2, r2, #3
 800466e:	441a      	add	r2, r3
 8004670:	4603      	mov	r3, r0
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4403      	add	r3, r0
 8004676:	011b      	lsls	r3, r3, #4
 8004678:	441a      	add	r2, r3
 800467a:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800467e:	4413      	add	r3, r2
 8004680:	33a2      	adds	r3, #162	; 0xa2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	6859      	ldr	r1, [r3, #4]
 8004688:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800468c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004696:	461c      	mov	r4, r3
 8004698:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800469c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80046a6:	461a      	mov	r2, r3
 80046a8:	00d2      	lsls	r2, r2, #3
 80046aa:	441a      	add	r2, r3
 80046ac:	4623      	mov	r3, r4
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4423      	add	r3, r4
 80046b2:	011b      	lsls	r3, r3, #4
 80046b4:	441a      	add	r2, r3
 80046b6:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80046ba:	4413      	add	r3, r2
 80046bc:	f503 7399 	add.w	r3, r3, #306	; 0x132
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4403      	add	r3, r0
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	880a      	ldrh	r2, [r1, #0]
 80046c8:	801a      	strh	r2, [r3, #0]
 80046ca:	e376      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 116 || _TopicType[_OnTopic][i]== 117){
 80046cc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80046d0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80046da:	4619      	mov	r1, r3
 80046dc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80046e0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	010b      	lsls	r3, r1, #4
 80046e8:	441a      	add	r2, r3
 80046ea:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80046ee:	4413      	add	r3, r2
 80046f0:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 80046f4:	781b      	ldrb	r3, [r3, #0]
 80046f6:	2b74      	cmp	r3, #116	; 0x74
 80046f8:	d016      	beq.n	8004728 <_ZN5Xicro9Spin_nodeEv+0x2cdc>
 80046fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80046fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004708:	4619      	mov	r1, r3
 800470a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800470e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	010b      	lsls	r3, r1, #4
 8004716:	441a      	add	r2, r3
 8004718:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800471c:	4413      	add	r3, r2
 800471e:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004722:	781b      	ldrb	r3, [r3, #0]
 8004724:	2b75      	cmp	r3, #117	; 0x75
 8004726:	d140      	bne.n	80047aa <_ZN5Xicro9Spin_nodeEv+0x2d5e>
                                *(int16_t*)_verify[_OnTopic][i][k]=*(int16_t*)_nonverify[_OnTopic][i][k];
 8004728:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800472c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004736:	4618      	mov	r0, r3
 8004738:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800473c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004740:	6819      	ldr	r1, [r3, #0]
 8004742:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004746:	461a      	mov	r2, r3
 8004748:	00d2      	lsls	r2, r2, #3
 800474a:	441a      	add	r2, r3
 800474c:	4603      	mov	r3, r0
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4403      	add	r3, r0
 8004752:	011b      	lsls	r3, r3, #4
 8004754:	441a      	add	r2, r3
 8004756:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 800475a:	4413      	add	r3, r2
 800475c:	33a2      	adds	r3, #162	; 0xa2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	6859      	ldr	r1, [r3, #4]
 8004764:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004768:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004772:	461c      	mov	r4, r3
 8004774:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004778:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800477c:	6818      	ldr	r0, [r3, #0]
 800477e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004782:	461a      	mov	r2, r3
 8004784:	00d2      	lsls	r2, r2, #3
 8004786:	441a      	add	r2, r3
 8004788:	4623      	mov	r3, r4
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	4423      	add	r3, r4
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	441a      	add	r2, r3
 8004792:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004796:	4413      	add	r3, r2
 8004798:	f503 7399 	add.w	r3, r3, #306	; 0x132
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	4403      	add	r3, r0
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f9b1 2000 	ldrsh.w	r2, [r1]
 80047a6:	801a      	strh	r2, [r3, #0]
 80047a8:	e307      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 32 || _TopicType[_OnTopic][i]== 33 ){
 80047aa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80047ae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80047b8:	4619      	mov	r1, r3
 80047ba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80047be:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80047c2:	681a      	ldr	r2, [r3, #0]
 80047c4:	010b      	lsls	r3, r1, #4
 80047c6:	441a      	add	r2, r3
 80047c8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80047cc:	4413      	add	r3, r2
 80047ce:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b20      	cmp	r3, #32
 80047d6:	d016      	beq.n	8004806 <_ZN5Xicro9Spin_nodeEv+0x2dba>
 80047d8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80047dc:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80047e6:	4619      	mov	r1, r3
 80047e8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80047ec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80047f0:	681a      	ldr	r2, [r3, #0]
 80047f2:	010b      	lsls	r3, r1, #4
 80047f4:	441a      	add	r2, r3
 80047f6:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80047fa:	4413      	add	r3, r2
 80047fc:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b21      	cmp	r3, #33	; 0x21
 8004804:	d13f      	bne.n	8004886 <_ZN5Xicro9Spin_nodeEv+0x2e3a>
                                *(uint32_t*)_verify[_OnTopic][i][k]=*(uint32_t*)_nonverify[_OnTopic][i][k];
 8004806:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800480a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004814:	4618      	mov	r0, r3
 8004816:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800481a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800481e:	6819      	ldr	r1, [r3, #0]
 8004820:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004824:	461a      	mov	r2, r3
 8004826:	00d2      	lsls	r2, r2, #3
 8004828:	441a      	add	r2, r3
 800482a:	4603      	mov	r3, r0
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	4403      	add	r3, r0
 8004830:	011b      	lsls	r3, r3, #4
 8004832:	441a      	add	r2, r3
 8004834:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004838:	4413      	add	r3, r2
 800483a:	33a2      	adds	r3, #162	; 0xa2
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	440b      	add	r3, r1
 8004840:	6859      	ldr	r1, [r3, #4]
 8004842:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004846:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004850:	461c      	mov	r4, r3
 8004852:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004856:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800485a:	6818      	ldr	r0, [r3, #0]
 800485c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004860:	461a      	mov	r2, r3
 8004862:	00d2      	lsls	r2, r2, #3
 8004864:	441a      	add	r2, r3
 8004866:	4623      	mov	r3, r4
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	4423      	add	r3, r4
 800486c:	011b      	lsls	r3, r3, #4
 800486e:	441a      	add	r2, r3
 8004870:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004874:	4413      	add	r3, r2
 8004876:	f503 7399 	add.w	r3, r3, #306	; 0x132
 800487a:	009b      	lsls	r3, r3, #2
 800487c:	4403      	add	r3, r0
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	680a      	ldr	r2, [r1, #0]
 8004882:	601a      	str	r2, [r3, #0]
 8004884:	e299      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 132 || _TopicType[_OnTopic][i]== 133 ){
 8004886:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800488a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004894:	4619      	mov	r1, r3
 8004896:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800489a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	010b      	lsls	r3, r1, #4
 80048a2:	441a      	add	r2, r3
 80048a4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80048a8:	4413      	add	r3, r2
 80048aa:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 80048ae:	781b      	ldrb	r3, [r3, #0]
 80048b0:	2b84      	cmp	r3, #132	; 0x84
 80048b2:	d016      	beq.n	80048e2 <_ZN5Xicro9Spin_nodeEv+0x2e96>
 80048b4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80048b8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80048c2:	4619      	mov	r1, r3
 80048c4:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80048c8:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	010b      	lsls	r3, r1, #4
 80048d0:	441a      	add	r2, r3
 80048d2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80048d6:	4413      	add	r3, r2
 80048d8:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 80048dc:	781b      	ldrb	r3, [r3, #0]
 80048de:	2b85      	cmp	r3, #133	; 0x85
 80048e0:	d13f      	bne.n	8004962 <_ZN5Xicro9Spin_nodeEv+0x2f16>
                                *(int32_t*)_verify[_OnTopic][i][k]=*(int32_t*)_nonverify[_OnTopic][i][k];
 80048e2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80048e6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80048f0:	4618      	mov	r0, r3
 80048f2:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80048f6:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80048fa:	6819      	ldr	r1, [r3, #0]
 80048fc:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004900:	461a      	mov	r2, r3
 8004902:	00d2      	lsls	r2, r2, #3
 8004904:	441a      	add	r2, r3
 8004906:	4603      	mov	r3, r0
 8004908:	00db      	lsls	r3, r3, #3
 800490a:	4403      	add	r3, r0
 800490c:	011b      	lsls	r3, r3, #4
 800490e:	441a      	add	r2, r3
 8004910:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004914:	4413      	add	r3, r2
 8004916:	33a2      	adds	r3, #162	; 0xa2
 8004918:	009b      	lsls	r3, r3, #2
 800491a:	440b      	add	r3, r1
 800491c:	6859      	ldr	r1, [r3, #4]
 800491e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004922:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800492c:	461c      	mov	r4, r3
 800492e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004932:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004936:	6818      	ldr	r0, [r3, #0]
 8004938:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 800493c:	461a      	mov	r2, r3
 800493e:	00d2      	lsls	r2, r2, #3
 8004940:	441a      	add	r2, r3
 8004942:	4623      	mov	r3, r4
 8004944:	00db      	lsls	r3, r3, #3
 8004946:	4423      	add	r3, r4
 8004948:	011b      	lsls	r3, r3, #4
 800494a:	441a      	add	r2, r3
 800494c:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004950:	4413      	add	r3, r2
 8004952:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	4403      	add	r3, r0
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	680a      	ldr	r2, [r1, #0]
 800495e:	601a      	str	r2, [r3, #0]
 8004960:	e22b      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 64 || _TopicType[_OnTopic][i]== 65 ){
 8004962:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004966:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004970:	4619      	mov	r1, r3
 8004972:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004976:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800497a:	681a      	ldr	r2, [r3, #0]
 800497c:	010b      	lsls	r3, r1, #4
 800497e:	441a      	add	r2, r3
 8004980:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004984:	4413      	add	r3, r2
 8004986:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b40      	cmp	r3, #64	; 0x40
 800498e:	d016      	beq.n	80049be <_ZN5Xicro9Spin_nodeEv+0x2f72>
 8004990:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004994:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 800499e:	4619      	mov	r1, r3
 80049a0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80049a4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	010b      	lsls	r3, r1, #4
 80049ac:	441a      	add	r2, r3
 80049ae:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80049b2:	4413      	add	r3, r2
 80049b4:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 80049b8:	781b      	ldrb	r3, [r3, #0]
 80049ba:	2b41      	cmp	r3, #65	; 0x41
 80049bc:	d141      	bne.n	8004a42 <_ZN5Xicro9Spin_nodeEv+0x2ff6>
                                *(uint64_t*)_verify[_OnTopic][i][k]=*(uint64_t*)_nonverify[_OnTopic][i][k];
 80049be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80049c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 80049cc:	4618      	mov	r0, r3
 80049ce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80049d2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80049d6:	6819      	ldr	r1, [r3, #0]
 80049d8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 80049dc:	461a      	mov	r2, r3
 80049de:	00d2      	lsls	r2, r2, #3
 80049e0:	441a      	add	r2, r3
 80049e2:	4603      	mov	r3, r0
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	4403      	add	r3, r0
 80049e8:	011b      	lsls	r3, r3, #4
 80049ea:	441a      	add	r2, r3
 80049ec:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 80049f0:	4413      	add	r3, r2
 80049f2:	33a2      	adds	r3, #162	; 0xa2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	6858      	ldr	r0, [r3, #4]
 80049fa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80049fe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004a08:	461c      	mov	r4, r3
 8004a0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004a0e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004a12:	6819      	ldr	r1, [r3, #0]
 8004a14:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004a18:	461a      	mov	r2, r3
 8004a1a:	00d2      	lsls	r2, r2, #3
 8004a1c:	441a      	add	r2, r3
 8004a1e:	4623      	mov	r3, r4
 8004a20:	00db      	lsls	r3, r3, #3
 8004a22:	4423      	add	r3, r4
 8004a24:	011b      	lsls	r3, r3, #4
 8004a26:	441a      	add	r2, r3
 8004a28:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004a32:	009b      	lsls	r3, r3, #2
 8004a34:	440b      	add	r3, r1
 8004a36:	6859      	ldr	r1, [r3, #4]
 8004a38:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004a3c:	e9c1 2300 	strd	r2, r3, [r1]
 8004a40:	e1bb      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 164 || _TopicType[_OnTopic][i]== 165 ){
 8004a42:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004a46:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004a50:	4619      	mov	r1, r3
 8004a52:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004a56:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	010b      	lsls	r3, r1, #4
 8004a5e:	441a      	add	r2, r3
 8004a60:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004a64:	4413      	add	r3, r2
 8004a66:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	2ba4      	cmp	r3, #164	; 0xa4
 8004a6e:	d016      	beq.n	8004a9e <_ZN5Xicro9Spin_nodeEv+0x3052>
 8004a70:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004a74:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004a7e:	4619      	mov	r1, r3
 8004a80:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004a84:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	010b      	lsls	r3, r1, #4
 8004a8c:	441a      	add	r2, r3
 8004a8e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004a92:	4413      	add	r3, r2
 8004a94:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	2ba5      	cmp	r3, #165	; 0xa5
 8004a9c:	d141      	bne.n	8004b22 <_ZN5Xicro9Spin_nodeEv+0x30d6>
                                *(int64_t*)_verify[_OnTopic][i][k]=*(int64_t*)_nonverify[_OnTopic][i][k];
 8004a9e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004aa2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004aac:	4618      	mov	r0, r3
 8004aae:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004ab2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004ab6:	6819      	ldr	r1, [r3, #0]
 8004ab8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004abc:	461a      	mov	r2, r3
 8004abe:	00d2      	lsls	r2, r2, #3
 8004ac0:	441a      	add	r2, r3
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	00db      	lsls	r3, r3, #3
 8004ac6:	4403      	add	r3, r0
 8004ac8:	011b      	lsls	r3, r3, #4
 8004aca:	441a      	add	r2, r3
 8004acc:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004ad0:	4413      	add	r3, r2
 8004ad2:	33a2      	adds	r3, #162	; 0xa2
 8004ad4:	009b      	lsls	r3, r3, #2
 8004ad6:	440b      	add	r3, r1
 8004ad8:	6858      	ldr	r0, [r3, #4]
 8004ada:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004ade:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004ae8:	461c      	mov	r4, r3
 8004aea:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004aee:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004af2:	6819      	ldr	r1, [r3, #0]
 8004af4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004af8:	461a      	mov	r2, r3
 8004afa:	00d2      	lsls	r2, r2, #3
 8004afc:	441a      	add	r2, r3
 8004afe:	4623      	mov	r3, r4
 8004b00:	00db      	lsls	r3, r3, #3
 8004b02:	4423      	add	r3, r4
 8004b04:	011b      	lsls	r3, r3, #4
 8004b06:	441a      	add	r2, r3
 8004b08:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004b0c:	4413      	add	r3, r2
 8004b0e:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	440b      	add	r3, r1
 8004b16:	6859      	ldr	r1, [r3, #4]
 8004b18:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004b1c:	e9c1 2300 	strd	r2, r3, [r1]
 8004b20:	e14b      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 111 || _TopicType[_OnTopic][i]== 112){
 8004b22:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004b26:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004b30:	4619      	mov	r1, r3
 8004b32:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004b36:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	010b      	lsls	r3, r1, #4
 8004b3e:	441a      	add	r2, r3
 8004b40:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004b44:	4413      	add	r3, r2
 8004b46:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	2b6f      	cmp	r3, #111	; 0x6f
 8004b4e:	d016      	beq.n	8004b7e <_ZN5Xicro9Spin_nodeEv+0x3132>
 8004b50:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004b54:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004b5e:	4619      	mov	r1, r3
 8004b60:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004b64:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	010b      	lsls	r3, r1, #4
 8004b6c:	441a      	add	r2, r3
 8004b6e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004b72:	4413      	add	r3, r2
 8004b74:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004b78:	781b      	ldrb	r3, [r3, #0]
 8004b7a:	2b70      	cmp	r3, #112	; 0x70
 8004b7c:	d13f      	bne.n	8004bfe <_ZN5Xicro9Spin_nodeEv+0x31b2>
                                *(float*)_verify[_OnTopic][i][k]=*(float*)_nonverify[_OnTopic][i][k];
 8004b7e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004b82:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004b92:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004b96:	6819      	ldr	r1, [r3, #0]
 8004b98:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004b9c:	461a      	mov	r2, r3
 8004b9e:	00d2      	lsls	r2, r2, #3
 8004ba0:	441a      	add	r2, r3
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	00db      	lsls	r3, r3, #3
 8004ba6:	4403      	add	r3, r0
 8004ba8:	011b      	lsls	r3, r3, #4
 8004baa:	441a      	add	r2, r3
 8004bac:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004bb0:	4413      	add	r3, r2
 8004bb2:	33a2      	adds	r3, #162	; 0xa2
 8004bb4:	009b      	lsls	r3, r3, #2
 8004bb6:	440b      	add	r3, r1
 8004bb8:	6859      	ldr	r1, [r3, #4]
 8004bba:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004bbe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004bc8:	461c      	mov	r4, r3
 8004bca:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004bce:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004bd2:	6818      	ldr	r0, [r3, #0]
 8004bd4:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004bd8:	461a      	mov	r2, r3
 8004bda:	00d2      	lsls	r2, r2, #3
 8004bdc:	441a      	add	r2, r3
 8004bde:	4623      	mov	r3, r4
 8004be0:	00db      	lsls	r3, r3, #3
 8004be2:	4423      	add	r3, r4
 8004be4:	011b      	lsls	r3, r3, #4
 8004be6:	441a      	add	r2, r3
 8004be8:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4403      	add	r3, r0
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	680a      	ldr	r2, [r1, #0]
 8004bfa:	601a      	str	r2, [r3, #0]
 8004bfc:	e0dd      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 242 || _TopicType[_OnTopic][i]== 243){
 8004bfe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004c02:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004c12:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	010b      	lsls	r3, r1, #4
 8004c1a:	441a      	add	r2, r3
 8004c1c:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004c20:	4413      	add	r3, r2
 8004c22:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	2bf2      	cmp	r3, #242	; 0xf2
 8004c2a:	d016      	beq.n	8004c5a <_ZN5Xicro9Spin_nodeEv+0x320e>
 8004c2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004c30:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004c3a:	4619      	mov	r1, r3
 8004c3c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004c40:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	010b      	lsls	r3, r1, #4
 8004c48:	441a      	add	r2, r3
 8004c4a:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004c4e:	4413      	add	r3, r2
 8004c50:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	2bf3      	cmp	r3, #243	; 0xf3
 8004c58:	d140      	bne.n	8004cdc <_ZN5Xicro9Spin_nodeEv+0x3290>
                                *(std::string*)_verify[_OnTopic][i][k]=*(std::string*)_nonverify[_OnTopic][i][k];
 8004c5a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004c5e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004c6e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004c72:	6819      	ldr	r1, [r3, #0]
 8004c74:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004c78:	461a      	mov	r2, r3
 8004c7a:	00d2      	lsls	r2, r2, #3
 8004c7c:	441a      	add	r2, r3
 8004c7e:	4603      	mov	r3, r0
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4403      	add	r3, r0
 8004c84:	011b      	lsls	r3, r3, #4
 8004c86:	441a      	add	r2, r3
 8004c88:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004c8c:	4413      	add	r3, r2
 8004c8e:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004c92:	009b      	lsls	r3, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	6858      	ldr	r0, [r3, #4]
 8004c98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004c9c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004ca6:	461c      	mov	r4, r3
 8004ca8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004cac:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004cb0:	6819      	ldr	r1, [r3, #0]
 8004cb2:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004cb6:	461a      	mov	r2, r3
 8004cb8:	00d2      	lsls	r2, r2, #3
 8004cba:	441a      	add	r2, r3
 8004cbc:	4623      	mov	r3, r4
 8004cbe:	00db      	lsls	r3, r3, #3
 8004cc0:	4423      	add	r3, r4
 8004cc2:	011b      	lsls	r3, r3, #4
 8004cc4:	441a      	add	r2, r3
 8004cc6:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004cca:	4413      	add	r3, r2
 8004ccc:	33a2      	adds	r3, #162	; 0xa2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	685b      	ldr	r3, [r3, #4]
 8004cd4:	4619      	mov	r1, r3
 8004cd6:	f00c fac4 	bl	8011262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>
 8004cda:	e06e      	b.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                            }else if (_TopicType[_OnTopic][i]== 222 || _TopicType[_OnTopic][i]== 223){
 8004cdc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004ce0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004cea:	4619      	mov	r1, r3
 8004cec:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004cf0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	010b      	lsls	r3, r1, #4
 8004cf8:	441a      	add	r2, r3
 8004cfa:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004cfe:	4413      	add	r3, r2
 8004d00:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	2bde      	cmp	r3, #222	; 0xde
 8004d08:	d016      	beq.n	8004d38 <_ZN5Xicro9Spin_nodeEv+0x32ec>
 8004d0a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004d0e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004d18:	4619      	mov	r1, r3
 8004d1a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004d1e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	010b      	lsls	r3, r1, #4
 8004d26:	441a      	add	r2, r3
 8004d28:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f203 730d 	addw	r3, r3, #1805	; 0x70d
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2bdf      	cmp	r3, #223	; 0xdf
 8004d36:	d140      	bne.n	8004dba <_ZN5Xicro9Spin_nodeEv+0x336e>
                                *(double*)_verify[_OnTopic][i][k]=*(double*)_nonverify[_OnTopic][i][k];
 8004d38:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004d3c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004d46:	4618      	mov	r0, r3
 8004d48:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004d4c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004d50:	6819      	ldr	r1, [r3, #0]
 8004d52:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004d56:	461a      	mov	r2, r3
 8004d58:	00d2      	lsls	r2, r2, #3
 8004d5a:	441a      	add	r2, r3
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4403      	add	r3, r0
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	441a      	add	r2, r3
 8004d66:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004d6a:	4413      	add	r3, r2
 8004d6c:	33a2      	adds	r3, #162	; 0xa2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	6858      	ldr	r0, [r3, #4]
 8004d74:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004d78:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004d82:	461c      	mov	r4, r3
 8004d84:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004d88:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004d8c:	6819      	ldr	r1, [r3, #0]
 8004d8e:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004d92:	461a      	mov	r2, r3
 8004d94:	00d2      	lsls	r2, r2, #3
 8004d96:	441a      	add	r2, r3
 8004d98:	4623      	mov	r3, r4
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	4423      	add	r3, r4
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	441a      	add	r2, r3
 8004da2:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 7399 	add.w	r3, r3, #306	; 0x132
 8004dac:	009b      	lsls	r3, r3, #2
 8004dae:	440b      	add	r3, r1
 8004db0:	6859      	ldr	r1, [r3, #4]
 8004db2:	e9d0 2300 	ldrd	r2, r3, [r0]
 8004db6:	e9c1 2300 	strd	r2, r3, [r1]
                        for(int k=0;k<_Nofdata[_OnTopic][i];k++){
 8004dba:	f8d7 3af8 	ldr.w	r3, [r7, #2808]	; 0xaf8
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	f8c7 3af8 	str.w	r3, [r7, #2808]	; 0xaf8
 8004dc4:	f7ff baac 	b.w	8004320 <_ZN5Xicro9Spin_nodeEv+0x28d4>
                    for (int i=0;i<_Totalvar[_OnTopic];i++){
 8004dc8:	f8d7 3afc 	ldr.w	r3, [r7, #2812]	; 0xafc
 8004dcc:	3301      	adds	r3, #1
 8004dce:	f8c7 3afc 	str.w	r3, [r7, #2812]	; 0xafc
 8004dd2:	f7ff ba8c 	b.w	80042ee <_ZN5Xicro9Spin_nodeEv+0x28a2>
                       
                        

                    }
                }
                _state=0;
 8004dd6:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004dda:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	2200      	movs	r2, #0
 8004de2:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8004de6:	e13b      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 99: //string

                if(_datain[0]==42){
 8004de8:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004dec:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8004df6:	2b2a      	cmp	r3, #42	; 0x2a
 8004df8:	d108      	bne.n	8004e0c <_ZN5Xicro9Spin_nodeEv+0x33c0>
                    _state=100;
 8004dfa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004dfe:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	2264      	movs	r2, #100	; 0x64
 8004e06:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _bufff=_bufff+char(_datain[0]);
                    _state=99;
                }
                break;
 8004e0a:	e129      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _bufff=_bufff+char(_datain[0]);
 8004e0c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e10:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f503 741c 	add.w	r4, r3, #624	; 0x270
 8004e1a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e1e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f503 711c 	add.w	r1, r3, #624	; 0x270
 8004e28:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e2c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f893 225a 	ldrb.w	r2, [r3, #602]	; 0x25a
 8004e36:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f000 f94c 	bl	80050d8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>
 8004e40:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8004e44:	4619      	mov	r1, r3
 8004e46:	4620      	mov	r0, r4
 8004e48:	f00c fa11 	bl	801126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004e4c:	f607 23c8 	addw	r3, r7, #2760	; 0xac8
 8004e50:	4618      	mov	r0, r3
 8004e52:	f00c fa00 	bl	8011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                    _state=99;
 8004e56:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e5a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2263      	movs	r2, #99	; 0x63
 8004e62:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8004e66:	e0fb      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 100:
                if(_datain[0]==126){
 8004e68:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e6c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8004e76:	2b7e      	cmp	r3, #126	; 0x7e
 8004e78:	d173      	bne.n	8004f62 <_ZN5Xicro9Spin_nodeEv+0x3516>
                    *(std::string*)_nonverify[_OnTopic][_Indexdata][_Ongrab] =   (std::string)_bufff;
 8004e7a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e7e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f993 3269 	ldrsb.w	r3, [r3, #617]	; 0x269
 8004e88:	4618      	mov	r0, r3
 8004e8a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e8e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f893 326b 	ldrb.w	r3, [r3, #619]	; 0x26b
 8004e98:	461c      	mov	r4, r3
 8004e9a:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004e9e:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8004ea8:	461d      	mov	r5, r3
 8004eaa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004eae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004eb2:	6819      	ldr	r1, [r3, #0]
 8004eb4:	4622      	mov	r2, r4
 8004eb6:	00d2      	lsls	r2, r2, #3
 8004eb8:	4422      	add	r2, r4
 8004eba:	4603      	mov	r3, r0
 8004ebc:	00db      	lsls	r3, r3, #3
 8004ebe:	4403      	add	r3, r0
 8004ec0:	011b      	lsls	r3, r3, #4
 8004ec2:	4413      	add	r3, r2
 8004ec4:	442b      	add	r3, r5
 8004ec6:	33a2      	adds	r3, #162	; 0xa2
 8004ec8:	009b      	lsls	r3, r3, #2
 8004eca:	440b      	add	r3, r1
 8004ecc:	685c      	ldr	r4, [r3, #4]
 8004ece:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004ed2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f503 721c 	add.w	r2, r3, #624	; 0x270
 8004edc:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8004ee0:	4611      	mov	r1, r2
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f00c faf0 	bl	80114c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8004ee8:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8004eec:	4619      	mov	r1, r3
 8004eee:	4620      	mov	r0, r4
 8004ef0:	f00c f9bd 	bl	801126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8004ef4:	f507 632e 	add.w	r3, r7, #2784	; 0xae0
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f00c f9ac 	bl	8011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
                    _Ongrab=_Ongrab+1;
 8004efe:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f02:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f893 3879 	ldrb.w	r3, [r3, #2169]	; 0x879
 8004f0c:	3301      	adds	r3, #1
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f14:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f883 2879 	strb.w	r2, [r3, #2169]	; 0x879
                    if(_Ongrab==_OngrabTo){
 8004f1e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f22:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f893 2879 	ldrb.w	r2, [r3, #2169]	; 0x879
 8004f2c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f30:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f893 387a 	ldrb.w	r3, [r3, #2170]	; 0x87a
 8004f3a:	429a      	cmp	r2, r3
 8004f3c:	d108      	bne.n	8004f50 <_ZN5Xicro9Spin_nodeEv+0x3504>
                        _state=222; // check main continue or stop
 8004f3e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f42:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	22de      	movs	r2, #222	; 0xde
 8004f4a:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                    }
                }else{
                    _state=0;
                }

                break;
 8004f4e:	e087      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                        _state=99;  // get more string
 8004f50:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f54:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	2263      	movs	r2, #99	; 0x63
 8004f5c:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8004f60:	e07e      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8004f62:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f66:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8004f72:	e075      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>

            case 222: // main check continue or stop
                if(_datain[0]==42){
 8004f74:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f78:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8004f82:	2b2a      	cmp	r3, #42	; 0x2a
 8004f84:	d108      	bne.n	8004f98 <_ZN5Xicro9Spin_nodeEv+0x354c>
                    _state=223; // to ckeck confirm continue
 8004f86:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f8a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	22df      	movs	r2, #223	; 0xdf
 8004f92:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else if(_datain[0]==126){
                    _state=225; // to ckeck confirm stop
                }else{
                    _state=0;
                }
                break;
 8004f96:	e063      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                }else if(_datain[0]==126){
 8004f98:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004f9c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8004fa6:	2b7e      	cmp	r3, #126	; 0x7e
 8004fa8:	d108      	bne.n	8004fbc <_ZN5Xicro9Spin_nodeEv+0x3570>
                    _state=225; // to ckeck confirm stop
 8004faa:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004fae:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	22e1      	movs	r2, #225	; 0xe1
 8004fb6:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8004fba:	e051      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8004fbc:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004fc0:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8004fcc:	e048      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
            case 223:
                if(_datain[0]==42){ // continue done
 8004fce:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004fd2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8004fdc:	2b2a      	cmp	r3, #42	; 0x2a
 8004fde:	d118      	bne.n	8005012 <_ZN5Xicro9Spin_nodeEv+0x35c6>
                    _state=6; // check data type 
 8004fe0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004fe4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2206      	movs	r2, #6
 8004fec:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                    _Onindex=_Onindex+1;
 8004ff0:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8004ff4:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f893 3878 	ldrb.w	r3, [r3, #2168]	; 0x878
 8004ffe:	3301      	adds	r3, #1
 8005000:	b2da      	uxtb	r2, r3
 8005002:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005006:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f883 2878 	strb.w	r2, [r3, #2168]	; 0x878
                }else{
                    _state=0;
                }
                break;
 8005010:	e026      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8005012:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005016:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8005022:	e01d      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>

            case 225:
                 if(_datain[0]==126){ // stop done
 8005024:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005028:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f893 325a 	ldrb.w	r3, [r3, #602]	; 0x25a
 8005032:	2b7e      	cmp	r3, #126	; 0x7e
 8005034:	d108      	bne.n	8005048 <_ZN5Xicro9Spin_nodeEv+0x35fc>
                    _state=111; //crc check to Verify data
 8005036:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800503a:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	226f      	movs	r2, #111	; 0x6f
 8005042:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                }else{
                    _state=0;
                }
                break;
 8005046:	e00b      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                    _state=0;
 8005048:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 800504c:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2200      	movs	r2, #0
 8005054:	f883 2259 	strb.w	r2, [r3, #601]	; 0x259
                break;
 8005058:	e002      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                break;
 800505a:	bf00      	nop
 800505c:	e000      	b.n	8005060 <_ZN5Xicro9Spin_nodeEv+0x3614>
                break;
 800505e:	bf00      	nop
        }
        _crcIn=_getcrc(_crcIn,&_datain[0],1); 
 8005060:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005064:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	f893 126c 	ldrb.w	r1, [r3, #620]	; 0x26c
 800506e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005072:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f203 225a 	addw	r2, r3, #602	; 0x25a
 800507c:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005080:	f6a3 3004 	subw	r0, r3, #2820	; 0xb04
 8005084:	2301      	movs	r3, #1
 8005086:	6800      	ldr	r0, [r0, #0]
 8005088:	f7fb fff7 	bl	800107a <_ZN5Xicro7_getcrcEhPht>
 800508c:	4603      	mov	r3, r0
 800508e:	461a      	mov	r2, r3
 8005090:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 8005094:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f883 226c 	strb.w	r2, [r3, #620]	; 0x26c
        _Posdatapre=(_Posdatapre+1)%64;
 800509e:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80050a2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f893 38bd 	ldrb.w	r3, [r3, #2237]	; 0x8bd
 80050ac:	3301      	adds	r3, #1
 80050ae:	425a      	negs	r2, r3
 80050b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80050b4:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80050b8:	bf58      	it	pl
 80050ba:	4253      	negpl	r3, r2
 80050bc:	b2da      	uxtb	r2, r3
 80050be:	f607 3308 	addw	r3, r7, #2824	; 0xb08
 80050c2:	f6a3 3304 	subw	r3, r3, #2820	; 0xb04
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f883 28bd 	strb.w	r2, [r3, #2237]	; 0x8bd
        // tyu[1]=_state;
        // _serial->write(_crcIn);
        // _serial->write(_state);

    }
 80050cc:	bf00      	nop
 80050ce:	f607 370c 	addw	r7, r7, #2828	; 0xb0c
 80050d2:	46bd      	mov	sp, r7
 80050d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080050d8 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EERKS8_S5_>:
   *  @param __rhs  Last string.
   *  @return  New string with @a __lhs followed by @a __rhs.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline basic_string<_CharT, _Traits, _Alloc>
    operator+(const basic_string<_CharT, _Traits, _Alloc>& __lhs, _CharT __rhs)
 80050d8:	b580      	push	{r7, lr}
 80050da:	b084      	sub	sp, #16
 80050dc:	af00      	add	r7, sp, #0
 80050de:	60f8      	str	r0, [r7, #12]
 80050e0:	60b9      	str	r1, [r7, #8]
 80050e2:	4613      	mov	r3, r2
 80050e4:	71fb      	strb	r3, [r7, #7]
    {
      typedef basic_string<_CharT, _Traits, _Alloc>	__string_type;
      typedef typename __string_type::size_type		__size_type;
      __string_type __str(__lhs);
 80050e6:	68b9      	ldr	r1, [r7, #8]
 80050e8:	68f8      	ldr	r0, [r7, #12]
 80050ea:	f00c f9ed 	bl	80114c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
      __str.append(__size_type(1), __rhs);
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	461a      	mov	r2, r3
 80050f2:	2101      	movs	r1, #1
 80050f4:	68f8      	ldr	r0, [r7, #12]
 80050f6:	f00c f927 	bl	8011348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>
      return __str;
 80050fa:	bf00      	nop
    }
 80050fc:	68f8      	ldr	r0, [r7, #12]
 80050fe:	3710      	adds	r7, #16
 8005100:	46bd      	mov	sp, r7
 8005102:	bd80      	pop	{r7, pc}

08005104 <bno055_setPage>:
uint16_t angularRateScale = 16;
uint16_t eulerScale = 16;
uint16_t magScale = 16;
uint16_t quaScale = (1<<14);    // 2^14

void bno055_setPage(uint8_t page) { bno055_writeData(BNO055_PAGE_ID, page); }
 8005104:	b580      	push	{r7, lr}
 8005106:	b082      	sub	sp, #8
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
 800510e:	79fb      	ldrb	r3, [r7, #7]
 8005110:	4619      	mov	r1, r3
 8005112:	2007      	movs	r0, #7
 8005114:	f000 fcfc 	bl	8005b10 <bno055_writeData>
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <bno055_setOperationMode>:
  bno055_opmode_t mode;
  bno055_readData(BNO055_OPR_MODE, &mode, 1);
  return mode;
}

void bno055_setOperationMode(bno055_opmode_t mode) {
 8005120:	b580      	push	{r7, lr}
 8005122:	b082      	sub	sp, #8
 8005124:	af00      	add	r7, sp, #0
 8005126:	4603      	mov	r3, r0
 8005128:	71fb      	strb	r3, [r7, #7]
  bno055_writeData(BNO055_OPR_MODE, mode);
 800512a:	79fb      	ldrb	r3, [r7, #7]
 800512c:	4619      	mov	r1, r3
 800512e:	203d      	movs	r0, #61	; 0x3d
 8005130:	f000 fcee 	bl	8005b10 <bno055_writeData>
  if (mode == BNO055_OPERATION_MODE_CONFIG) {
 8005134:	79fb      	ldrb	r3, [r7, #7]
 8005136:	2b00      	cmp	r3, #0
 8005138:	d103      	bne.n	8005142 <bno055_setOperationMode+0x22>
    bno055_delay(19);
 800513a:	2013      	movs	r0, #19
 800513c:	f000 fcdc 	bl	8005af8 <bno055_delay>
  } else {
    bno055_delay(7);
  }
}
 8005140:	e002      	b.n	8005148 <bno055_setOperationMode+0x28>
    bno055_delay(7);
 8005142:	2007      	movs	r0, #7
 8005144:	f000 fcd8 	bl	8005af8 <bno055_delay>
}
 8005148:	bf00      	nop
 800514a:	3708      	adds	r7, #8
 800514c:	46bd      	mov	sp, r7
 800514e:	bd80      	pop	{r7, pc}

08005150 <bno055_setOperationModeConfig>:

void bno055_setOperationModeConfig() {
 8005150:	b580      	push	{r7, lr}
 8005152:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_CONFIG);
 8005154:	2000      	movs	r0, #0
 8005156:	f7ff ffe3 	bl	8005120 <bno055_setOperationMode>
}
 800515a:	bf00      	nop
 800515c:	bd80      	pop	{r7, pc}

0800515e <bno055_setOperationModeNDOF>:

void bno055_setOperationModeNDOF() {
 800515e:	b580      	push	{r7, lr}
 8005160:	af00      	add	r7, sp, #0
  bno055_setOperationMode(BNO055_OPERATION_MODE_NDOF);
 8005162:	200c      	movs	r0, #12
 8005164:	f7ff ffdc 	bl	8005120 <bno055_setOperationMode>
}
 8005168:	bf00      	nop
 800516a:	bd80      	pop	{r7, pc}

0800516c <bno055_reset>:
}

void bno055_enableExternalCrystal() { bno055_setExternalCrystalUse(true); }
void bno055_disableExternalCrystal() { bno055_setExternalCrystalUse(false); }

void bno055_reset() {
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  bno055_writeData(BNO055_SYS_TRIGGER, 0x20);
 8005170:	2120      	movs	r1, #32
 8005172:	203f      	movs	r0, #63	; 0x3f
 8005174:	f000 fccc 	bl	8005b10 <bno055_writeData>
  bno055_delay(700);
 8005178:	f44f 702f 	mov.w	r0, #700	; 0x2bc
 800517c:	f000 fcbc 	bl	8005af8 <bno055_delay>
}
 8005180:	bf00      	nop
 8005182:	bd80      	pop	{r7, pc}

08005184 <bno055_setup>:
  uint8_t t;
  bno055_readData(BNO055_TEMP, &t, 1);
  return t;
}

void bno055_setup() {
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
  bno055_reset();
 800518a:	f7ff ffef 	bl	800516c <bno055_reset>

  uint8_t id = 0;
 800518e:	2300      	movs	r3, #0
 8005190:	71fb      	strb	r3, [r7, #7]
  bno055_readData(BNO055_CHIP_ID, &id, 1);
 8005192:	1dfb      	adds	r3, r7, #7
 8005194:	2201      	movs	r2, #1
 8005196:	4619      	mov	r1, r3
 8005198:	2000      	movs	r0, #0
 800519a:	f000 fda5 	bl	8005ce8 <bno055_readData>
  if (id != BNO055_ID) {
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	2ba0      	cmp	r3, #160	; 0xa0
 80051a2:	d004      	beq.n	80051ae <bno055_setup+0x2a>
    printf("Can't find BNO055, id: 0x%02x. Please check your wiring.\r\n", id);
 80051a4:	79fb      	ldrb	r3, [r7, #7]
 80051a6:	4619      	mov	r1, r3
 80051a8:	4809      	ldr	r0, [pc, #36]	; (80051d0 <bno055_setup+0x4c>)
 80051aa:	f00c fbc7 	bl	801193c <iprintf>
  }
  bno055_setPage(0);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f7ff ffa8 	bl	8005104 <bno055_setPage>
  bno055_writeData(BNO055_SYS_TRIGGER, 0x0);
 80051b4:	2100      	movs	r1, #0
 80051b6:	203f      	movs	r0, #63	; 0x3f
 80051b8:	f000 fcaa 	bl	8005b10 <bno055_writeData>

  // Select BNO055 config mode
  bno055_setOperationModeConfig();
 80051bc:	f7ff ffc8 	bl	8005150 <bno055_setOperationModeConfig>
  bno055_delay(10);
 80051c0:	200a      	movs	r0, #10
 80051c2:	f000 fc99 	bl	8005af8 <bno055_delay>
}
 80051c6:	bf00      	nop
 80051c8:	3708      	adds	r7, #8
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	0801297c 	.word	0x0801297c

080051d4 <bno055_getVector>:
  }

  bno055_setOperationMode(operationMode);
}

bno055_vector_t bno055_getVector(uint8_t vec) {
 80051d4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051d8:	b09e      	sub	sp, #120	; 0x78
 80051da:	af00      	add	r7, sp, #0
 80051dc:	4603      	mov	r3, r0
 80051de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  bno055_setPage(0);
 80051e2:	2000      	movs	r0, #0
 80051e4:	f7ff ff8e 	bl	8005104 <bno055_setPage>
  uint8_t buffer[8];    // Quaternion need 8 bytes

  if (vec == BNO055_VECTOR_QUATERNION)
 80051e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051ec:	2b20      	cmp	r3, #32
 80051ee:	d108      	bne.n	8005202 <bno055_getVector+0x2e>
    bno055_readData(vec, buffer, 8);
 80051f0:	f107 0148 	add.w	r1, r7, #72	; 0x48
 80051f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051f8:	2208      	movs	r2, #8
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fd74 	bl	8005ce8 <bno055_readData>
 8005200:	e007      	b.n	8005212 <bno055_getVector+0x3e>
  else
    bno055_readData(vec, buffer, 6);
 8005202:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8005206:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800520a:	2206      	movs	r2, #6
 800520c:	4618      	mov	r0, r3
 800520e:	f000 fd6b 	bl	8005ce8 <bno055_readData>

  double scale = 1;
 8005212:	f04f 0200 	mov.w	r2, #0
 8005216:	4b81      	ldr	r3, [pc, #516]	; (800541c <bno055_getVector+0x248>)
 8005218:	e9c7 231c 	strd	r2, r3, [r7, #112]	; 0x70

  if (vec == BNO055_VECTOR_MAGNETOMETER) {
 800521c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005220:	2b0e      	cmp	r3, #14
 8005222:	d108      	bne.n	8005236 <bno055_getVector+0x62>
    scale = magScale;
 8005224:	4b7e      	ldr	r3, [pc, #504]	; (8005420 <bno055_getVector+0x24c>)
 8005226:	881b      	ldrh	r3, [r3, #0]
 8005228:	ee07 3a90 	vmov	s15, r3
 800522c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005230:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8005234:	e03a      	b.n	80052ac <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_ACCELEROMETER ||
 8005236:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800523a:	2b08      	cmp	r3, #8
 800523c:	d007      	beq.n	800524e <bno055_getVector+0x7a>
 800523e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005242:	2b28      	cmp	r3, #40	; 0x28
 8005244:	d003      	beq.n	800524e <bno055_getVector+0x7a>
           vec == BNO055_VECTOR_LINEARACCEL || vec == BNO055_VECTOR_GRAVITY) {
 8005246:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800524a:	2b2e      	cmp	r3, #46	; 0x2e
 800524c:	d108      	bne.n	8005260 <bno055_getVector+0x8c>
    scale = accelScale;
 800524e:	4b75      	ldr	r3, [pc, #468]	; (8005424 <bno055_getVector+0x250>)
 8005250:	881b      	ldrh	r3, [r3, #0]
 8005252:	ee07 3a90 	vmov	s15, r3
 8005256:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800525a:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 800525e:	e025      	b.n	80052ac <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_GYROSCOPE) {
 8005260:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005264:	2b14      	cmp	r3, #20
 8005266:	d108      	bne.n	800527a <bno055_getVector+0xa6>
    scale = angularRateScale;
 8005268:	4b6f      	ldr	r3, [pc, #444]	; (8005428 <bno055_getVector+0x254>)
 800526a:	881b      	ldrh	r3, [r3, #0]
 800526c:	ee07 3a90 	vmov	s15, r3
 8005270:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8005274:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8005278:	e018      	b.n	80052ac <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_EULER) {
 800527a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800527e:	2b1a      	cmp	r3, #26
 8005280:	d108      	bne.n	8005294 <bno055_getVector+0xc0>
    scale = eulerScale;
 8005282:	4b6a      	ldr	r3, [pc, #424]	; (800542c <bno055_getVector+0x258>)
 8005284:	881b      	ldrh	r3, [r3, #0]
 8005286:	ee07 3a90 	vmov	s15, r3
 800528a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800528e:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
 8005292:	e00b      	b.n	80052ac <bno055_getVector+0xd8>
  } else if (vec == BNO055_VECTOR_QUATERNION) {
 8005294:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005298:	2b20      	cmp	r3, #32
 800529a:	d107      	bne.n	80052ac <bno055_getVector+0xd8>
    scale = quaScale;
 800529c:	4b64      	ldr	r3, [pc, #400]	; (8005430 <bno055_getVector+0x25c>)
 800529e:	881b      	ldrh	r3, [r3, #0]
 80052a0:	ee07 3a90 	vmov	s15, r3
 80052a4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80052a8:	ed87 7b1c 	vstr	d7, [r7, #112]	; 0x70
  }

  bno055_vector_t xyz = {.w = 0, .x = 0, .y = 0, .z = 0};
 80052ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052b0:	2220      	movs	r2, #32
 80052b2:	2100      	movs	r1, #0
 80052b4:	4618      	mov	r0, r3
 80052b6:	f00c fa59 	bl	801176c <memset>
  if (vec == BNO055_VECTOR_QUATERNION) {
 80052ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052be:	2b20      	cmp	r3, #32
 80052c0:	d14c      	bne.n	800535c <bno055_getVector+0x188>
    xyz.w = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 80052c2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80052c6:	021b      	lsls	r3, r3, #8
 80052c8:	b21a      	sxth	r2, r3
 80052ca:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80052ce:	b21b      	sxth	r3, r3
 80052d0:	4313      	orrs	r3, r2
 80052d2:	b21b      	sxth	r3, r3
 80052d4:	ee07 3a90 	vmov	s15, r3
 80052d8:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80052dc:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80052e0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80052e4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
    xyz.x = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 80052e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80052ec:	021b      	lsls	r3, r3, #8
 80052ee:	b21a      	sxth	r2, r3
 80052f0:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80052f4:	b21b      	sxth	r3, r3
 80052f6:	4313      	orrs	r3, r2
 80052f8:	b21b      	sxth	r3, r3
 80052fa:	ee07 3a90 	vmov	s15, r3
 80052fe:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005302:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8005306:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800530a:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 800530e:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 8005312:	021b      	lsls	r3, r3, #8
 8005314:	b21a      	sxth	r2, r3
 8005316:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800531a:	b21b      	sxth	r3, r3
 800531c:	4313      	orrs	r3, r2
 800531e:	b21b      	sxth	r3, r3
 8005320:	ee07 3a90 	vmov	s15, r3
 8005324:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005328:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800532c:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005330:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[7] << 8) | buffer[6]) / scale;
 8005334:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005338:	021b      	lsls	r3, r3, #8
 800533a:	b21a      	sxth	r2, r3
 800533c:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8005340:	b21b      	sxth	r3, r3
 8005342:	4313      	orrs	r3, r2
 8005344:	b21b      	sxth	r3, r3
 8005346:	ee07 3a90 	vmov	s15, r3
 800534a:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800534e:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 8005352:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8005356:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
 800535a:	e038      	b.n	80053ce <bno055_getVector+0x1fa>
  } else {
    xyz.x = (int16_t)((buffer[1] << 8) | buffer[0]) / scale;
 800535c:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 8005360:	021b      	lsls	r3, r3, #8
 8005362:	b21a      	sxth	r2, r3
 8005364:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8005368:	b21b      	sxth	r3, r3
 800536a:	4313      	orrs	r3, r2
 800536c:	b21b      	sxth	r3, r3
 800536e:	ee07 3a90 	vmov	s15, r3
 8005372:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8005376:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 800537a:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800537e:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
    xyz.y = (int16_t)((buffer[3] << 8) | buffer[2]) / scale;
 8005382:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005386:	021b      	lsls	r3, r3, #8
 8005388:	b21a      	sxth	r2, r3
 800538a:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 800538e:	b21b      	sxth	r3, r3
 8005390:	4313      	orrs	r3, r2
 8005392:	b21b      	sxth	r3, r3
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800539c:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80053a0:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80053a4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    xyz.z = (int16_t)((buffer[5] << 8) | buffer[4]) / scale;
 80053a8:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80053ac:	021b      	lsls	r3, r3, #8
 80053ae:	b21a      	sxth	r2, r3
 80053b0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 80053b4:	b21b      	sxth	r3, r3
 80053b6:	4313      	orrs	r3, r2
 80053b8:	b21b      	sxth	r3, r3
 80053ba:	ee07 3a90 	vmov	s15, r3
 80053be:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 80053c2:	ed97 6b1c 	vldr	d6, [r7, #112]	; 0x70
 80053c6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80053ca:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
  }

  return xyz;
 80053ce:	f107 0450 	add.w	r4, r7, #80	; 0x50
 80053d2:	f107 0528 	add.w	r5, r7, #40	; 0x28
 80053d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80053d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80053da:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80053de:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80053e2:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 80053e6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	; 0x58
 80053ea:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80053ee:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 80053f2:	ec49 8b14 	vmov	d4, r8, r9
 80053f6:	ec45 4b15 	vmov	d5, r4, r5
 80053fa:	ec41 0b16 	vmov	d6, r0, r1
 80053fe:	ec43 2b17 	vmov	d7, r2, r3
}
 8005402:	eeb0 0b44 	vmov.f64	d0, d4
 8005406:	eeb0 1b45 	vmov.f64	d1, d5
 800540a:	eeb0 2b46 	vmov.f64	d2, d6
 800540e:	eeb0 3b47 	vmov.f64	d3, d7
 8005412:	3778      	adds	r7, #120	; 0x78
 8005414:	46bd      	mov	sp, r7
 8005416:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800541a:	bf00      	nop
 800541c:	3ff00000 	.word	0x3ff00000
 8005420:	2400000e 	.word	0x2400000e
 8005424:	24000008 	.word	0x24000008
 8005428:	2400000a 	.word	0x2400000a
 800542c:	2400000c 	.word	0x2400000c
 8005430:	24000010 	.word	0x24000010

08005434 <bno055_getVectorGyroscope>:
  return bno055_getVector(BNO055_VECTOR_ACCELEROMETER);
}
bno055_vector_t bno055_getVectorMagnetometer() {
  return bno055_getVector(BNO055_VECTOR_MAGNETOMETER);
}
bno055_vector_t bno055_getVectorGyroscope() {
 8005434:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005438:	b090      	sub	sp, #64	; 0x40
 800543a:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_GYROSCOPE);
 800543c:	2014      	movs	r0, #20
 800543e:	f7ff fec9 	bl	80051d4 <bno055_getVector>
 8005442:	eeb0 4b40 	vmov.f64	d4, d0
 8005446:	eeb0 5b41 	vmov.f64	d5, d1
 800544a:	eeb0 6b42 	vmov.f64	d6, d2
 800544e:	eeb0 7b43 	vmov.f64	d7, d3
 8005452:	ed87 4b08 	vstr	d4, [r7, #32]
 8005456:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 800545a:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800545e:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 8005462:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005466:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 800546a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800546e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005472:	ec49 8b14 	vmov	d4, r8, r9
 8005476:	ec45 4b15 	vmov	d5, r4, r5
 800547a:	ec41 0b16 	vmov	d6, r0, r1
 800547e:	ec43 2b17 	vmov	d7, r2, r3
}
 8005482:	eeb0 0b44 	vmov.f64	d0, d4
 8005486:	eeb0 1b45 	vmov.f64	d1, d5
 800548a:	eeb0 2b46 	vmov.f64	d2, d6
 800548e:	eeb0 3b47 	vmov.f64	d3, d7
 8005492:	3740      	adds	r7, #64	; 0x40
 8005494:	46bd      	mov	sp, r7
 8005496:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800549a <bno055_getVectorLinearAccel>:
bno055_vector_t bno055_getVectorEuler() {
  return bno055_getVector(BNO055_VECTOR_EULER);
}
bno055_vector_t bno055_getVectorLinearAccel() {
 800549a:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800549e:	b090      	sub	sp, #64	; 0x40
 80054a0:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_LINEARACCEL);
 80054a2:	2028      	movs	r0, #40	; 0x28
 80054a4:	f7ff fe96 	bl	80051d4 <bno055_getVector>
 80054a8:	eeb0 4b40 	vmov.f64	d4, d0
 80054ac:	eeb0 5b41 	vmov.f64	d5, d1
 80054b0:	eeb0 6b42 	vmov.f64	d6, d2
 80054b4:	eeb0 7b43 	vmov.f64	d7, d3
 80054b8:	ed87 4b08 	vstr	d4, [r7, #32]
 80054bc:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 80054c0:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 80054c4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80054c8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054cc:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80054d0:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80054d4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054d8:	ec49 8b14 	vmov	d4, r8, r9
 80054dc:	ec45 4b15 	vmov	d5, r4, r5
 80054e0:	ec41 0b16 	vmov	d6, r0, r1
 80054e4:	ec43 2b17 	vmov	d7, r2, r3
}
 80054e8:	eeb0 0b44 	vmov.f64	d0, d4
 80054ec:	eeb0 1b45 	vmov.f64	d1, d5
 80054f0:	eeb0 2b46 	vmov.f64	d2, d6
 80054f4:	eeb0 3b47 	vmov.f64	d3, d7
 80054f8:	3740      	adds	r7, #64	; 0x40
 80054fa:	46bd      	mov	sp, r7
 80054fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08005500 <bno055_getVectorQuaternion>:
bno055_vector_t bno055_getVectorGravity() {
  return bno055_getVector(BNO055_VECTOR_GRAVITY);
}
bno055_vector_t bno055_getVectorQuaternion() {
 8005500:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005504:	b090      	sub	sp, #64	; 0x40
 8005506:	af00      	add	r7, sp, #0
  return bno055_getVector(BNO055_VECTOR_QUATERNION);
 8005508:	2020      	movs	r0, #32
 800550a:	f7ff fe63 	bl	80051d4 <bno055_getVector>
 800550e:	eeb0 4b40 	vmov.f64	d4, d0
 8005512:	eeb0 5b41 	vmov.f64	d5, d1
 8005516:	eeb0 6b42 	vmov.f64	d6, d2
 800551a:	eeb0 7b43 	vmov.f64	d7, d3
 800551e:	ed87 4b08 	vstr	d4, [r7, #32]
 8005522:	ed87 5b0a 	vstr	d5, [r7, #40]	; 0x28
 8005526:	ed87 6b0c 	vstr	d6, [r7, #48]	; 0x30
 800552a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800552e:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005532:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8005536:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800553a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800553e:	ec49 8b14 	vmov	d4, r8, r9
 8005542:	ec45 4b15 	vmov	d5, r4, r5
 8005546:	ec41 0b16 	vmov	d6, r0, r1
 800554a:	ec43 2b17 	vmov	d7, r2, r3
}
 800554e:	eeb0 0b44 	vmov.f64	d0, d4
 8005552:	eeb0 1b45 	vmov.f64	d1, d5
 8005556:	eeb0 2b46 	vmov.f64	d2, d6
 800555a:	eeb0 3b47 	vmov.f64	d3, d7
 800555e:	3740      	adds	r7, #64	; 0x40
 8005560:	46bd      	mov	sp, r7
 8005562:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08005568 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800556e:	4b15      	ldr	r3, [pc, #84]	; (80055c4 <MX_DMA_Init+0x5c>)
 8005570:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005574:	4a13      	ldr	r2, [pc, #76]	; (80055c4 <MX_DMA_Init+0x5c>)
 8005576:	f043 0301 	orr.w	r3, r3, #1
 800557a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800557e:	4b11      	ldr	r3, [pc, #68]	; (80055c4 <MX_DMA_Init+0x5c>)
 8005580:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005584:	f003 0301 	and.w	r3, r3, #1
 8005588:	607b      	str	r3, [r7, #4]
 800558a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800558c:	2200      	movs	r2, #0
 800558e:	2100      	movs	r1, #0
 8005590:	200b      	movs	r0, #11
 8005592:	f001 fece 	bl	8007332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8005596:	200b      	movs	r0, #11
 8005598:	f001 fee5 	bl	8007366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800559c:	2200      	movs	r2, #0
 800559e:	2100      	movs	r1, #0
 80055a0:	200c      	movs	r0, #12
 80055a2:	f001 fec6 	bl	8007332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80055a6:	200c      	movs	r0, #12
 80055a8:	f001 fedd 	bl	8007366 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80055ac:	2200      	movs	r2, #0
 80055ae:	2100      	movs	r1, #0
 80055b0:	200d      	movs	r0, #13
 80055b2:	f001 febe 	bl	8007332 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80055b6:	200d      	movs	r0, #13
 80055b8:	f001 fed5 	bl	8007366 <HAL_NVIC_EnableIRQ>

}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	58024400 	.word	0x58024400

080055c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80055cc:	4b1e      	ldr	r3, [pc, #120]	; (8005648 <MX_ETH_Init+0x80>)
 80055ce:	4a1f      	ldr	r2, [pc, #124]	; (800564c <MX_ETH_Init+0x84>)
 80055d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80055d2:	4b1f      	ldr	r3, [pc, #124]	; (8005650 <MX_ETH_Init+0x88>)
 80055d4:	2200      	movs	r2, #0
 80055d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80055d8:	4b1d      	ldr	r3, [pc, #116]	; (8005650 <MX_ETH_Init+0x88>)
 80055da:	2280      	movs	r2, #128	; 0x80
 80055dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80055de:	4b1c      	ldr	r3, [pc, #112]	; (8005650 <MX_ETH_Init+0x88>)
 80055e0:	22e1      	movs	r2, #225	; 0xe1
 80055e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <MX_ETH_Init+0x88>)
 80055e6:	2200      	movs	r2, #0
 80055e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80055ea:	4b19      	ldr	r3, [pc, #100]	; (8005650 <MX_ETH_Init+0x88>)
 80055ec:	2200      	movs	r2, #0
 80055ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80055f0:	4b17      	ldr	r3, [pc, #92]	; (8005650 <MX_ETH_Init+0x88>)
 80055f2:	2200      	movs	r2, #0
 80055f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80055f6:	4b14      	ldr	r3, [pc, #80]	; (8005648 <MX_ETH_Init+0x80>)
 80055f8:	4a15      	ldr	r2, [pc, #84]	; (8005650 <MX_ETH_Init+0x88>)
 80055fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80055fc:	4b12      	ldr	r3, [pc, #72]	; (8005648 <MX_ETH_Init+0x80>)
 80055fe:	2201      	movs	r2, #1
 8005600:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005602:	4b11      	ldr	r3, [pc, #68]	; (8005648 <MX_ETH_Init+0x80>)
 8005604:	4a13      	ldr	r2, [pc, #76]	; (8005654 <MX_ETH_Init+0x8c>)
 8005606:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8005608:	4b0f      	ldr	r3, [pc, #60]	; (8005648 <MX_ETH_Init+0x80>)
 800560a:	4a13      	ldr	r2, [pc, #76]	; (8005658 <MX_ETH_Init+0x90>)
 800560c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800560e:	4b0e      	ldr	r3, [pc, #56]	; (8005648 <MX_ETH_Init+0x80>)
 8005610:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8005614:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8005616:	480c      	ldr	r0, [pc, #48]	; (8005648 <MX_ETH_Init+0x80>)
 8005618:	f004 fcfc 	bl	800a014 <HAL_ETH_Init>
 800561c:	4603      	mov	r3, r0
 800561e:	2b00      	cmp	r3, #0
 8005620:	d001      	beq.n	8005626 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8005622:	f001 f88d 	bl	8006740 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005626:	2238      	movs	r2, #56	; 0x38
 8005628:	2100      	movs	r1, #0
 800562a:	480c      	ldr	r0, [pc, #48]	; (800565c <MX_ETH_Init+0x94>)
 800562c:	f00c f89e 	bl	801176c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005630:	4b0a      	ldr	r3, [pc, #40]	; (800565c <MX_ETH_Init+0x94>)
 8005632:	2221      	movs	r2, #33	; 0x21
 8005634:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005636:	4b09      	ldr	r3, [pc, #36]	; (800565c <MX_ETH_Init+0x94>)
 8005638:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800563c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <MX_ETH_Init+0x94>)
 8005640:	2200      	movs	r2, #0
 8005642:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8005644:	bf00      	nop
 8005646:	bd80      	pop	{r7, pc}
 8005648:	240001a4 	.word	0x240001a4
 800564c:	40028000 	.word	0x40028000
 8005650:	24000254 	.word	0x24000254
 8005654:	240000ec 	.word	0x240000ec
 8005658:	2400008c 	.word	0x2400008c
 800565c:	2400016c 	.word	0x2400016c

08005660 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b08e      	sub	sp, #56	; 0x38
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005668:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566c:	2200      	movs	r2, #0
 800566e:	601a      	str	r2, [r3, #0]
 8005670:	605a      	str	r2, [r3, #4]
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	60da      	str	r2, [r3, #12]
 8005676:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a59      	ldr	r2, [pc, #356]	; (80057e4 <HAL_ETH_MspInit+0x184>)
 800567e:	4293      	cmp	r3, r2
 8005680:	f040 80ab 	bne.w	80057da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8005684:	4b58      	ldr	r3, [pc, #352]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 8005686:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800568a:	4a57      	ldr	r2, [pc, #348]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 800568c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005690:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8005694:	4b54      	ldr	r3, [pc, #336]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 8005696:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800569a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800569e:	623b      	str	r3, [r7, #32]
 80056a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80056a2:	4b51      	ldr	r3, [pc, #324]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056a8:	4a4f      	ldr	r2, [pc, #316]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80056ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80056b2:	4b4d      	ldr	r3, [pc, #308]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80056c0:	4b49      	ldr	r3, [pc, #292]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056c6:	4a48      	ldr	r2, [pc, #288]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80056cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80056d0:	4b45      	ldr	r3, [pc, #276]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	61bb      	str	r3, [r7, #24]
 80056dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80056de:	4b42      	ldr	r3, [pc, #264]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056e4:	4a40      	ldr	r2, [pc, #256]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056e6:	f043 0304 	orr.w	r3, r3, #4
 80056ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80056ee:	4b3e      	ldr	r3, [pc, #248]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80056f4:	f003 0304 	and.w	r3, r3, #4
 80056f8:	617b      	str	r3, [r7, #20]
 80056fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056fc:	4b3a      	ldr	r3, [pc, #232]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 80056fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005702:	4a39      	ldr	r2, [pc, #228]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 8005704:	f043 0301 	orr.w	r3, r3, #1
 8005708:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800570c:	4b36      	ldr	r3, [pc, #216]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 800570e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005712:	f003 0301 	and.w	r3, r3, #1
 8005716:	613b      	str	r3, [r7, #16]
 8005718:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800571a:	4b33      	ldr	r3, [pc, #204]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 800571c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005720:	4a31      	ldr	r2, [pc, #196]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 8005722:	f043 0302 	orr.w	r3, r3, #2
 8005726:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800572a:	4b2f      	ldr	r3, [pc, #188]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 800572c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	60fb      	str	r3, [r7, #12]
 8005736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005738:	4b2b      	ldr	r3, [pc, #172]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 800573a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800573e:	4a2a      	ldr	r2, [pc, #168]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 8005740:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005744:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005748:	4b27      	ldr	r3, [pc, #156]	; (80057e8 <HAL_ETH_MspInit+0x188>)
 800574a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	60bb      	str	r3, [r7, #8]
 8005754:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8005756:	2332      	movs	r3, #50	; 0x32
 8005758:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800575a:	2302      	movs	r3, #2
 800575c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800575e:	2300      	movs	r3, #0
 8005760:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005762:	2300      	movs	r3, #0
 8005764:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005766:	230b      	movs	r3, #11
 8005768:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800576a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800576e:	4619      	mov	r1, r3
 8005770:	481e      	ldr	r0, [pc, #120]	; (80057ec <HAL_ETH_MspInit+0x18c>)
 8005772:	f005 f873 	bl	800a85c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8005776:	2386      	movs	r3, #134	; 0x86
 8005778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800577a:	2302      	movs	r3, #2
 800577c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800577e:	2300      	movs	r3, #0
 8005780:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005782:	2300      	movs	r3, #0
 8005784:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005786:	230b      	movs	r3, #11
 8005788:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800578a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800578e:	4619      	mov	r1, r3
 8005790:	4817      	ldr	r0, [pc, #92]	; (80057f0 <HAL_ETH_MspInit+0x190>)
 8005792:	f005 f863 	bl	800a85c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005796:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800579a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800579c:	2302      	movs	r3, #2
 800579e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057a0:	2300      	movs	r3, #0
 80057a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057a4:	2300      	movs	r3, #0
 80057a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057a8:	230b      	movs	r3, #11
 80057aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057b0:	4619      	mov	r1, r3
 80057b2:	4810      	ldr	r0, [pc, #64]	; (80057f4 <HAL_ETH_MspInit+0x194>)
 80057b4:	f005 f852 	bl	800a85c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80057b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057be:	2302      	movs	r3, #2
 80057c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057c6:	2300      	movs	r3, #0
 80057c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057ca:	230b      	movs	r3, #11
 80057cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80057ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057d2:	4619      	mov	r1, r3
 80057d4:	4808      	ldr	r0, [pc, #32]	; (80057f8 <HAL_ETH_MspInit+0x198>)
 80057d6:	f005 f841 	bl	800a85c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80057da:	bf00      	nop
 80057dc:	3738      	adds	r7, #56	; 0x38
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	40028000 	.word	0x40028000
 80057e8:	58024400 	.word	0x58024400
 80057ec:	58020800 	.word	0x58020800
 80057f0:	58020000 	.word	0x58020000
 80057f4:	58020400 	.word	0x58020400
 80057f8:	58021800 	.word	0x58021800

080057fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b087      	sub	sp, #28
 8005800:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005802:	4b30      	ldr	r3, [pc, #192]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005804:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005808:	4a2e      	ldr	r2, [pc, #184]	; (80058c4 <MX_GPIO_Init+0xc8>)
 800580a:	f043 0304 	orr.w	r3, r3, #4
 800580e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005812:	4b2c      	ldr	r3, [pc, #176]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005814:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005818:	f003 0304 	and.w	r3, r3, #4
 800581c:	617b      	str	r3, [r7, #20]
 800581e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005820:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005822:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005826:	4a27      	ldr	r2, [pc, #156]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005828:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800582c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005830:	4b24      	ldr	r3, [pc, #144]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005832:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800583a:	613b      	str	r3, [r7, #16]
 800583c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800583e:	4b21      	ldr	r3, [pc, #132]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005840:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005844:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005846:	f043 0301 	orr.w	r3, r3, #1
 800584a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800584e:	4b1d      	ldr	r3, [pc, #116]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005850:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005854:	f003 0301 	and.w	r3, r3, #1
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800585c:	4b19      	ldr	r3, [pc, #100]	; (80058c4 <MX_GPIO_Init+0xc8>)
 800585e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005862:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005864:	f043 0302 	orr.w	r3, r3, #2
 8005868:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800586c:	4b15      	ldr	r3, [pc, #84]	; (80058c4 <MX_GPIO_Init+0xc8>)
 800586e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005872:	f003 0302 	and.w	r3, r3, #2
 8005876:	60bb      	str	r3, [r7, #8]
 8005878:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800587a:	4b12      	ldr	r3, [pc, #72]	; (80058c4 <MX_GPIO_Init+0xc8>)
 800587c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005880:	4a10      	ldr	r2, [pc, #64]	; (80058c4 <MX_GPIO_Init+0xc8>)
 8005882:	f043 0308 	orr.w	r3, r3, #8
 8005886:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800588a:	4b0e      	ldr	r3, [pc, #56]	; (80058c4 <MX_GPIO_Init+0xc8>)
 800588c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005890:	f003 0308 	and.w	r3, r3, #8
 8005894:	607b      	str	r3, [r7, #4]
 8005896:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005898:	4b0a      	ldr	r3, [pc, #40]	; (80058c4 <MX_GPIO_Init+0xc8>)
 800589a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800589e:	4a09      	ldr	r2, [pc, #36]	; (80058c4 <MX_GPIO_Init+0xc8>)
 80058a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80058a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80058a8:	4b06      	ldr	r3, [pc, #24]	; (80058c4 <MX_GPIO_Init+0xc8>)
 80058aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80058ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	683b      	ldr	r3, [r7, #0]

}
 80058b6:	bf00      	nop
 80058b8:	371c      	adds	r7, #28
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	58024400 	.word	0x58024400

080058c8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80058cc:	4b1b      	ldr	r3, [pc, #108]	; (800593c <MX_I2C1_Init+0x74>)
 80058ce:	4a1c      	ldr	r2, [pc, #112]	; (8005940 <MX_I2C1_Init+0x78>)
 80058d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 80058d2:	4b1a      	ldr	r3, [pc, #104]	; (800593c <MX_I2C1_Init+0x74>)
 80058d4:	4a1b      	ldr	r2, [pc, #108]	; (8005944 <MX_I2C1_Init+0x7c>)
 80058d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80058d8:	4b18      	ldr	r3, [pc, #96]	; (800593c <MX_I2C1_Init+0x74>)
 80058da:	2200      	movs	r2, #0
 80058dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80058de:	4b17      	ldr	r3, [pc, #92]	; (800593c <MX_I2C1_Init+0x74>)
 80058e0:	2201      	movs	r2, #1
 80058e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80058e4:	4b15      	ldr	r3, [pc, #84]	; (800593c <MX_I2C1_Init+0x74>)
 80058e6:	2200      	movs	r2, #0
 80058e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80058ea:	4b14      	ldr	r3, [pc, #80]	; (800593c <MX_I2C1_Init+0x74>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80058f0:	4b12      	ldr	r3, [pc, #72]	; (800593c <MX_I2C1_Init+0x74>)
 80058f2:	2200      	movs	r2, #0
 80058f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80058f6:	4b11      	ldr	r3, [pc, #68]	; (800593c <MX_I2C1_Init+0x74>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80058fc:	4b0f      	ldr	r3, [pc, #60]	; (800593c <MX_I2C1_Init+0x74>)
 80058fe:	2200      	movs	r2, #0
 8005900:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8005902:	480e      	ldr	r0, [pc, #56]	; (800593c <MX_I2C1_Init+0x74>)
 8005904:	f005 f988 	bl	800ac18 <HAL_I2C_Init>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800590e:	f000 ff17 	bl	8006740 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005912:	2100      	movs	r1, #0
 8005914:	4809      	ldr	r0, [pc, #36]	; (800593c <MX_I2C1_Init+0x74>)
 8005916:	f005 fe8b 	bl	800b630 <HAL_I2CEx_ConfigAnalogFilter>
 800591a:	4603      	mov	r3, r0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d001      	beq.n	8005924 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8005920:	f000 ff0e 	bl	8006740 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8005924:	2100      	movs	r1, #0
 8005926:	4805      	ldr	r0, [pc, #20]	; (800593c <MX_I2C1_Init+0x74>)
 8005928:	f005 fecd 	bl	800b6c6 <HAL_I2CEx_ConfigDigitalFilter>
 800592c:	4603      	mov	r3, r0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d001      	beq.n	8005936 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8005932:	f000 ff05 	bl	8006740 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8005936:	bf00      	nop
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	2400025c 	.word	0x2400025c
 8005940:	40005400 	.word	0x40005400
 8005944:	00c0eaff 	.word	0x00c0eaff

08005948 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005948:	b580      	push	{r7, lr}
 800594a:	b0b8      	sub	sp, #224	; 0xe0
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005950:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8005954:	2200      	movs	r2, #0
 8005956:	601a      	str	r2, [r3, #0]
 8005958:	605a      	str	r2, [r3, #4]
 800595a:	609a      	str	r2, [r3, #8]
 800595c:	60da      	str	r2, [r3, #12]
 800595e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005960:	f107 0310 	add.w	r3, r7, #16
 8005964:	22bc      	movs	r2, #188	; 0xbc
 8005966:	2100      	movs	r1, #0
 8005968:	4618      	mov	r0, r3
 800596a:	f00b feff 	bl	801176c <memset>
  if(i2cHandle->Instance==I2C1)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	4a52      	ldr	r2, [pc, #328]	; (8005abc <HAL_I2C_MspInit+0x174>)
 8005974:	4293      	cmp	r3, r2
 8005976:	f040 809c 	bne.w	8005ab2 <HAL_I2C_MspInit+0x16a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800597a:	2308      	movs	r3, #8
 800597c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c123ClockSelection = RCC_I2C123CLKSOURCE_D2PCLK1;
 800597e:	2300      	movs	r3, #0
 8005980:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005984:	f107 0310 	add.w	r3, r7, #16
 8005988:	4618      	mov	r0, r3
 800598a:	f007 f855 	bl	800ca38 <HAL_RCCEx_PeriphCLKConfig>
 800598e:	4603      	mov	r3, r0
 8005990:	2b00      	cmp	r3, #0
 8005992:	d001      	beq.n	8005998 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8005994:	f000 fed4 	bl	8006740 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005998:	4b49      	ldr	r3, [pc, #292]	; (8005ac0 <HAL_I2C_MspInit+0x178>)
 800599a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800599e:	4a48      	ldr	r2, [pc, #288]	; (8005ac0 <HAL_I2C_MspInit+0x178>)
 80059a0:	f043 0302 	orr.w	r3, r3, #2
 80059a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80059a8:	4b45      	ldr	r3, [pc, #276]	; (8005ac0 <HAL_I2C_MspInit+0x178>)
 80059aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80059ae:	f003 0302 	and.w	r3, r3, #2
 80059b2:	60fb      	str	r3, [r7, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80059b6:	23c0      	movs	r3, #192	; 0xc0
 80059b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80059bc:	2312      	movs	r3, #18
 80059be:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80059c8:	2300      	movs	r3, #0
 80059ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80059ce:	2304      	movs	r3, #4
 80059d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80059d4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80059d8:	4619      	mov	r1, r3
 80059da:	483a      	ldr	r0, [pc, #232]	; (8005ac4 <HAL_I2C_MspInit+0x17c>)
 80059dc:	f004 ff3e 	bl	800a85c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80059e0:	4b37      	ldr	r3, [pc, #220]	; (8005ac0 <HAL_I2C_MspInit+0x178>)
 80059e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059e6:	4a36      	ldr	r2, [pc, #216]	; (8005ac0 <HAL_I2C_MspInit+0x178>)
 80059e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059ec:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80059f0:	4b33      	ldr	r3, [pc, #204]	; (8005ac0 <HAL_I2C_MspInit+0x178>)
 80059f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80059f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80059fa:	60bb      	str	r3, [r7, #8]
 80059fc:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream1;
 80059fe:	4b32      	ldr	r3, [pc, #200]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a00:	4a32      	ldr	r2, [pc, #200]	; (8005acc <HAL_I2C_MspInit+0x184>)
 8005a02:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_I2C1_RX;
 8005a04:	4b30      	ldr	r3, [pc, #192]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a06:	2221      	movs	r2, #33	; 0x21
 8005a08:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005a0a:	4b2f      	ldr	r3, [pc, #188]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a10:	4b2d      	ldr	r3, [pc, #180]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a12:	2200      	movs	r2, #0
 8005a14:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005a16:	4b2c      	ldr	r3, [pc, #176]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a18:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a1c:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a1e:	4b2a      	ldr	r3, [pc, #168]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a20:	2200      	movs	r2, #0
 8005a22:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a24:	4b28      	ldr	r3, [pc, #160]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a26:	2200      	movs	r2, #0
 8005a28:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005a2a:	4b27      	ldr	r3, [pc, #156]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005a30:	4b25      	ldr	r3, [pc, #148]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a32:	2200      	movs	r2, #0
 8005a34:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a36:	4b24      	ldr	r3, [pc, #144]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a38:	2200      	movs	r2, #0
 8005a3a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005a3c:	4822      	ldr	r0, [pc, #136]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a3e:	f001 fcad 	bl	800739c <HAL_DMA_Init>
 8005a42:	4603      	mov	r3, r0
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d001      	beq.n	8005a4c <HAL_I2C_MspInit+0x104>
    {
      Error_Handler();
 8005a48:	f000 fe7a 	bl	8006740 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4a1e      	ldr	r2, [pc, #120]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a50:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a52:	4a1d      	ldr	r2, [pc, #116]	; (8005ac8 <HAL_I2C_MspInit+0x180>)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream2;
 8005a58:	4b1d      	ldr	r3, [pc, #116]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a5a:	4a1e      	ldr	r2, [pc, #120]	; (8005ad4 <HAL_I2C_MspInit+0x18c>)
 8005a5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_I2C1_TX;
 8005a5e:	4b1c      	ldr	r3, [pc, #112]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a60:	2222      	movs	r2, #34	; 0x22
 8005a62:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005a64:	4b1a      	ldr	r3, [pc, #104]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a66:	2240      	movs	r2, #64	; 0x40
 8005a68:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005a6a:	4b19      	ldr	r3, [pc, #100]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005a70:	4b17      	ldr	r3, [pc, #92]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a76:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005a78:	4b15      	ldr	r3, [pc, #84]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005a7e:	4b14      	ldr	r3, [pc, #80]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a80:	2200      	movs	r2, #0
 8005a82:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8005a84:	4b12      	ldr	r3, [pc, #72]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005a8a:	4b11      	ldr	r3, [pc, #68]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005a90:	4b0f      	ldr	r3, [pc, #60]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a92:	2200      	movs	r2, #0
 8005a94:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005a96:	480e      	ldr	r0, [pc, #56]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005a98:	f001 fc80 	bl	800739c <HAL_DMA_Init>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d001      	beq.n	8005aa6 <HAL_I2C_MspInit+0x15e>
    {
      Error_Handler();
 8005aa2:	f000 fe4d 	bl	8006740 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005aaa:	639a      	str	r2, [r3, #56]	; 0x38
 8005aac:	4a08      	ldr	r2, [pc, #32]	; (8005ad0 <HAL_I2C_MspInit+0x188>)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8005ab2:	bf00      	nop
 8005ab4:	37e0      	adds	r7, #224	; 0xe0
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	40005400 	.word	0x40005400
 8005ac0:	58024400 	.word	0x58024400
 8005ac4:	58020400 	.word	0x58020400
 8005ac8:	240002a8 	.word	0x240002a8
 8005acc:	40020028 	.word	0x40020028
 8005ad0:	24000320 	.word	0x24000320
 8005ad4:	40020040 	.word	0x40020040

08005ad8 <bno055_assignI2C>:

#include "bno055.h"

I2C_HandleTypeDef *_bno055_i2c_port;

void bno055_assignI2C(I2C_HandleTypeDef *hi2c_device) {
 8005ad8:	b480      	push	{r7}
 8005ada:	b083      	sub	sp, #12
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  _bno055_i2c_port = hi2c_device;
 8005ae0:	4a04      	ldr	r2, [pc, #16]	; (8005af4 <bno055_assignI2C+0x1c>)
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6013      	str	r3, [r2, #0]
}
 8005ae6:	bf00      	nop
 8005ae8:	370c      	adds	r7, #12
 8005aea:	46bd      	mov	sp, r7
 8005aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af0:	4770      	bx	lr
 8005af2:	bf00      	nop
 8005af4:	24000398 	.word	0x24000398

08005af8 <bno055_delay>:

void bno055_delay(int time) {
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
#ifdef FREERTOS_ENABLED
  osDelay(time);
#else
  HAL_Delay(time);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	4618      	mov	r0, r3
 8005b04:	f001 faf6 	bl	80070f4 <HAL_Delay>
#endif
}
 8005b08:	bf00      	nop
 8005b0a:	3708      	adds	r7, #8
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}

08005b10 <bno055_writeData>:

void bno055_writeData(uint8_t reg, uint8_t data) {
 8005b10:	b580      	push	{r7, lr}
 8005b12:	b088      	sub	sp, #32
 8005b14:	af02      	add	r7, sp, #8
 8005b16:	4603      	mov	r3, r0
 8005b18:	460a      	mov	r2, r1
 8005b1a:	71fb      	strb	r3, [r7, #7]
 8005b1c:	4613      	mov	r3, r2
 8005b1e:	71bb      	strb	r3, [r7, #6]
  uint8_t txdata[2] = {reg, data};
 8005b20:	79fb      	ldrb	r3, [r7, #7]
 8005b22:	733b      	strb	r3, [r7, #12]
 8005b24:	79bb      	ldrb	r3, [r7, #6]
 8005b26:	737b      	strb	r3, [r7, #13]
  uint8_t status;
  status = HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR_LO << 1,
 8005b28:	4b5a      	ldr	r3, [pc, #360]	; (8005c94 <bno055_writeData+0x184>)
 8005b2a:	6818      	ldr	r0, [r3, #0]
 8005b2c:	f107 020c 	add.w	r2, r7, #12
 8005b30:	230a      	movs	r3, #10
 8005b32:	9300      	str	r3, [sp, #0]
 8005b34:	2302      	movs	r3, #2
 8005b36:	2150      	movs	r1, #80	; 0x50
 8005b38:	f005 f8fe 	bl	800ad38 <HAL_I2C_Master_Transmit>
 8005b3c:	4603      	mov	r3, r0
 8005b3e:	75fb      	strb	r3, [r7, #23]
                                   txdata, sizeof(txdata), 10);
  if (status == HAL_OK) {
 8005b40:	7dfb      	ldrb	r3, [r7, #23]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	f000 80a0 	beq.w	8005c88 <bno055_writeData+0x178>
    return;
  }

  if (status == HAL_ERROR) {
 8005b48:	7dfb      	ldrb	r3, [r7, #23]
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d103      	bne.n	8005b56 <bno055_writeData+0x46>
    printf("HAL_I2C_Master_Transmit HAL_ERROR\r\n");
 8005b4e:	4852      	ldr	r0, [pc, #328]	; (8005c98 <bno055_writeData+0x188>)
 8005b50:	f00b ff7a 	bl	8011a48 <puts>
 8005b54:	e012      	b.n	8005b7c <bno055_writeData+0x6c>
  } else if (status == HAL_TIMEOUT) {
 8005b56:	7dfb      	ldrb	r3, [r7, #23]
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d103      	bne.n	8005b64 <bno055_writeData+0x54>
    printf("HAL_I2C_Master_Transmit HAL_TIMEOUT\r\n");
 8005b5c:	484f      	ldr	r0, [pc, #316]	; (8005c9c <bno055_writeData+0x18c>)
 8005b5e:	f00b ff73 	bl	8011a48 <puts>
 8005b62:	e00b      	b.n	8005b7c <bno055_writeData+0x6c>
  } else if (status == HAL_BUSY) {
 8005b64:	7dfb      	ldrb	r3, [r7, #23]
 8005b66:	2b02      	cmp	r3, #2
 8005b68:	d103      	bne.n	8005b72 <bno055_writeData+0x62>
    printf("HAL_I2C_Master_Transmit HAL_BUSY\r\n");
 8005b6a:	484d      	ldr	r0, [pc, #308]	; (8005ca0 <bno055_writeData+0x190>)
 8005b6c:	f00b ff6c 	bl	8011a48 <puts>
 8005b70:	e004      	b.n	8005b7c <bno055_writeData+0x6c>
  } else {
    printf("Unknown status data %d", status);
 8005b72:	7dfb      	ldrb	r3, [r7, #23]
 8005b74:	4619      	mov	r1, r3
 8005b76:	484b      	ldr	r0, [pc, #300]	; (8005ca4 <bno055_writeData+0x194>)
 8005b78:	f00b fee0 	bl	801193c <iprintf>
  }

  uint32_t error = HAL_I2C_GetError(_bno055_i2c_port);
 8005b7c:	4b45      	ldr	r3, [pc, #276]	; (8005c94 <bno055_writeData+0x184>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	4618      	mov	r0, r3
 8005b82:	f005 fad1 	bl	800b128 <HAL_I2C_GetError>
 8005b86:	6138      	str	r0, [r7, #16]
  if (error == HAL_I2C_ERROR_NONE) {
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d07e      	beq.n	8005c8c <bno055_writeData+0x17c>
    return;
  } else if (error == HAL_I2C_ERROR_BERR) {
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d103      	bne.n	8005b9c <bno055_writeData+0x8c>
    printf("HAL_I2C_ERROR_BERR\r\n");
 8005b94:	4844      	ldr	r0, [pc, #272]	; (8005ca8 <bno055_writeData+0x198>)
 8005b96:	f00b ff57 	bl	8011a48 <puts>
 8005b9a:	e021      	b.n	8005be0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_ARLO) {
 8005b9c:	693b      	ldr	r3, [r7, #16]
 8005b9e:	2b02      	cmp	r3, #2
 8005ba0:	d103      	bne.n	8005baa <bno055_writeData+0x9a>
    printf("HAL_I2C_ERROR_ARLO\r\n");
 8005ba2:	4842      	ldr	r0, [pc, #264]	; (8005cac <bno055_writeData+0x19c>)
 8005ba4:	f00b ff50 	bl	8011a48 <puts>
 8005ba8:	e01a      	b.n	8005be0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_AF) {
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	2b04      	cmp	r3, #4
 8005bae:	d103      	bne.n	8005bb8 <bno055_writeData+0xa8>
    printf("HAL_I2C_ERROR_AF\r\n");
 8005bb0:	483f      	ldr	r0, [pc, #252]	; (8005cb0 <bno055_writeData+0x1a0>)
 8005bb2:	f00b ff49 	bl	8011a48 <puts>
 8005bb6:	e013      	b.n	8005be0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_OVR) {
 8005bb8:	693b      	ldr	r3, [r7, #16]
 8005bba:	2b08      	cmp	r3, #8
 8005bbc:	d103      	bne.n	8005bc6 <bno055_writeData+0xb6>
    printf("HAL_I2C_ERROR_OVR\r\n");
 8005bbe:	483d      	ldr	r0, [pc, #244]	; (8005cb4 <bno055_writeData+0x1a4>)
 8005bc0:	f00b ff42 	bl	8011a48 <puts>
 8005bc4:	e00c      	b.n	8005be0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_DMA) {
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	2b10      	cmp	r3, #16
 8005bca:	d103      	bne.n	8005bd4 <bno055_writeData+0xc4>
    printf("HAL_I2C_ERROR_DMA\r\n");
 8005bcc:	483a      	ldr	r0, [pc, #232]	; (8005cb8 <bno055_writeData+0x1a8>)
 8005bce:	f00b ff3b 	bl	8011a48 <puts>
 8005bd2:	e005      	b.n	8005be0 <bno055_writeData+0xd0>
  } else if (error == HAL_I2C_ERROR_TIMEOUT) {
 8005bd4:	693b      	ldr	r3, [r7, #16]
 8005bd6:	2b20      	cmp	r3, #32
 8005bd8:	d102      	bne.n	8005be0 <bno055_writeData+0xd0>
    printf("HAL_I2C_ERROR_TIMEOUT\r\n");
 8005bda:	4838      	ldr	r0, [pc, #224]	; (8005cbc <bno055_writeData+0x1ac>)
 8005bdc:	f00b ff34 	bl	8011a48 <puts>
  }

  HAL_I2C_StateTypeDef state = HAL_I2C_GetState(_bno055_i2c_port);
 8005be0:	4b2c      	ldr	r3, [pc, #176]	; (8005c94 <bno055_writeData+0x184>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	f005 fa91 	bl	800b10c <HAL_I2C_GetState>
 8005bea:	4603      	mov	r3, r0
 8005bec:	73fb      	strb	r3, [r7, #15]
  if (state == HAL_I2C_STATE_RESET) {
 8005bee:	7bfb      	ldrb	r3, [r7, #15]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d103      	bne.n	8005bfc <bno055_writeData+0xec>
    printf("HAL_I2C_STATE_RESET\r\n");
 8005bf4:	4832      	ldr	r0, [pc, #200]	; (8005cc0 <bno055_writeData+0x1b0>)
 8005bf6:	f00b ff27 	bl	8011a48 <puts>
 8005bfa:	e048      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_READY) {
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
 8005bfe:	2b20      	cmp	r3, #32
 8005c00:	d103      	bne.n	8005c0a <bno055_writeData+0xfa>
    printf("HAL_I2C_STATE_RESET\r\n");
 8005c02:	482f      	ldr	r0, [pc, #188]	; (8005cc0 <bno055_writeData+0x1b0>)
 8005c04:	f00b ff20 	bl	8011a48 <puts>
 8005c08:	e041      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY) {
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b24      	cmp	r3, #36	; 0x24
 8005c0e:	d103      	bne.n	8005c18 <bno055_writeData+0x108>
    printf("HAL_I2C_STATE_BUSY\r\n");
 8005c10:	482c      	ldr	r0, [pc, #176]	; (8005cc4 <bno055_writeData+0x1b4>)
 8005c12:	f00b ff19 	bl	8011a48 <puts>
 8005c16:	e03a      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX) {
 8005c18:	7bfb      	ldrb	r3, [r7, #15]
 8005c1a:	2b21      	cmp	r3, #33	; 0x21
 8005c1c:	d103      	bne.n	8005c26 <bno055_writeData+0x116>
    printf("HAL_I2C_STATE_BUSY_TX\r\n");
 8005c1e:	482a      	ldr	r0, [pc, #168]	; (8005cc8 <bno055_writeData+0x1b8>)
 8005c20:	f00b ff12 	bl	8011a48 <puts>
 8005c24:	e033      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX) {
 8005c26:	7bfb      	ldrb	r3, [r7, #15]
 8005c28:	2b22      	cmp	r3, #34	; 0x22
 8005c2a:	d103      	bne.n	8005c34 <bno055_writeData+0x124>
    printf("HAL_I2C_STATE_BUSY_RX\r\n");
 8005c2c:	4827      	ldr	r0, [pc, #156]	; (8005ccc <bno055_writeData+0x1bc>)
 8005c2e:	f00b ff0b 	bl	8011a48 <puts>
 8005c32:	e02c      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_LISTEN) {
 8005c34:	7bfb      	ldrb	r3, [r7, #15]
 8005c36:	2b28      	cmp	r3, #40	; 0x28
 8005c38:	d103      	bne.n	8005c42 <bno055_writeData+0x132>
    printf("HAL_I2C_STATE_LISTEN\r\n");
 8005c3a:	4825      	ldr	r0, [pc, #148]	; (8005cd0 <bno055_writeData+0x1c0>)
 8005c3c:	f00b ff04 	bl	8011a48 <puts>
 8005c40:	e025      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_TX_LISTEN) {
 8005c42:	7bfb      	ldrb	r3, [r7, #15]
 8005c44:	2b29      	cmp	r3, #41	; 0x29
 8005c46:	d103      	bne.n	8005c50 <bno055_writeData+0x140>
    printf("HAL_I2C_STATE_BUSY_TX_LISTEN\r\n");
 8005c48:	4822      	ldr	r0, [pc, #136]	; (8005cd4 <bno055_writeData+0x1c4>)
 8005c4a:	f00b fefd 	bl	8011a48 <puts>
 8005c4e:	e01e      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_BUSY_RX_LISTEN) {
 8005c50:	7bfb      	ldrb	r3, [r7, #15]
 8005c52:	2b2a      	cmp	r3, #42	; 0x2a
 8005c54:	d103      	bne.n	8005c5e <bno055_writeData+0x14e>
    printf("HAL_I2C_STATE_BUSY_RX_LISTEN\r\n");
 8005c56:	4820      	ldr	r0, [pc, #128]	; (8005cd8 <bno055_writeData+0x1c8>)
 8005c58:	f00b fef6 	bl	8011a48 <puts>
 8005c5c:	e017      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ABORT) {
 8005c5e:	7bfb      	ldrb	r3, [r7, #15]
 8005c60:	2b60      	cmp	r3, #96	; 0x60
 8005c62:	d103      	bne.n	8005c6c <bno055_writeData+0x15c>
    printf("HAL_I2C_STATE_ABORT\r\n");
 8005c64:	481d      	ldr	r0, [pc, #116]	; (8005cdc <bno055_writeData+0x1cc>)
 8005c66:	f00b feef 	bl	8011a48 <puts>
 8005c6a:	e010      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_TIMEOUT) {
 8005c6c:	7bfb      	ldrb	r3, [r7, #15]
 8005c6e:	2ba0      	cmp	r3, #160	; 0xa0
 8005c70:	d103      	bne.n	8005c7a <bno055_writeData+0x16a>
    printf("HAL_I2C_STATE_TIMEOUT\r\n");
 8005c72:	481b      	ldr	r0, [pc, #108]	; (8005ce0 <bno055_writeData+0x1d0>)
 8005c74:	f00b fee8 	bl	8011a48 <puts>
 8005c78:	e009      	b.n	8005c8e <bno055_writeData+0x17e>
  } else if (state == HAL_I2C_STATE_ERROR) {
 8005c7a:	7bfb      	ldrb	r3, [r7, #15]
 8005c7c:	2be0      	cmp	r3, #224	; 0xe0
 8005c7e:	d106      	bne.n	8005c8e <bno055_writeData+0x17e>
    printf("HAL_I2C_STATE_ERROR\r\n");
 8005c80:	4818      	ldr	r0, [pc, #96]	; (8005ce4 <bno055_writeData+0x1d4>)
 8005c82:	f00b fee1 	bl	8011a48 <puts>
 8005c86:	e002      	b.n	8005c8e <bno055_writeData+0x17e>
    return;
 8005c88:	bf00      	nop
 8005c8a:	e000      	b.n	8005c8e <bno055_writeData+0x17e>
    return;
 8005c8c:	bf00      	nop
  }
  // while (HAL_I2C_GetState(_bno055_i2c_port) != HAL_I2C_STATE_READY) {}
  // return;
}
 8005c8e:	3718      	adds	r7, #24
 8005c90:	46bd      	mov	sp, r7
 8005c92:	bd80      	pop	{r7, pc}
 8005c94:	24000398 	.word	0x24000398
 8005c98:	080129b8 	.word	0x080129b8
 8005c9c:	080129dc 	.word	0x080129dc
 8005ca0:	08012a04 	.word	0x08012a04
 8005ca4:	08012a28 	.word	0x08012a28
 8005ca8:	08012a40 	.word	0x08012a40
 8005cac:	08012a54 	.word	0x08012a54
 8005cb0:	08012a68 	.word	0x08012a68
 8005cb4:	08012a7c 	.word	0x08012a7c
 8005cb8:	08012a90 	.word	0x08012a90
 8005cbc:	08012aa4 	.word	0x08012aa4
 8005cc0:	08012abc 	.word	0x08012abc
 8005cc4:	08012ad4 	.word	0x08012ad4
 8005cc8:	08012ae8 	.word	0x08012ae8
 8005ccc:	08012b00 	.word	0x08012b00
 8005cd0:	08012b18 	.word	0x08012b18
 8005cd4:	08012b30 	.word	0x08012b30
 8005cd8:	08012b50 	.word	0x08012b50
 8005cdc:	08012b70 	.word	0x08012b70
 8005ce0:	08012b88 	.word	0x08012b88
 8005ce4:	08012ba0 	.word	0x08012ba0

08005ce8 <bno055_readData>:

void bno055_readData(uint8_t reg, uint8_t *data, uint8_t len) {
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af02      	add	r7, sp, #8
 8005cee:	4603      	mov	r3, r0
 8005cf0:	6039      	str	r1, [r7, #0]
 8005cf2:	71fb      	strb	r3, [r7, #7]
 8005cf4:	4613      	mov	r3, r2
 8005cf6:	71bb      	strb	r3, [r7, #6]
  HAL_I2C_Master_Transmit(_bno055_i2c_port, BNO055_I2C_ADDR_LO << 1, &reg, 1,
 8005cf8:	4b0b      	ldr	r3, [pc, #44]	; (8005d28 <bno055_readData+0x40>)
 8005cfa:	6818      	ldr	r0, [r3, #0]
 8005cfc:	1dfa      	adds	r2, r7, #7
 8005cfe:	2364      	movs	r3, #100	; 0x64
 8005d00:	9300      	str	r3, [sp, #0]
 8005d02:	2301      	movs	r3, #1
 8005d04:	2150      	movs	r1, #80	; 0x50
 8005d06:	f005 f817 	bl	800ad38 <HAL_I2C_Master_Transmit>
                          100);
  HAL_I2C_Master_Receive(_bno055_i2c_port, BNO055_I2C_ADDR_LO << 1, data, len,
 8005d0a:	4b07      	ldr	r3, [pc, #28]	; (8005d28 <bno055_readData+0x40>)
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	79bb      	ldrb	r3, [r7, #6]
 8005d10:	b29b      	uxth	r3, r3
 8005d12:	2264      	movs	r2, #100	; 0x64
 8005d14:	9200      	str	r2, [sp, #0]
 8005d16:	683a      	ldr	r2, [r7, #0]
 8005d18:	2150      	movs	r1, #80	; 0x50
 8005d1a:	f005 f901 	bl	800af20 <HAL_I2C_Master_Receive>
                         100);
  // HAL_I2C_Mem_Read(_bno055_i2c_port, BNO055_I2C_ADDR_LO<<1, reg,
  // I2C_MEMADD_SIZE_8BIT, data, len, 100);
}
 8005d1e:	bf00      	nop
 8005d20:	3708      	adds	r7, #8
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	24000398 	.word	0x24000398
 8005d2c:	00000000 	.word	0x00000000

08005d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005d30:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
 8005d34:	ed2d 8b02 	vpush	{d8}
 8005d38:	b09a      	sub	sp, #104	; 0x68
 8005d3a:	af08      	add	r7, sp, #32
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8005d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8005d42:	4b22      	ldr	r3, [pc, #136]	; (8005dcc <main+0x9c>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d006      	beq.n	8005d5c <main+0x2c>
 8005d4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d50:	1e5a      	subs	r2, r3, #1
 8005d52:	647a      	str	r2, [r7, #68]	; 0x44
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	dd01      	ble.n	8005d5c <main+0x2c>
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e000      	b.n	8005d5e <main+0x2e>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d000      	beq.n	8005d64 <main+0x34>
 8005d62:	e7ee      	b.n	8005d42 <main+0x12>
  if ( timeout < 0 )
 8005d64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da01      	bge.n	8005d6e <main+0x3e>
  {
  Error_Handler();
 8005d6a:	f000 fce9 	bl	8006740 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005d6e:	f001 f92f 	bl	8006fd0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005d72:	f000 fb9d 	bl	80064b0 <_Z18SystemClock_Configv>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8005d76:	4b15      	ldr	r3, [pc, #84]	; (8005dcc <main+0x9c>)
 8005d78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d7c:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <main+0x9c>)
 8005d7e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005d82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8005d86:	4b11      	ldr	r3, [pc, #68]	; (8005dcc <main+0x9c>)
 8005d88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d90:	627b      	str	r3, [r7, #36]	; 0x24
 8005d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8005d94:	2000      	movs	r0, #0
 8005d96:	f004 ff11 	bl	800abbc <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8005d9a:	2100      	movs	r1, #0
 8005d9c:	2000      	movs	r0, #0
 8005d9e:	f004 ff27 	bl	800abf0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8005da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005da6:	647b      	str	r3, [r7, #68]	; 0x44
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8005da8:	4b08      	ldr	r3, [pc, #32]	; (8005dcc <main+0x9c>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d106      	bne.n	8005dc2 <main+0x92>
 8005db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db6:	1e5a      	subs	r2, r3, #1
 8005db8:	647a      	str	r2, [r7, #68]	; 0x44
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	dd01      	ble.n	8005dc2 <main+0x92>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	e000      	b.n	8005dc4 <main+0x94>
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d003      	beq.n	8005dd0 <main+0xa0>
 8005dc8:	e7ee      	b.n	8005da8 <main+0x78>
 8005dca:	bf00      	nop
 8005dcc:	58024400 	.word	0x58024400
if ( timeout < 0 )
 8005dd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da01      	bge.n	8005dda <main+0xaa>
{
Error_Handler();
 8005dd6:	f000 fcb3 	bl	8006740 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005dda:	f7ff fd0f 	bl	80057fc <MX_GPIO_Init>
  MX_ETH_Init();
 8005dde:	f7ff fbf3 	bl	80055c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8005de2:	f000 ff23 	bl	8006c2c <MX_USART3_UART_Init>
  MX_DMA_Init();
 8005de6:	f7ff fbbf 	bl	8005568 <MX_DMA_Init>
  MX_USB_OTG_FS_PCD_Init();
 8005dea:	f001 f80b 	bl	8006e04 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8005dee:	f7ff fd6b 	bl	80058c8 <MX_I2C1_Init>
  MX_TIM1_Init();
 8005df2:	f000 fe87 	bl	8006b04 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

HAL_TIM_Base_Start_IT(&htim1);
 8005df6:	48bf      	ldr	r0, [pc, #764]	; (80060f4 <main+0x3c4>)
 8005df8:	f008 f9de 	bl	800e1b8 <HAL_TIM_Base_Start_IT>
bno055_assignI2C(&hi2c1);
 8005dfc:	48be      	ldr	r0, [pc, #760]	; (80060f8 <main+0x3c8>)
 8005dfe:	f7ff fe6b 	bl	8005ad8 <bno055_assignI2C>
bno055_setup();
 8005e02:	f7ff f9bf 	bl	8005184 <bno055_setup>
bno055_setOperationModeNDOF();
 8005e06:	f7ff f9aa 	bl	800515e <bno055_setOperationModeNDOF>
xicro.begin(&huart3);
 8005e0a:	49bc      	ldr	r1, [pc, #752]	; (80060fc <main+0x3cc>)
 8005e0c:	48bc      	ldr	r0, [pc, #752]	; (8006100 <main+0x3d0>)
 8005e0e:	f7fa ff3f 	bl	8000c90 <_ZN5Xicro5beginEP20__UART_HandleTypeDef>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  xicro.Spin_node();
 8005e12:	48bb      	ldr	r0, [pc, #748]	; (8006100 <main+0x3d0>)
 8005e14:	f7fb fe1a 	bl	8001a4c <_ZN5Xicro9Spin_nodeEv>

	  	  bno055_vector_t v = bno055_getVectorQuaternion();		//Quaternion
 8005e18:	f7ff fb72 	bl	8005500 <bno055_getVectorQuaternion>
 8005e1c:	eeb0 4b40 	vmov.f64	d4, d0
 8005e20:	eeb0 5b41 	vmov.f64	d5, d1
 8005e24:	eeb0 6b42 	vmov.f64	d6, d2
 8005e28:	eeb0 7b43 	vmov.f64	d7, d3
 8005e2c:	ed87 4b00 	vstr	d4, [r7]
 8005e30:	ed87 5b02 	vstr	d5, [r7, #8]
 8005e34:	ed87 6b04 	vstr	d6, [r7, #16]
 8005e38:	ed87 7b06 	vstr	d7, [r7, #24]
	  	  qw = v.w;
 8005e3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005e40:	49b0      	ldr	r1, [pc, #704]	; (8006104 <main+0x3d4>)
 8005e42:	e9c1 2300 	strd	r2, r3, [r1]
	  	  qx = v.x;
 8005e46:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e4a:	49af      	ldr	r1, [pc, #700]	; (8006108 <main+0x3d8>)
 8005e4c:	e9c1 2300 	strd	r2, r3, [r1]
	  	  qy = v.y;
 8005e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e54:	49ad      	ldr	r1, [pc, #692]	; (800610c <main+0x3dc>)
 8005e56:	e9c1 2300 	strd	r2, r3, [r1]
	  	  qz = v.z;
 8005e5a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005e5e:	49ac      	ldr	r1, [pc, #688]	; (8006110 <main+0x3e0>)
 8005e60:	e9c1 2300 	strd	r2, r3, [r1]

	  	  v = bno055_getVectorLinearAccel();					//Linear Acc
 8005e64:	f7ff fb19 	bl	800549a <bno055_getVectorLinearAccel>
 8005e68:	eeb0 4b40 	vmov.f64	d4, d0
 8005e6c:	eeb0 5b41 	vmov.f64	d5, d1
 8005e70:	eeb0 6b42 	vmov.f64	d6, d2
 8005e74:	eeb0 7b43 	vmov.f64	d7, d3
 8005e78:	ed87 4b00 	vstr	d4, [r7]
 8005e7c:	ed87 5b02 	vstr	d5, [r7, #8]
 8005e80:	ed87 6b04 	vstr	d6, [r7, #16]
 8005e84:	ed87 7b06 	vstr	d7, [r7, #24]
	  	  ax = v.x;
 8005e88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e8c:	49a1      	ldr	r1, [pc, #644]	; (8006114 <main+0x3e4>)
 8005e8e:	e9c1 2300 	strd	r2, r3, [r1]
	  	  ay = v.y;
 8005e92:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005e96:	49a0      	ldr	r1, [pc, #640]	; (8006118 <main+0x3e8>)
 8005e98:	e9c1 2300 	strd	r2, r3, [r1]
	  	  az = v.z;
 8005e9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ea0:	499e      	ldr	r1, [pc, #632]	; (800611c <main+0x3ec>)
 8005ea2:	e9c1 2300 	strd	r2, r3, [r1]

	  	  v = bno055_getVectorGyroscope();						//Angular Velocity
 8005ea6:	f7ff fac5 	bl	8005434 <bno055_getVectorGyroscope>
 8005eaa:	eeb0 4b40 	vmov.f64	d4, d0
 8005eae:	eeb0 5b41 	vmov.f64	d5, d1
 8005eb2:	eeb0 6b42 	vmov.f64	d6, d2
 8005eb6:	eeb0 7b43 	vmov.f64	d7, d3
 8005eba:	ed87 4b00 	vstr	d4, [r7]
 8005ebe:	ed87 5b02 	vstr	d5, [r7, #8]
 8005ec2:	ed87 6b04 	vstr	d6, [r7, #16]
 8005ec6:	ed87 7b06 	vstr	d7, [r7, #24]
	  	  gx = v.x;
 8005eca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005ece:	4994      	ldr	r1, [pc, #592]	; (8006120 <main+0x3f0>)
 8005ed0:	e9c1 2300 	strd	r2, r3, [r1]
	  	  gy = v.y;
 8005ed4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005ed8:	4992      	ldr	r1, [pc, #584]	; (8006124 <main+0x3f4>)
 8005eda:	e9c1 2300 	strd	r2, r3, [r1]
	  	  gz = v.z;
 8005ede:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ee2:	4991      	ldr	r1, [pc, #580]	; (8006128 <main+0x3f8>)
 8005ee4:	e9c1 2300 	strd	r2, r3, [r1]

	  	  HAL_Delay(500);
 8005ee8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005eec:	f001 f902 	bl	80070f4 <HAL_Delay>

	  	  if (Micros()-TimeOutputLoop>2000){
 8005ef0:	f000 fb74 	bl	80065dc <_Z6Microsv>
 8005ef4:	4b8d      	ldr	r3, [pc, #564]	; (800612c <main+0x3fc>)
 8005ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005efa:	1a84      	subs	r4, r0, r2
 8005efc:	eb61 0503 	sbc.w	r5, r1, r3
 8005f00:	f240 73d1 	movw	r3, #2001	; 0x7d1
 8005f04:	429c      	cmp	r4, r3
 8005f06:	f175 0300 	sbcs.w	r3, r5, #0
 8005f0a:	bf2c      	ite	cs
 8005f0c:	2301      	movcs	r3, #1
 8005f0e:	2300      	movcc	r3, #0
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f43f af7d 	beq.w	8005e12 <main+0xe2>
	  			  TimeOutputLoop = Micros();
 8005f18:	f000 fb60 	bl	80065dc <_Z6Microsv>
 8005f1c:	4602      	mov	r2, r0
 8005f1e:	460b      	mov	r3, r1
 8005f20:	4982      	ldr	r1, [pc, #520]	; (800612c <main+0x3fc>)
 8005f22:	e9c1 2300 	strd	r2, r3, [r1]
	  	//			  v = bno055_getVectorGyroscope();		//Angular Velocity
	  	//	  			  gx = v.x;
	  	//	  			  gy = v.y;
	  	//	  			  gz = v.z;

	  			  arr1[indexs] = qx;
 8005f26:	4b78      	ldr	r3, [pc, #480]	; (8006108 <main+0x3d8>)
 8005f28:	ed93 7b00 	vldr	d7, [r3]
 8005f2c:	4b80      	ldr	r3, [pc, #512]	; (8006130 <main+0x400>)
 8005f2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f32:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f36:	497f      	ldr	r1, [pc, #508]	; (8006134 <main+0x404>)
 8005f38:	4613      	mov	r3, r2
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	440b      	add	r3, r1
 8005f3e:	edc3 7a00 	vstr	s15, [r3]
	  			  arr2[indexs] = qy;
 8005f42:	4b72      	ldr	r3, [pc, #456]	; (800610c <main+0x3dc>)
 8005f44:	ed93 7b00 	vldr	d7, [r3]
 8005f48:	4b79      	ldr	r3, [pc, #484]	; (8006130 <main+0x400>)
 8005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f4e:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f52:	4979      	ldr	r1, [pc, #484]	; (8006138 <main+0x408>)
 8005f54:	4613      	mov	r3, r2
 8005f56:	009b      	lsls	r3, r3, #2
 8005f58:	440b      	add	r3, r1
 8005f5a:	edc3 7a00 	vstr	s15, [r3]
	  			  arr3[indexs] = qz;
 8005f5e:	4b6c      	ldr	r3, [pc, #432]	; (8006110 <main+0x3e0>)
 8005f60:	ed93 7b00 	vldr	d7, [r3]
 8005f64:	4b72      	ldr	r3, [pc, #456]	; (8006130 <main+0x400>)
 8005f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6a:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f6e:	4973      	ldr	r1, [pc, #460]	; (800613c <main+0x40c>)
 8005f70:	4613      	mov	r3, r2
 8005f72:	009b      	lsls	r3, r3, #2
 8005f74:	440b      	add	r3, r1
 8005f76:	edc3 7a00 	vstr	s15, [r3]

	  			  arr4[indexs] = ax;
 8005f7a:	4b66      	ldr	r3, [pc, #408]	; (8006114 <main+0x3e4>)
 8005f7c:	ed93 7b00 	vldr	d7, [r3]
 8005f80:	4b6b      	ldr	r3, [pc, #428]	; (8006130 <main+0x400>)
 8005f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f86:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005f8a:	496d      	ldr	r1, [pc, #436]	; (8006140 <main+0x410>)
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	440b      	add	r3, r1
 8005f92:	edc3 7a00 	vstr	s15, [r3]
	  			  arr5[indexs] = ay;
 8005f96:	4b60      	ldr	r3, [pc, #384]	; (8006118 <main+0x3e8>)
 8005f98:	ed93 7b00 	vldr	d7, [r3]
 8005f9c:	4b64      	ldr	r3, [pc, #400]	; (8006130 <main+0x400>)
 8005f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa2:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005fa6:	4967      	ldr	r1, [pc, #412]	; (8006144 <main+0x414>)
 8005fa8:	4613      	mov	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	440b      	add	r3, r1
 8005fae:	edc3 7a00 	vstr	s15, [r3]
	  			  arr6[indexs] = az;
 8005fb2:	4b5a      	ldr	r3, [pc, #360]	; (800611c <main+0x3ec>)
 8005fb4:	ed93 7b00 	vldr	d7, [r3]
 8005fb8:	4b5d      	ldr	r3, [pc, #372]	; (8006130 <main+0x400>)
 8005fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fbe:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005fc2:	4961      	ldr	r1, [pc, #388]	; (8006148 <main+0x418>)
 8005fc4:	4613      	mov	r3, r2
 8005fc6:	009b      	lsls	r3, r3, #2
 8005fc8:	440b      	add	r3, r1
 8005fca:	edc3 7a00 	vstr	s15, [r3]

	  			  arr7[indexs] = gx;
 8005fce:	4b54      	ldr	r3, [pc, #336]	; (8006120 <main+0x3f0>)
 8005fd0:	ed93 7b00 	vldr	d7, [r3]
 8005fd4:	4b56      	ldr	r3, [pc, #344]	; (8006130 <main+0x400>)
 8005fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fda:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005fde:	495b      	ldr	r1, [pc, #364]	; (800614c <main+0x41c>)
 8005fe0:	4613      	mov	r3, r2
 8005fe2:	009b      	lsls	r3, r3, #2
 8005fe4:	440b      	add	r3, r1
 8005fe6:	edc3 7a00 	vstr	s15, [r3]
	  			  arr8[indexs] = gy;
 8005fea:	4b4e      	ldr	r3, [pc, #312]	; (8006124 <main+0x3f4>)
 8005fec:	ed93 7b00 	vldr	d7, [r3]
 8005ff0:	4b4f      	ldr	r3, [pc, #316]	; (8006130 <main+0x400>)
 8005ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff6:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8005ffa:	4955      	ldr	r1, [pc, #340]	; (8006150 <main+0x420>)
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	440b      	add	r3, r1
 8006002:	edc3 7a00 	vstr	s15, [r3]
	  			  arr9[indexs] = gz;
 8006006:	4b48      	ldr	r3, [pc, #288]	; (8006128 <main+0x3f8>)
 8006008:	ed93 7b00 	vldr	d7, [r3]
 800600c:	4b48      	ldr	r3, [pc, #288]	; (8006130 <main+0x400>)
 800600e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006012:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8006016:	494f      	ldr	r1, [pc, #316]	; (8006154 <main+0x424>)
 8006018:	4613      	mov	r3, r2
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	440b      	add	r3, r1
 800601e:	edc3 7a00 	vstr	s15, [r3]

	  			  m = size;
 8006022:	4b4d      	ldr	r3, [pc, #308]	; (8006158 <main+0x428>)
 8006024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006028:	494c      	ldr	r1, [pc, #304]	; (800615c <main+0x42c>)
 800602a:	e9c1 2300 	strd	r2, r3, [r1]

	  			  // Cov & Variance Quaternion
	  			  o_cov[0] = covariance(arr1, arr1, m);		// xx
 800602e:	4b4b      	ldr	r3, [pc, #300]	; (800615c <main+0x42c>)
 8006030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006034:	4613      	mov	r3, r2
 8006036:	461a      	mov	r2, r3
 8006038:	493e      	ldr	r1, [pc, #248]	; (8006134 <main+0x404>)
 800603a:	483e      	ldr	r0, [pc, #248]	; (8006134 <main+0x404>)
 800603c:	f000 fb18 	bl	8006670 <_Z10covariancePfS_i>
 8006040:	eef0 7a40 	vmov.f32	s15, s0
 8006044:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006048:	4b45      	ldr	r3, [pc, #276]	; (8006160 <main+0x430>)
 800604a:	ed83 7b00 	vstr	d7, [r3]
	  			  o_cov[4] = covariance(arr2, arr2, m);		// yy
 800604e:	4b43      	ldr	r3, [pc, #268]	; (800615c <main+0x42c>)
 8006050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006054:	4613      	mov	r3, r2
 8006056:	461a      	mov	r2, r3
 8006058:	4937      	ldr	r1, [pc, #220]	; (8006138 <main+0x408>)
 800605a:	4837      	ldr	r0, [pc, #220]	; (8006138 <main+0x408>)
 800605c:	f000 fb08 	bl	8006670 <_Z10covariancePfS_i>
 8006060:	eef0 7a40 	vmov.f32	s15, s0
 8006064:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006068:	4b3d      	ldr	r3, [pc, #244]	; (8006160 <main+0x430>)
 800606a:	ed83 7b08 	vstr	d7, [r3, #32]
	  			  o_cov[8] = covariance(arr3, arr3, m);		// zz
 800606e:	4b3b      	ldr	r3, [pc, #236]	; (800615c <main+0x42c>)
 8006070:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006074:	4613      	mov	r3, r2
 8006076:	461a      	mov	r2, r3
 8006078:	4930      	ldr	r1, [pc, #192]	; (800613c <main+0x40c>)
 800607a:	4830      	ldr	r0, [pc, #192]	; (800613c <main+0x40c>)
 800607c:	f000 faf8 	bl	8006670 <_Z10covariancePfS_i>
 8006080:	eef0 7a40 	vmov.f32	s15, s0
 8006084:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006088:	4b35      	ldr	r3, [pc, #212]	; (8006160 <main+0x430>)
 800608a:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	  			  o_cov[1] = covariance(arr1, arr2, m);		// xy
 800608e:	4b33      	ldr	r3, [pc, #204]	; (800615c <main+0x42c>)
 8006090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006094:	4613      	mov	r3, r2
 8006096:	461a      	mov	r2, r3
 8006098:	4927      	ldr	r1, [pc, #156]	; (8006138 <main+0x408>)
 800609a:	4826      	ldr	r0, [pc, #152]	; (8006134 <main+0x404>)
 800609c:	f000 fae8 	bl	8006670 <_Z10covariancePfS_i>
 80060a0:	eef0 7a40 	vmov.f32	s15, s0
 80060a4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80060a8:	4b2d      	ldr	r3, [pc, #180]	; (8006160 <main+0x430>)
 80060aa:	ed83 7b02 	vstr	d7, [r3, #8]
	  			  o_cov[3] = o_cov[1];
 80060ae:	4b2c      	ldr	r3, [pc, #176]	; (8006160 <main+0x430>)
 80060b0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80060b4:	492a      	ldr	r1, [pc, #168]	; (8006160 <main+0x430>)
 80060b6:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  			  o_cov[2] = covariance(arr1, arr3, m);		// xz
 80060ba:	4b28      	ldr	r3, [pc, #160]	; (800615c <main+0x42c>)
 80060bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c0:	4613      	mov	r3, r2
 80060c2:	461a      	mov	r2, r3
 80060c4:	491d      	ldr	r1, [pc, #116]	; (800613c <main+0x40c>)
 80060c6:	481b      	ldr	r0, [pc, #108]	; (8006134 <main+0x404>)
 80060c8:	f000 fad2 	bl	8006670 <_Z10covariancePfS_i>
 80060cc:	eef0 7a40 	vmov.f32	s15, s0
 80060d0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80060d4:	4b22      	ldr	r3, [pc, #136]	; (8006160 <main+0x430>)
 80060d6:	ed83 7b04 	vstr	d7, [r3, #16]
	  			  o_cov[6] = o_cov[2];
 80060da:	4b21      	ldr	r3, [pc, #132]	; (8006160 <main+0x430>)
 80060dc:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80060e0:	491f      	ldr	r1, [pc, #124]	; (8006160 <main+0x430>)
 80060e2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  			  o_cov[5] = covariance(arr2, arr3, m);		// yz
 80060e6:	4b1d      	ldr	r3, [pc, #116]	; (800615c <main+0x42c>)
 80060e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ec:	4613      	mov	r3, r2
 80060ee:	461a      	mov	r2, r3
 80060f0:	e038      	b.n	8006164 <main+0x434>
 80060f2:	bf00      	nop
 80060f4:	24000e64 	.word	0x24000e64
 80060f8:	2400025c 	.word	0x2400025c
 80060fc:	24000eb0 	.word	0x24000eb0
 8006100:	240003a0 	.word	0x240003a0
 8006104:	24000c60 	.word	0x24000c60
 8006108:	24000c68 	.word	0x24000c68
 800610c:	24000c70 	.word	0x24000c70
 8006110:	24000c78 	.word	0x24000c78
 8006114:	24000c80 	.word	0x24000c80
 8006118:	24000c88 	.word	0x24000c88
 800611c:	24000c90 	.word	0x24000c90
 8006120:	24000c98 	.word	0x24000c98
 8006124:	24000ca0 	.word	0x24000ca0
 8006128:	24000ca8 	.word	0x24000ca8
 800612c:	24000cb8 	.word	0x24000cb8
 8006130:	24000cc0 	.word	0x24000cc0
 8006134:	24000cd0 	.word	0x24000cd0
 8006138:	24000ce4 	.word	0x24000ce4
 800613c:	24000cf8 	.word	0x24000cf8
 8006140:	24000d0c 	.word	0x24000d0c
 8006144:	24000d20 	.word	0x24000d20
 8006148:	24000d34 	.word	0x24000d34
 800614c:	24000d48 	.word	0x24000d48
 8006150:	24000d5c 	.word	0x24000d5c
 8006154:	24000d70 	.word	0x24000d70
 8006158:	24000018 	.word	0x24000018
 800615c:	24000cc8 	.word	0x24000cc8
 8006160:	24000d88 	.word	0x24000d88
 8006164:	49b8      	ldr	r1, [pc, #736]	; (8006448 <main+0x718>)
 8006166:	48b9      	ldr	r0, [pc, #740]	; (800644c <main+0x71c>)
 8006168:	f000 fa82 	bl	8006670 <_Z10covariancePfS_i>
 800616c:	eef0 7a40 	vmov.f32	s15, s0
 8006170:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006174:	4bb6      	ldr	r3, [pc, #728]	; (8006450 <main+0x720>)
 8006176:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  			  o_cov[7] = o_cov[5];
 800617a:	4bb5      	ldr	r3, [pc, #724]	; (8006450 <main+0x720>)
 800617c:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006180:	49b3      	ldr	r1, [pc, #716]	; (8006450 <main+0x720>)
 8006182:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	  			  // Cov & Variance Linear Acc
	  			  a_cov[0] = covariance(arr4, arr4, m);		// xx
 8006186:	4bb3      	ldr	r3, [pc, #716]	; (8006454 <main+0x724>)
 8006188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800618c:	4613      	mov	r3, r2
 800618e:	461a      	mov	r2, r3
 8006190:	49b1      	ldr	r1, [pc, #708]	; (8006458 <main+0x728>)
 8006192:	48b1      	ldr	r0, [pc, #708]	; (8006458 <main+0x728>)
 8006194:	f000 fa6c 	bl	8006670 <_Z10covariancePfS_i>
 8006198:	eef0 7a40 	vmov.f32	s15, s0
 800619c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061a0:	4bae      	ldr	r3, [pc, #696]	; (800645c <main+0x72c>)
 80061a2:	ed83 7b00 	vstr	d7, [r3]
	  			  a_cov[4] = covariance(arr5, arr5, m);		// yy
 80061a6:	4bab      	ldr	r3, [pc, #684]	; (8006454 <main+0x724>)
 80061a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ac:	4613      	mov	r3, r2
 80061ae:	461a      	mov	r2, r3
 80061b0:	49ab      	ldr	r1, [pc, #684]	; (8006460 <main+0x730>)
 80061b2:	48ab      	ldr	r0, [pc, #684]	; (8006460 <main+0x730>)
 80061b4:	f000 fa5c 	bl	8006670 <_Z10covariancePfS_i>
 80061b8:	eef0 7a40 	vmov.f32	s15, s0
 80061bc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061c0:	4ba6      	ldr	r3, [pc, #664]	; (800645c <main+0x72c>)
 80061c2:	ed83 7b08 	vstr	d7, [r3, #32]
	  			  a_cov[8] = covariance(arr6, arr6, m);		// zz
 80061c6:	4ba3      	ldr	r3, [pc, #652]	; (8006454 <main+0x724>)
 80061c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061cc:	4613      	mov	r3, r2
 80061ce:	461a      	mov	r2, r3
 80061d0:	49a4      	ldr	r1, [pc, #656]	; (8006464 <main+0x734>)
 80061d2:	48a4      	ldr	r0, [pc, #656]	; (8006464 <main+0x734>)
 80061d4:	f000 fa4c 	bl	8006670 <_Z10covariancePfS_i>
 80061d8:	eef0 7a40 	vmov.f32	s15, s0
 80061dc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80061e0:	4b9e      	ldr	r3, [pc, #632]	; (800645c <main+0x72c>)
 80061e2:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	  			  a_cov[1] = covariance(arr4, arr5, m);		// xy
 80061e6:	4b9b      	ldr	r3, [pc, #620]	; (8006454 <main+0x724>)
 80061e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061ec:	4613      	mov	r3, r2
 80061ee:	461a      	mov	r2, r3
 80061f0:	499b      	ldr	r1, [pc, #620]	; (8006460 <main+0x730>)
 80061f2:	4899      	ldr	r0, [pc, #612]	; (8006458 <main+0x728>)
 80061f4:	f000 fa3c 	bl	8006670 <_Z10covariancePfS_i>
 80061f8:	eef0 7a40 	vmov.f32	s15, s0
 80061fc:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006200:	4b96      	ldr	r3, [pc, #600]	; (800645c <main+0x72c>)
 8006202:	ed83 7b02 	vstr	d7, [r3, #8]
	  			  a_cov[3] = a_cov[1];
 8006206:	4b95      	ldr	r3, [pc, #596]	; (800645c <main+0x72c>)
 8006208:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800620c:	4993      	ldr	r1, [pc, #588]	; (800645c <main+0x72c>)
 800620e:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  			  a_cov[2] = covariance(arr4, arr6, m);		// xz
 8006212:	4b90      	ldr	r3, [pc, #576]	; (8006454 <main+0x724>)
 8006214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006218:	4613      	mov	r3, r2
 800621a:	461a      	mov	r2, r3
 800621c:	4991      	ldr	r1, [pc, #580]	; (8006464 <main+0x734>)
 800621e:	488e      	ldr	r0, [pc, #568]	; (8006458 <main+0x728>)
 8006220:	f000 fa26 	bl	8006670 <_Z10covariancePfS_i>
 8006224:	eef0 7a40 	vmov.f32	s15, s0
 8006228:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800622c:	4b8b      	ldr	r3, [pc, #556]	; (800645c <main+0x72c>)
 800622e:	ed83 7b04 	vstr	d7, [r3, #16]
	  			  a_cov[6] = a_cov[2];
 8006232:	4b8a      	ldr	r3, [pc, #552]	; (800645c <main+0x72c>)
 8006234:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8006238:	4988      	ldr	r1, [pc, #544]	; (800645c <main+0x72c>)
 800623a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  			  a_cov[5] = covariance(arr5, arr6, m);		// yz
 800623e:	4b85      	ldr	r3, [pc, #532]	; (8006454 <main+0x724>)
 8006240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006244:	4613      	mov	r3, r2
 8006246:	461a      	mov	r2, r3
 8006248:	4986      	ldr	r1, [pc, #536]	; (8006464 <main+0x734>)
 800624a:	4885      	ldr	r0, [pc, #532]	; (8006460 <main+0x730>)
 800624c:	f000 fa10 	bl	8006670 <_Z10covariancePfS_i>
 8006250:	eef0 7a40 	vmov.f32	s15, s0
 8006254:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006258:	4b80      	ldr	r3, [pc, #512]	; (800645c <main+0x72c>)
 800625a:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  			  a_cov[7] = a_cov[5];
 800625e:	4b7f      	ldr	r3, [pc, #508]	; (800645c <main+0x72c>)
 8006260:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006264:	497d      	ldr	r1, [pc, #500]	; (800645c <main+0x72c>)
 8006266:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	  			  // Cov & Variance Angular Velocity
	  			  l_cov[0] = covariance(arr7, arr7, m);		// xx
 800626a:	4b7a      	ldr	r3, [pc, #488]	; (8006454 <main+0x724>)
 800626c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006270:	4613      	mov	r3, r2
 8006272:	461a      	mov	r2, r3
 8006274:	497c      	ldr	r1, [pc, #496]	; (8006468 <main+0x738>)
 8006276:	487c      	ldr	r0, [pc, #496]	; (8006468 <main+0x738>)
 8006278:	f000 f9fa 	bl	8006670 <_Z10covariancePfS_i>
 800627c:	eef0 7a40 	vmov.f32	s15, s0
 8006280:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006284:	4b79      	ldr	r3, [pc, #484]	; (800646c <main+0x73c>)
 8006286:	ed83 7b00 	vstr	d7, [r3]
	  			  l_cov[4] = covariance(arr8, arr8, m);		// yy
 800628a:	4b72      	ldr	r3, [pc, #456]	; (8006454 <main+0x724>)
 800628c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006290:	4613      	mov	r3, r2
 8006292:	461a      	mov	r2, r3
 8006294:	4976      	ldr	r1, [pc, #472]	; (8006470 <main+0x740>)
 8006296:	4876      	ldr	r0, [pc, #472]	; (8006470 <main+0x740>)
 8006298:	f000 f9ea 	bl	8006670 <_Z10covariancePfS_i>
 800629c:	eef0 7a40 	vmov.f32	s15, s0
 80062a0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062a4:	4b71      	ldr	r3, [pc, #452]	; (800646c <main+0x73c>)
 80062a6:	ed83 7b08 	vstr	d7, [r3, #32]
	  			  l_cov[8] = covariance(arr9, arr9, m);		// zz
 80062aa:	4b6a      	ldr	r3, [pc, #424]	; (8006454 <main+0x724>)
 80062ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062b0:	4613      	mov	r3, r2
 80062b2:	461a      	mov	r2, r3
 80062b4:	496f      	ldr	r1, [pc, #444]	; (8006474 <main+0x744>)
 80062b6:	486f      	ldr	r0, [pc, #444]	; (8006474 <main+0x744>)
 80062b8:	f000 f9da 	bl	8006670 <_Z10covariancePfS_i>
 80062bc:	eef0 7a40 	vmov.f32	s15, s0
 80062c0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062c4:	4b69      	ldr	r3, [pc, #420]	; (800646c <main+0x73c>)
 80062c6:	ed83 7b10 	vstr	d7, [r3, #64]	; 0x40

	  			  l_cov[1] = covariance(arr7, arr8, m);		// xy
 80062ca:	4b62      	ldr	r3, [pc, #392]	; (8006454 <main+0x724>)
 80062cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d0:	4613      	mov	r3, r2
 80062d2:	461a      	mov	r2, r3
 80062d4:	4966      	ldr	r1, [pc, #408]	; (8006470 <main+0x740>)
 80062d6:	4864      	ldr	r0, [pc, #400]	; (8006468 <main+0x738>)
 80062d8:	f000 f9ca 	bl	8006670 <_Z10covariancePfS_i>
 80062dc:	eef0 7a40 	vmov.f32	s15, s0
 80062e0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80062e4:	4b61      	ldr	r3, [pc, #388]	; (800646c <main+0x73c>)
 80062e6:	ed83 7b02 	vstr	d7, [r3, #8]
	  			  l_cov[3] = l_cov[1];
 80062ea:	4b60      	ldr	r3, [pc, #384]	; (800646c <main+0x73c>)
 80062ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80062f0:	495e      	ldr	r1, [pc, #376]	; (800646c <main+0x73c>)
 80062f2:	e9c1 2306 	strd	r2, r3, [r1, #24]
	  			  l_cov[2] = covariance(arr7, arr9, m);		// xz
 80062f6:	4b57      	ldr	r3, [pc, #348]	; (8006454 <main+0x724>)
 80062f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062fc:	4613      	mov	r3, r2
 80062fe:	461a      	mov	r2, r3
 8006300:	495c      	ldr	r1, [pc, #368]	; (8006474 <main+0x744>)
 8006302:	4859      	ldr	r0, [pc, #356]	; (8006468 <main+0x738>)
 8006304:	f000 f9b4 	bl	8006670 <_Z10covariancePfS_i>
 8006308:	eef0 7a40 	vmov.f32	s15, s0
 800630c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8006310:	4b56      	ldr	r3, [pc, #344]	; (800646c <main+0x73c>)
 8006312:	ed83 7b04 	vstr	d7, [r3, #16]
	  			  l_cov[6] = l_cov[2];
 8006316:	4b55      	ldr	r3, [pc, #340]	; (800646c <main+0x73c>)
 8006318:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800631c:	4953      	ldr	r1, [pc, #332]	; (800646c <main+0x73c>)
 800631e:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	  			  l_cov[5] = covariance(arr8, arr9, m);		// yz
 8006322:	4b4c      	ldr	r3, [pc, #304]	; (8006454 <main+0x724>)
 8006324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006328:	4613      	mov	r3, r2
 800632a:	461a      	mov	r2, r3
 800632c:	4951      	ldr	r1, [pc, #324]	; (8006474 <main+0x744>)
 800632e:	4850      	ldr	r0, [pc, #320]	; (8006470 <main+0x740>)
 8006330:	f000 f99e 	bl	8006670 <_Z10covariancePfS_i>
 8006334:	eef0 7a40 	vmov.f32	s15, s0
 8006338:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800633c:	4b4b      	ldr	r3, [pc, #300]	; (800646c <main+0x73c>)
 800633e:	ed83 7b0a 	vstr	d7, [r3, #40]	; 0x28
	  			  l_cov[7] = l_cov[5];
 8006342:	4b4a      	ldr	r3, [pc, #296]	; (800646c <main+0x73c>)
 8006344:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 8006348:	4948      	ldr	r1, [pc, #288]	; (800646c <main+0x73c>)
 800634a:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	  			  xicro.publish_fake_Imu_stm32((int32_t)Micros()/1000000.00 ,(uint32_t)Micros()/1000000.00  ,"from some board" ,qx ,qy ,qz ,qw ,o_cov,gx ,gy ,gz ,a_cov ,ax ,ay ,az ,l_cov);
 800634e:	f000 f945 	bl	80065dc <_Z6Microsv>
 8006352:	4602      	mov	r2, r0
 8006354:	460b      	mov	r3, r1
 8006356:	ee07 2a90 	vmov	s15, r2
 800635a:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800635e:	ed9f 5b38 	vldr	d5, [pc, #224]	; 8006440 <main+0x710>
 8006362:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006366:	eebd 8bc7 	vcvt.s32.f64	s16, d7
 800636a:	f000 f937 	bl	80065dc <_Z6Microsv>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	ee07 2a90 	vmov	s15, r2
 8006376:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 800637a:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8006440 <main+0x710>
 800637e:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006382:	eefc 8bc7 	vcvt.u32.f64	s17, d7
 8006386:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800638a:	4618      	mov	r0, r3
 800638c:	f00a fe86 	bl	801109c <_ZNSaIcEC1Ev>
 8006390:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8006394:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006398:	4937      	ldr	r1, [pc, #220]	; (8006478 <main+0x748>)
 800639a:	4618      	mov	r0, r3
 800639c:	f00b f8c8 	bl	8011530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 80063a0:	4b36      	ldr	r3, [pc, #216]	; (800647c <main+0x74c>)
 80063a2:	ed93 0b00 	vldr	d0, [r3]
 80063a6:	4b36      	ldr	r3, [pc, #216]	; (8006480 <main+0x750>)
 80063a8:	ed93 1b00 	vldr	d1, [r3]
 80063ac:	4b35      	ldr	r3, [pc, #212]	; (8006484 <main+0x754>)
 80063ae:	ed93 2b00 	vldr	d2, [r3]
 80063b2:	4b35      	ldr	r3, [pc, #212]	; (8006488 <main+0x758>)
 80063b4:	ed93 3b00 	vldr	d3, [r3]
 80063b8:	4b34      	ldr	r3, [pc, #208]	; (800648c <main+0x75c>)
 80063ba:	ed93 4b00 	vldr	d4, [r3]
 80063be:	4b34      	ldr	r3, [pc, #208]	; (8006490 <main+0x760>)
 80063c0:	ed93 5b00 	vldr	d5, [r3]
 80063c4:	4b33      	ldr	r3, [pc, #204]	; (8006494 <main+0x764>)
 80063c6:	ed93 6b00 	vldr	d6, [r3]
 80063ca:	4b33      	ldr	r3, [pc, #204]	; (8006498 <main+0x768>)
 80063cc:	ed93 7b00 	vldr	d7, [r3]
 80063d0:	4b32      	ldr	r3, [pc, #200]	; (800649c <main+0x76c>)
 80063d2:	e9d3 bc00 	ldrd	fp, ip, [r3]
 80063d6:	4932      	ldr	r1, [pc, #200]	; (80064a0 <main+0x770>)
 80063d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80063dc:	f107 0628 	add.w	r6, r7, #40	; 0x28
 80063e0:	4b22      	ldr	r3, [pc, #136]	; (800646c <main+0x73c>)
 80063e2:	9306      	str	r3, [sp, #24]
 80063e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063e8:	e9cd bc02 	strd	fp, ip, [sp, #8]
 80063ec:	4b1b      	ldr	r3, [pc, #108]	; (800645c <main+0x72c>)
 80063ee:	9301      	str	r3, [sp, #4]
 80063f0:	4b17      	ldr	r3, [pc, #92]	; (8006450 <main+0x720>)
 80063f2:	9300      	str	r3, [sp, #0]
 80063f4:	4633      	mov	r3, r6
 80063f6:	ee18 2a90 	vmov	r2, s17
 80063fa:	ee18 1a10 	vmov	r1, s16
 80063fe:	4829      	ldr	r0, [pc, #164]	; (80064a4 <main+0x774>)
 8006400:	f7fb fa5f 	bl	80018c2 <_ZN5Xicro22publish_fake_Imu_stm32ElmNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEddddPddddS6_dddS6_>
 8006404:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006408:	4618      	mov	r0, r3
 800640a:	f00a ff24 	bl	8011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800640e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8006412:	4618      	mov	r0, r3
 8006414:	f00a fe43 	bl	801109e <_ZNSaIcED1Ev>

	  			  indexs = (indexs+1)%size;
 8006418:	4b23      	ldr	r3, [pc, #140]	; (80064a8 <main+0x778>)
 800641a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800641e:	f112 0801 	adds.w	r8, r2, #1
 8006422:	f143 0900 	adc.w	r9, r3, #0
 8006426:	4b21      	ldr	r3, [pc, #132]	; (80064ac <main+0x77c>)
 8006428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800642c:	4640      	mov	r0, r8
 800642e:	4649      	mov	r1, r9
 8006430:	f7f9 ffae 	bl	8000390 <__aeabi_uldivmod>
 8006434:	491c      	ldr	r1, [pc, #112]	; (80064a8 <main+0x778>)
 8006436:	e9c1 2300 	strd	r2, r3, [r1]

	  		  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
 800643a:	e4ea      	b.n	8005e12 <main+0xe2>
 800643c:	f3af 8000 	nop.w
 8006440:	00000000 	.word	0x00000000
 8006444:	412e8480 	.word	0x412e8480
 8006448:	24000cf8 	.word	0x24000cf8
 800644c:	24000ce4 	.word	0x24000ce4
 8006450:	24000d88 	.word	0x24000d88
 8006454:	24000cc8 	.word	0x24000cc8
 8006458:	24000d0c 	.word	0x24000d0c
 800645c:	24000dd0 	.word	0x24000dd0
 8006460:	24000d20 	.word	0x24000d20
 8006464:	24000d34 	.word	0x24000d34
 8006468:	24000d48 	.word	0x24000d48
 800646c:	24000e18 	.word	0x24000e18
 8006470:	24000d5c 	.word	0x24000d5c
 8006474:	24000d70 	.word	0x24000d70
 8006478:	08012bb8 	.word	0x08012bb8
 800647c:	24000c68 	.word	0x24000c68
 8006480:	24000c70 	.word	0x24000c70
 8006484:	24000c78 	.word	0x24000c78
 8006488:	24000c60 	.word	0x24000c60
 800648c:	24000c98 	.word	0x24000c98
 8006490:	24000ca0 	.word	0x24000ca0
 8006494:	24000ca8 	.word	0x24000ca8
 8006498:	24000c80 	.word	0x24000c80
 800649c:	24000c88 	.word	0x24000c88
 80064a0:	24000c90 	.word	0x24000c90
 80064a4:	240003a0 	.word	0x240003a0
 80064a8:	24000cc0 	.word	0x24000cc0
 80064ac:	24000018 	.word	0x24000018

080064b0 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b09c      	sub	sp, #112	; 0x70
 80064b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80064b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064ba:	224c      	movs	r2, #76	; 0x4c
 80064bc:	2100      	movs	r1, #0
 80064be:	4618      	mov	r0, r3
 80064c0:	f00b f954 	bl	801176c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80064c4:	1d3b      	adds	r3, r7, #4
 80064c6:	2220      	movs	r2, #32
 80064c8:	2100      	movs	r1, #0
 80064ca:	4618      	mov	r0, r3
 80064cc:	f00b f94e 	bl	801176c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80064d0:	2004      	movs	r0, #4
 80064d2:	f005 fa8d 	bl	800b9f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80064d6:	2300      	movs	r3, #0
 80064d8:	603b      	str	r3, [r7, #0]
 80064da:	4b3d      	ldr	r3, [pc, #244]	; (80065d0 <_Z18SystemClock_Configv+0x120>)
 80064dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064de:	4a3c      	ldr	r2, [pc, #240]	; (80065d0 <_Z18SystemClock_Configv+0x120>)
 80064e0:	f023 0301 	bic.w	r3, r3, #1
 80064e4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80064e6:	4b3a      	ldr	r3, [pc, #232]	; (80065d0 <_Z18SystemClock_Configv+0x120>)
 80064e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ea:	f003 0301 	and.w	r3, r3, #1
 80064ee:	603b      	str	r3, [r7, #0]
 80064f0:	4b38      	ldr	r3, [pc, #224]	; (80065d4 <_Z18SystemClock_Configv+0x124>)
 80064f2:	699b      	ldr	r3, [r3, #24]
 80064f4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80064f8:	4a36      	ldr	r2, [pc, #216]	; (80065d4 <_Z18SystemClock_Configv+0x124>)
 80064fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80064fe:	6193      	str	r3, [r2, #24]
 8006500:	4b34      	ldr	r3, [pc, #208]	; (80065d4 <_Z18SystemClock_Configv+0x124>)
 8006502:	699b      	ldr	r3, [r3, #24]
 8006504:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006508:	603b      	str	r3, [r7, #0]
 800650a:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800650c:	4b31      	ldr	r3, [pc, #196]	; (80065d4 <_Z18SystemClock_Configv+0x124>)
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006518:	bf14      	ite	ne
 800651a:	2301      	movne	r3, #1
 800651c:	2300      	moveq	r3, #0
 800651e:	b2db      	uxtb	r3, r3
 8006520:	2b00      	cmp	r3, #0
 8006522:	d000      	beq.n	8006526 <_Z18SystemClock_Configv+0x76>
 8006524:	e7f2      	b.n	800650c <_Z18SystemClock_Configv+0x5c>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8006526:	4b2c      	ldr	r3, [pc, #176]	; (80065d8 <_Z18SystemClock_Configv+0x128>)
 8006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800652a:	f023 0303 	bic.w	r3, r3, #3
 800652e:	4a2a      	ldr	r2, [pc, #168]	; (80065d8 <_Z18SystemClock_Configv+0x128>)
 8006530:	f043 0302 	orr.w	r3, r3, #2
 8006534:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006536:	2301      	movs	r3, #1
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800653a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800653e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006540:	2302      	movs	r3, #2
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006544:	2302      	movs	r3, #2
 8006546:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8006548:	2301      	movs	r3, #1
 800654a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 25;
 800654c:	2319      	movs	r3, #25
 800654e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8006550:	2302      	movs	r3, #2
 8006552:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8006554:	2302      	movs	r3, #2
 8006556:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8006558:	2302      	movs	r3, #2
 800655a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800655c:	230c      	movs	r3, #12
 800655e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8006560:	2300      	movs	r3, #0
 8006562:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8006564:	2300      	movs	r3, #0
 8006566:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006568:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800656c:	4618      	mov	r0, r3
 800656e:	f005 faa9 	bl	800bac4 <HAL_RCC_OscConfig>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	bf14      	ite	ne
 8006578:	2301      	movne	r3, #1
 800657a:	2300      	moveq	r3, #0
 800657c:	b2db      	uxtb	r3, r3
 800657e:	2b00      	cmp	r3, #0
 8006580:	d001      	beq.n	8006586 <_Z18SystemClock_Configv+0xd6>
  {
    Error_Handler();
 8006582:	f000 f8dd 	bl	8006740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006586:	233f      	movs	r3, #63	; 0x3f
 8006588:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800658a:	2303      	movs	r3, #3
 800658c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800658e:	2300      	movs	r3, #0
 8006590:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8006592:	2300      	movs	r3, #0
 8006594:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8006596:	2340      	movs	r3, #64	; 0x40
 8006598:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 800659a:	2340      	movs	r3, #64	; 0x40
 800659c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 800659e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80065a2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80065a4:	2340      	movs	r3, #64	; 0x40
 80065a6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80065a8:	1d3b      	adds	r3, r7, #4
 80065aa:	2102      	movs	r1, #2
 80065ac:	4618      	mov	r0, r3
 80065ae:	f005 feb7 	bl	800c320 <HAL_RCC_ClockConfig>
 80065b2:	4603      	mov	r3, r0
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	bf14      	ite	ne
 80065b8:	2301      	movne	r3, #1
 80065ba:	2300      	moveq	r3, #0
 80065bc:	b2db      	uxtb	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d001      	beq.n	80065c6 <_Z18SystemClock_Configv+0x116>
  {
    Error_Handler();
 80065c2:	f000 f8bd 	bl	8006740 <Error_Handler>
  }
}
 80065c6:	bf00      	nop
 80065c8:	3770      	adds	r7, #112	; 0x70
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	58000400 	.word	0x58000400
 80065d4:	58024800 	.word	0x58024800
 80065d8:	58024400 	.word	0x58024400

080065dc <_Z6Microsv>:

/* USER CODE BEGIN 4 */

uint64_t Micros(){
 80065dc:	b4b0      	push	{r4, r5, r7}
 80065de:	af00      	add	r7, sp, #0
	return _micro + htim1.Instance->CNT;
 80065e0:	4b09      	ldr	r3, [pc, #36]	; (8006608 <_Z6Microsv+0x2c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	2200      	movs	r2, #0
 80065e8:	4618      	mov	r0, r3
 80065ea:	4611      	mov	r1, r2
 80065ec:	4b07      	ldr	r3, [pc, #28]	; (800660c <_Z6Microsv+0x30>)
 80065ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065f2:	1884      	adds	r4, r0, r2
 80065f4:	eb41 0503 	adc.w	r5, r1, r3
 80065f8:	4622      	mov	r2, r4
 80065fa:	462b      	mov	r3, r5
}
 80065fc:	4610      	mov	r0, r2
 80065fe:	4619      	mov	r1, r3
 8006600:	46bd      	mov	sp, r7
 8006602:	bcb0      	pop	{r4, r5, r7}
 8006604:	4770      	bx	lr
 8006606:	bf00      	nop
 8006608:	24000e64 	.word	0x24000e64
 800660c:	24000cb0 	.word	0x24000cb0

08006610 <_Z4meanPfi>:

float mean(float arr[], int n)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	6039      	str	r1, [r7, #0]
    float sum = 0;
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	60fb      	str	r3, [r7, #12]
    for (int i = 0; i < n; i++)
 8006620:	2300      	movs	r3, #0
 8006622:	60bb      	str	r3, [r7, #8]
 8006624:	68ba      	ldr	r2, [r7, #8]
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	429a      	cmp	r2, r3
 800662a:	da0f      	bge.n	800664c <_Z4meanPfi+0x3c>
        sum = sum + arr[i];
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	009b      	lsls	r3, r3, #2
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	4413      	add	r3, r2
 8006634:	edd3 7a00 	vldr	s15, [r3]
 8006638:	ed97 7a03 	vldr	s14, [r7, #12]
 800663c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006640:	edc7 7a03 	vstr	s15, [r7, #12]
    for (int i = 0; i < n; i++)
 8006644:	68bb      	ldr	r3, [r7, #8]
 8006646:	3301      	adds	r3, #1
 8006648:	60bb      	str	r3, [r7, #8]
 800664a:	e7eb      	b.n	8006624 <_Z4meanPfi+0x14>
    return sum / n;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	ee07 3a90 	vmov	s15, r3
 8006652:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006656:	ed97 7a03 	vldr	s14, [r7, #12]
 800665a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800665e:	eef0 7a66 	vmov.f32	s15, s13
}
 8006662:	eeb0 0a67 	vmov.f32	s0, s15
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <_Z10covariancePfS_i>:

float covariance(float arr1[], float arr2[], int n)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b088      	sub	sp, #32
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
    float sum = 0;
 800667c:	f04f 0300 	mov.w	r3, #0
 8006680:	61fb      	str	r3, [r7, #28]
    float mean_arr1 = mean(arr1, n);
 8006682:	6879      	ldr	r1, [r7, #4]
 8006684:	68f8      	ldr	r0, [r7, #12]
 8006686:	f7ff ffc3 	bl	8006610 <_Z4meanPfi>
 800668a:	ed87 0a05 	vstr	s0, [r7, #20]
    float mean_arr2 = mean(arr2, n);
 800668e:	6879      	ldr	r1, [r7, #4]
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f7ff ffbd 	bl	8006610 <_Z4meanPfi>
 8006696:	ed87 0a04 	vstr	s0, [r7, #16]
    for (int i = 0; i < n; i++)
 800669a:	2300      	movs	r3, #0
 800669c:	61bb      	str	r3, [r7, #24]
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	da1f      	bge.n	80066e6 <_Z10covariancePfS_i+0x76>
        sum = sum + (arr1[i] - mean_arr1) * (arr2[i] - mean_arr2);
 80066a6:	69bb      	ldr	r3, [r7, #24]
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4413      	add	r3, r2
 80066ae:	ed93 7a00 	vldr	s14, [r3]
 80066b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80066b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	009b      	lsls	r3, r3, #2
 80066be:	68ba      	ldr	r2, [r7, #8]
 80066c0:	4413      	add	r3, r2
 80066c2:	edd3 6a00 	vldr	s13, [r3]
 80066c6:	edd7 7a04 	vldr	s15, [r7, #16]
 80066ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80066ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d2:	ed97 7a07 	vldr	s14, [r7, #28]
 80066d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80066da:	edc7 7a07 	vstr	s15, [r7, #28]
    for (int i = 0; i < n; i++)
 80066de:	69bb      	ldr	r3, [r7, #24]
 80066e0:	3301      	adds	r3, #1
 80066e2:	61bb      	str	r3, [r7, #24]
 80066e4:	e7db      	b.n	800669e <_Z10covariancePfS_i+0x2e>
    return sum / (n - 1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3b01      	subs	r3, #1
 80066ea:	ee07 3a90 	vmov	s15, r3
 80066ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80066f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80066f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80066fa:	eef0 7a66 	vmov.f32	s15, s13
}
 80066fe:	eeb0 0a67 	vmov.f32	s0, s15
 8006702:	3720      	adds	r7, #32
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}

08006708 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006708:	b4b0      	push	{r4, r5, r7}
 800670a:	b083      	sub	sp, #12
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
	if (htim == &htim1)
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8006714:	4293      	cmp	r3, r2
 8006716:	d10a      	bne.n	800672e <HAL_TIM_PeriodElapsedCallback+0x26>
	{
		_micro += 65535;
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800671a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800671e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006722:	1854      	adds	r4, r2, r1
 8006724:	f143 0500 	adc.w	r5, r3, #0
 8006728:	4b04      	ldr	r3, [pc, #16]	; (800673c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800672a:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800672e:	bf00      	nop
 8006730:	370c      	adds	r7, #12
 8006732:	46bd      	mov	sp, r7
 8006734:	bcb0      	pop	{r4, r5, r7}
 8006736:	4770      	bx	lr
 8006738:	24000e64 	.word	0x24000e64
 800673c:	24000cb0 	.word	0x24000cb0

08006740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006740:	b480      	push	{r7}
 8006742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8006744:	b672      	cpsid	i
}
 8006746:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8006748:	e7fe      	b.n	8006748 <Error_Handler+0x8>

0800674a <_ZN5XicroUt_Ut_D1Ev>:
        struct{
 800674a:	b580      	push	{r7, lr}
 800674c:	b082      	sub	sp, #8
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	3308      	adds	r3, #8
 8006756:	4618      	mov	r0, r3
 8006758:	f00a fd7d 	bl	8011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4618      	mov	r0, r3
 8006760:	3708      	adds	r7, #8
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}

08006766 <_ZN5XicroUt_D1Ev>:
        struct{
 8006766:	b580      	push	{r7, lr}
 8006768:	b082      	sub	sp, #8
 800676a:	af00      	add	r7, sp, #0
 800676c:	6078      	str	r0, [r7, #4]
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	33d8      	adds	r3, #216	; 0xd8
 8006772:	4618      	mov	r0, r3
 8006774:	f7ff ffe9 	bl	800674a <_ZN5XicroUt_Ut_D1Ev>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4618      	mov	r0, r3
 800677c:	3708      	adds	r7, #8
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <_ZN5XicroUt0_Ut_D1Ev>:
        struct{
 8006782:	b580      	push	{r7, lr}
 8006784:	b082      	sub	sp, #8
 8006786:	af00      	add	r7, sp, #0
 8006788:	6078      	str	r0, [r7, #4]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	3308      	adds	r3, #8
 800678e:	4618      	mov	r0, r3
 8006790:	f00a fd61 	bl	8011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	4618      	mov	r0, r3
 8006798:	3708      	adds	r7, #8
 800679a:	46bd      	mov	sp, r7
 800679c:	bd80      	pop	{r7, pc}

0800679e <_ZN5XicroUt0_D1Ev>:
        struct{
 800679e:	b580      	push	{r7, lr}
 80067a0:	b082      	sub	sp, #8
 80067a2:	af00      	add	r7, sp, #0
 80067a4:	6078      	str	r0, [r7, #4]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	33d8      	adds	r3, #216	; 0xd8
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7ff ffe9 	bl	8006782 <_ZN5XicroUt0_Ut_D1Ev>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	4618      	mov	r0, r3
 80067b4:	3708      	adds	r7, #8
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <_ZN5XicroD1Ev>:
class Xicro{
 80067ba:	b580      	push	{r7, lr}
 80067bc:	b082      	sub	sp, #8
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
 80067c8:	4618      	mov	r0, r3
 80067ca:	f7ff ffe8 	bl	800679e <_ZN5XicroUt0_D1Ev>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	f503 731c 	add.w	r3, r3, #624	; 0x270
 80067d4:	4618      	mov	r0, r3
 80067d6:	f00a fd3e 	bl	8011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff ffc2 	bl	8006766 <_ZN5XicroUt_D1Ev>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4618      	mov	r0, r3
 80067e6:	3708      	adds	r7, #8
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}

080067ec <_Z41__static_initialization_and_destruction_0ii>:
  {
  }
  /* USER CODE END Error_Handler_Debug */
}
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
 80067f4:	6039      	str	r1, [r7, #0]
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2b01      	cmp	r3, #1
 80067fa:	d107      	bne.n	800680c <_Z41__static_initialization_and_destruction_0ii+0x20>
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006802:	4293      	cmp	r3, r2
 8006804:	d102      	bne.n	800680c <_Z41__static_initialization_and_destruction_0ii+0x20>
Xicro xicro;
 8006806:	4809      	ldr	r0, [pc, #36]	; (800682c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8006808:	f7fa f97c 	bl	8000b04 <_ZN5XicroC1Ev>
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d107      	bne.n	8006822 <_Z41__static_initialization_and_destruction_0ii+0x36>
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006818:	4293      	cmp	r3, r2
 800681a:	d102      	bne.n	8006822 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800681c:	4803      	ldr	r0, [pc, #12]	; (800682c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800681e:	f7ff ffcc 	bl	80067ba <_ZN5XicroD1Ev>
}
 8006822:	bf00      	nop
 8006824:	3708      	adds	r7, #8
 8006826:	46bd      	mov	sp, r7
 8006828:	bd80      	pop	{r7, pc}
 800682a:	bf00      	nop
 800682c:	240003a0 	.word	0x240003a0

08006830 <_GLOBAL__sub_I__bno055_i2c_port>:
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
 8006834:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006838:	2001      	movs	r0, #1
 800683a:	f7ff ffd7 	bl	80067ec <_Z41__static_initialization_and_destruction_0ii>
 800683e:	bd80      	pop	{r7, pc}

08006840 <_GLOBAL__sub_D__bno055_i2c_port>:
 8006840:	b580      	push	{r7, lr}
 8006842:	af00      	add	r7, sp, #0
 8006844:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8006848:	2000      	movs	r0, #0
 800684a:	f7ff ffcf 	bl	80067ec <_Z41__static_initialization_and_destruction_0ii>
 800684e:	bd80      	pop	{r7, pc}

08006850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006850:	b480      	push	{r7}
 8006852:	b083      	sub	sp, #12
 8006854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006856:	4b0a      	ldr	r3, [pc, #40]	; (8006880 <HAL_MspInit+0x30>)
 8006858:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800685c:	4a08      	ldr	r2, [pc, #32]	; (8006880 <HAL_MspInit+0x30>)
 800685e:	f043 0302 	orr.w	r3, r3, #2
 8006862:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006866:	4b06      	ldr	r3, [pc, #24]	; (8006880 <HAL_MspInit+0x30>)
 8006868:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	607b      	str	r3, [r7, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006874:	bf00      	nop
 8006876:	370c      	adds	r7, #12
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	58024400 	.word	0x58024400

08006884 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006884:	b480      	push	{r7}
 8006886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006888:	e7fe      	b.n	8006888 <NMI_Handler+0x4>

0800688a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800688a:	b480      	push	{r7}
 800688c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800688e:	e7fe      	b.n	800688e <HardFault_Handler+0x4>

08006890 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006894:	e7fe      	b.n	8006894 <MemManage_Handler+0x4>

08006896 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006896:	b480      	push	{r7}
 8006898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800689a:	e7fe      	b.n	800689a <BusFault_Handler+0x4>

0800689c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800689c:	b480      	push	{r7}
 800689e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80068a0:	e7fe      	b.n	80068a0 <UsageFault_Handler+0x4>

080068a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80068a2:	b480      	push	{r7}
 80068a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80068a6:	bf00      	nop
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80068b0:	b480      	push	{r7}
 80068b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80068b4:	bf00      	nop
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80068be:	b480      	push	{r7}
 80068c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80068c2:	bf00      	nop
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80068cc:	b580      	push	{r7, lr}
 80068ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80068d0:	f000 fbf0 	bl	80070b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80068d4:	bf00      	nop
 80068d6:	bd80      	pop	{r7, pc}

080068d8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80068dc:	4802      	ldr	r0, [pc, #8]	; (80068e8 <DMA1_Stream0_IRQHandler+0x10>)
 80068de:	f002 f887 	bl	80089f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80068e2:	bf00      	nop
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	24000f40 	.word	0x24000f40

080068ec <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80068f0:	4802      	ldr	r0, [pc, #8]	; (80068fc <DMA1_Stream1_IRQHandler+0x10>)
 80068f2:	f002 f87d 	bl	80089f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80068f6:	bf00      	nop
 80068f8:	bd80      	pop	{r7, pc}
 80068fa:	bf00      	nop
 80068fc:	240002a8 	.word	0x240002a8

08006900 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8006904:	4802      	ldr	r0, [pc, #8]	; (8006910 <DMA1_Stream2_IRQHandler+0x10>)
 8006906:	f002 f873 	bl	80089f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800690a:	bf00      	nop
 800690c:	bd80      	pop	{r7, pc}
 800690e:	bf00      	nop
 8006910:	24000320 	.word	0x24000320

08006914 <TIM1_BRK_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt.
  */
void TIM1_BRK_IRQHandler(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_IRQn 0 */

  /* USER CODE END TIM1_BRK_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006918:	4802      	ldr	r0, [pc, #8]	; (8006924 <TIM1_BRK_IRQHandler+0x10>)
 800691a:	f007 fcc5 	bl	800e2a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_IRQn 1 */

  /* USER CODE END TIM1_BRK_IRQn 1 */
}
 800691e:	bf00      	nop
 8006920:	bd80      	pop	{r7, pc}
 8006922:	bf00      	nop
 8006924:	24000e64 	.word	0x24000e64

08006928 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800692c:	4802      	ldr	r0, [pc, #8]	; (8006938 <TIM1_UP_IRQHandler+0x10>)
 800692e:	f007 fcbb 	bl	800e2a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8006932:	bf00      	nop
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	24000e64 	.word	0x24000e64

0800693c <TIM1_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts.
  */
void TIM1_TRG_COM_IRQHandler(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006940:	4802      	ldr	r0, [pc, #8]	; (800694c <TIM1_TRG_COM_IRQHandler+0x10>)
 8006942:	f007 fcb1 	bl	800e2a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_IRQn 1 */
}
 8006946:	bf00      	nop
 8006948:	bd80      	pop	{r7, pc}
 800694a:	bf00      	nop
 800694c:	24000e64 	.word	0x24000e64

08006950 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8006950:	b580      	push	{r7, lr}
 8006952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8006954:	4802      	ldr	r0, [pc, #8]	; (8006960 <TIM1_CC_IRQHandler+0x10>)
 8006956:	f007 fca7 	bl	800e2a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800695a:	bf00      	nop
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	24000e64 	.word	0x24000e64

08006964 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006968:	4802      	ldr	r0, [pc, #8]	; (8006974 <USART3_IRQHandler+0x10>)
 800696a:	f008 f9fd 	bl	800ed68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800696e:	bf00      	nop
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	24000eb0 	.word	0x24000eb0

08006978 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	return 1;
 800697c:	2301      	movs	r3, #1
}
 800697e:	4618      	mov	r0, r3
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr

08006988 <_kill>:

int _kill(int pid, int sig)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b082      	sub	sp, #8
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
 8006990:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006992:	f00a fe89 	bl	80116a8 <__errno>
 8006996:	4603      	mov	r3, r0
 8006998:	2216      	movs	r2, #22
 800699a:	601a      	str	r2, [r3, #0]
	return -1;
 800699c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80069a0:	4618      	mov	r0, r3
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}

080069a8 <_exit>:

void _exit (int status)
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b082      	sub	sp, #8
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80069b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f7ff ffe7 	bl	8006988 <_kill>
	while (1) {}		/* Make sure we hang here */
 80069ba:	e7fe      	b.n	80069ba <_exit+0x12>

080069bc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b086      	sub	sp, #24
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069c8:	2300      	movs	r3, #0
 80069ca:	617b      	str	r3, [r7, #20]
 80069cc:	e00a      	b.n	80069e4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80069ce:	f3af 8000 	nop.w
 80069d2:	4601      	mov	r1, r0
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	1c5a      	adds	r2, r3, #1
 80069d8:	60ba      	str	r2, [r7, #8]
 80069da:	b2ca      	uxtb	r2, r1
 80069dc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	3301      	adds	r3, #1
 80069e2:	617b      	str	r3, [r7, #20]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	429a      	cmp	r2, r3
 80069ea:	dbf0      	blt.n	80069ce <_read+0x12>
	}

return len;
 80069ec:	687b      	ldr	r3, [r7, #4]
}
 80069ee:	4618      	mov	r0, r3
 80069f0:	3718      	adds	r7, #24
 80069f2:	46bd      	mov	sp, r7
 80069f4:	bd80      	pop	{r7, pc}

080069f6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80069f6:	b580      	push	{r7, lr}
 80069f8:	b086      	sub	sp, #24
 80069fa:	af00      	add	r7, sp, #0
 80069fc:	60f8      	str	r0, [r7, #12]
 80069fe:	60b9      	str	r1, [r7, #8]
 8006a00:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	e009      	b.n	8006a1c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006a08:	68bb      	ldr	r3, [r7, #8]
 8006a0a:	1c5a      	adds	r2, r3, #1
 8006a0c:	60ba      	str	r2, [r7, #8]
 8006a0e:	781b      	ldrb	r3, [r3, #0]
 8006a10:	4618      	mov	r0, r3
 8006a12:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	3301      	adds	r3, #1
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	697a      	ldr	r2, [r7, #20]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	dbf1      	blt.n	8006a08 <_write+0x12>
	}
	return len;
 8006a24:	687b      	ldr	r3, [r7, #4]
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3718      	adds	r7, #24
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <_close>:

int _close(int file)
{
 8006a2e:	b480      	push	{r7}
 8006a30:	b083      	sub	sp, #12
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	6078      	str	r0, [r7, #4]
	return -1;
 8006a36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	370c      	adds	r7, #12
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr

08006a46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006a46:	b480      	push	{r7}
 8006a48:	b083      	sub	sp, #12
 8006a4a:	af00      	add	r7, sp, #0
 8006a4c:	6078      	str	r0, [r7, #4]
 8006a4e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006a56:	605a      	str	r2, [r3, #4]
	return 0;
 8006a58:	2300      	movs	r3, #0
}
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr

08006a66 <_isatty>:

int _isatty(int file)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b083      	sub	sp, #12
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
	return 1;
 8006a6e:	2301      	movs	r3, #1
}
 8006a70:	4618      	mov	r0, r3
 8006a72:	370c      	adds	r7, #12
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]
	return 0;
 8006a88:	2300      	movs	r3, #0
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3714      	adds	r7, #20
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a94:	4770      	bx	lr
	...

08006a98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b086      	sub	sp, #24
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8006aa0:	4a14      	ldr	r2, [pc, #80]	; (8006af4 <_sbrk+0x5c>)
 8006aa2:	4b15      	ldr	r3, [pc, #84]	; (8006af8 <_sbrk+0x60>)
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006aac:	4b13      	ldr	r3, [pc, #76]	; (8006afc <_sbrk+0x64>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d102      	bne.n	8006aba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006ab4:	4b11      	ldr	r3, [pc, #68]	; (8006afc <_sbrk+0x64>)
 8006ab6:	4a12      	ldr	r2, [pc, #72]	; (8006b00 <_sbrk+0x68>)
 8006ab8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006aba:	4b10      	ldr	r3, [pc, #64]	; (8006afc <_sbrk+0x64>)
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	4413      	add	r3, r2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	429a      	cmp	r2, r3
 8006ac6:	d207      	bcs.n	8006ad8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006ac8:	f00a fdee 	bl	80116a8 <__errno>
 8006acc:	4603      	mov	r3, r0
 8006ace:	220c      	movs	r2, #12
 8006ad0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8006ad2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006ad6:	e009      	b.n	8006aec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006ad8:	4b08      	ldr	r3, [pc, #32]	; (8006afc <_sbrk+0x64>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8006ade:	4b07      	ldr	r3, [pc, #28]	; (8006afc <_sbrk+0x64>)
 8006ae0:	681a      	ldr	r2, [r3, #0]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4413      	add	r3, r2
 8006ae6:	4a05      	ldr	r2, [pc, #20]	; (8006afc <_sbrk+0x64>)
 8006ae8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006aea:	68fb      	ldr	r3, [r7, #12]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3718      	adds	r7, #24
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}
 8006af4:	24080000 	.word	0x24080000
 8006af8:	00000400 	.word	0x00000400
 8006afc:	24000e60 	.word	0x24000e60
 8006b00:	240014e0 	.word	0x240014e0

08006b04 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b088      	sub	sp, #32
 8006b08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006b0a:	f107 0310 	add.w	r3, r7, #16
 8006b0e:	2200      	movs	r2, #0
 8006b10:	601a      	str	r2, [r3, #0]
 8006b12:	605a      	str	r2, [r3, #4]
 8006b14:	609a      	str	r2, [r3, #8]
 8006b16:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006b18:	1d3b      	adds	r3, r7, #4
 8006b1a:	2200      	movs	r2, #0
 8006b1c:	601a      	str	r2, [r3, #0]
 8006b1e:	605a      	str	r2, [r3, #4]
 8006b20:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8006b22:	4b20      	ldr	r3, [pc, #128]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b24:	4a20      	ldr	r2, [pc, #128]	; (8006ba8 <MX_TIM1_Init+0xa4>)
 8006b26:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 99;
 8006b28:	4b1e      	ldr	r3, [pc, #120]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b2a:	2263      	movs	r2, #99	; 0x63
 8006b2c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006b2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b30:	2200      	movs	r2, #0
 8006b32:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8006b34:	4b1b      	ldr	r3, [pc, #108]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006b3a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006b3c:	4b19      	ldr	r3, [pc, #100]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b3e:	2200      	movs	r2, #0
 8006b40:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8006b42:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b44:	2200      	movs	r2, #0
 8006b46:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006b48:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b4a:	2200      	movs	r2, #0
 8006b4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8006b4e:	4815      	ldr	r0, [pc, #84]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b50:	f007 fada 	bl	800e108 <HAL_TIM_Base_Init>
 8006b54:	4603      	mov	r3, r0
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8006b5a:	f7ff fdf1 	bl	8006740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006b5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b62:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8006b64:	f107 0310 	add.w	r3, r7, #16
 8006b68:	4619      	mov	r1, r3
 8006b6a:	480e      	ldr	r0, [pc, #56]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b6c:	f007 fcbc 	bl	800e4e8 <HAL_TIM_ConfigClockSource>
 8006b70:	4603      	mov	r3, r0
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d001      	beq.n	8006b7a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8006b76:	f7ff fde3 	bl	8006740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006b82:	2300      	movs	r3, #0
 8006b84:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8006b86:	1d3b      	adds	r3, r7, #4
 8006b88:	4619      	mov	r1, r3
 8006b8a:	4806      	ldr	r0, [pc, #24]	; (8006ba4 <MX_TIM1_Init+0xa0>)
 8006b8c:	f007 ff04 	bl	800e998 <HAL_TIMEx_MasterConfigSynchronization>
 8006b90:	4603      	mov	r3, r0
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d001      	beq.n	8006b9a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8006b96:	f7ff fdd3 	bl	8006740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8006b9a:	bf00      	nop
 8006b9c:	3720      	adds	r7, #32
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}
 8006ba2:	bf00      	nop
 8006ba4:	24000e64 	.word	0x24000e64
 8006ba8:	40010000 	.word	0x40010000

08006bac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a1a      	ldr	r2, [pc, #104]	; (8006c24 <HAL_TIM_Base_MspInit+0x78>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d12e      	bne.n	8006c1c <HAL_TIM_Base_MspInit+0x70>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8006bbe:	4b1a      	ldr	r3, [pc, #104]	; (8006c28 <HAL_TIM_Base_MspInit+0x7c>)
 8006bc0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bc4:	4a18      	ldr	r2, [pc, #96]	; (8006c28 <HAL_TIM_Base_MspInit+0x7c>)
 8006bc6:	f043 0301 	orr.w	r3, r3, #1
 8006bca:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006bce:	4b16      	ldr	r3, [pc, #88]	; (8006c28 <HAL_TIM_Base_MspInit+0x7c>)
 8006bd0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bd4:	f003 0301 	and.w	r3, r3, #1
 8006bd8:	60fb      	str	r3, [r7, #12]
 8006bda:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_IRQn, 0, 0);
 8006bdc:	2200      	movs	r2, #0
 8006bde:	2100      	movs	r1, #0
 8006be0:	2018      	movs	r0, #24
 8006be2:	f000 fba6 	bl	8007332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_IRQn);
 8006be6:	2018      	movs	r0, #24
 8006be8:	f000 fbbd 	bl	8007366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8006bec:	2200      	movs	r2, #0
 8006bee:	2100      	movs	r1, #0
 8006bf0:	2019      	movs	r0, #25
 8006bf2:	f000 fb9e 	bl	8007332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8006bf6:	2019      	movs	r0, #25
 8006bf8:	f000 fbb5 	bl	8007366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_IRQn, 0, 0);
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	2100      	movs	r1, #0
 8006c00:	201a      	movs	r0, #26
 8006c02:	f000 fb96 	bl	8007332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_IRQn);
 8006c06:	201a      	movs	r0, #26
 8006c08:	f000 fbad 	bl	8007366 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	2100      	movs	r1, #0
 8006c10:	201b      	movs	r0, #27
 8006c12:	f000 fb8e 	bl	8007332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8006c16:	201b      	movs	r0, #27
 8006c18:	f000 fba5 	bl	8007366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	3710      	adds	r7, #16
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40010000 	.word	0x40010000
 8006c28:	58024400 	.word	0x58024400

08006c2c <MX_USART3_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006c30:	4b22      	ldr	r3, [pc, #136]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c32:	4a23      	ldr	r2, [pc, #140]	; (8006cc0 <MX_USART3_UART_Init+0x94>)
 8006c34:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8006c36:	4b21      	ldr	r3, [pc, #132]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006c3c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8006c3e:	4b1f      	ldr	r3, [pc, #124]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c40:	2200      	movs	r2, #0
 8006c42:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006c44:	4b1d      	ldr	r3, [pc, #116]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c46:	2200      	movs	r2, #0
 8006c48:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8006c4a:	4b1c      	ldr	r3, [pc, #112]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006c50:	4b1a      	ldr	r3, [pc, #104]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c52:	220c      	movs	r2, #12
 8006c54:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006c56:	4b19      	ldr	r3, [pc, #100]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c58:	2200      	movs	r2, #0
 8006c5a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006c5c:	4b17      	ldr	r3, [pc, #92]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c5e:	2200      	movs	r2, #0
 8006c60:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8006c62:	4b16      	ldr	r3, [pc, #88]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c64:	2200      	movs	r2, #0
 8006c66:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8006c68:	4b14      	ldr	r3, [pc, #80]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8006c6e:	4b13      	ldr	r3, [pc, #76]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c70:	2200      	movs	r2, #0
 8006c72:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006c74:	4811      	ldr	r0, [pc, #68]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c76:	f007 ff3b 	bl	800eaf0 <HAL_UART_Init>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8006c80:	f7ff fd5e 	bl	8006740 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c84:	2100      	movs	r1, #0
 8006c86:	480d      	ldr	r0, [pc, #52]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c88:	f009 fe33 	bl	80108f2 <HAL_UARTEx_SetTxFifoThreshold>
 8006c8c:	4603      	mov	r3, r0
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d001      	beq.n	8006c96 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8006c92:	f7ff fd55 	bl	8006740 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8006c96:	2100      	movs	r1, #0
 8006c98:	4808      	ldr	r0, [pc, #32]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006c9a:	f009 fe68 	bl	801096e <HAL_UARTEx_SetRxFifoThreshold>
 8006c9e:	4603      	mov	r3, r0
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d001      	beq.n	8006ca8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8006ca4:	f7ff fd4c 	bl	8006740 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8006ca8:	4804      	ldr	r0, [pc, #16]	; (8006cbc <MX_USART3_UART_Init+0x90>)
 8006caa:	f009 fde9 	bl	8010880 <HAL_UARTEx_DisableFifoMode>
 8006cae:	4603      	mov	r3, r0
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d001      	beq.n	8006cb8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8006cb4:	f7ff fd44 	bl	8006740 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8006cb8:	bf00      	nop
 8006cba:	bd80      	pop	{r7, pc}
 8006cbc:	24000eb0 	.word	0x24000eb0
 8006cc0:	40004800 	.word	0x40004800

08006cc4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b0b8      	sub	sp, #224	; 0xe0
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ccc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	601a      	str	r2, [r3, #0]
 8006cd4:	605a      	str	r2, [r3, #4]
 8006cd6:	609a      	str	r2, [r3, #8]
 8006cd8:	60da      	str	r2, [r3, #12]
 8006cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006cdc:	f107 0310 	add.w	r3, r7, #16
 8006ce0:	22bc      	movs	r2, #188	; 0xbc
 8006ce2:	2100      	movs	r1, #0
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f00a fd41 	bl	801176c <memset>
  if(uartHandle->Instance==USART3)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a40      	ldr	r2, [pc, #256]	; (8006df0 <HAL_UART_MspInit+0x12c>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d178      	bne.n	8006de6 <HAL_UART_MspInit+0x122>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006cfe:	f107 0310 	add.w	r3, r7, #16
 8006d02:	4618      	mov	r0, r3
 8006d04:	f005 fe98 	bl	800ca38 <HAL_RCCEx_PeriphCLKConfig>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8006d0e:	f7ff fd17 	bl	8006740 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8006d12:	4b38      	ldr	r3, [pc, #224]	; (8006df4 <HAL_UART_MspInit+0x130>)
 8006d14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d18:	4a36      	ldr	r2, [pc, #216]	; (8006df4 <HAL_UART_MspInit+0x130>)
 8006d1a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d1e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8006d22:	4b34      	ldr	r3, [pc, #208]	; (8006df4 <HAL_UART_MspInit+0x130>)
 8006d24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d28:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006d2c:	60fb      	str	r3, [r7, #12]
 8006d2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d30:	4b30      	ldr	r3, [pc, #192]	; (8006df4 <HAL_UART_MspInit+0x130>)
 8006d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d36:	4a2f      	ldr	r2, [pc, #188]	; (8006df4 <HAL_UART_MspInit+0x130>)
 8006d38:	f043 0308 	orr.w	r3, r3, #8
 8006d3c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006d40:	4b2c      	ldr	r3, [pc, #176]	; (8006df4 <HAL_UART_MspInit+0x130>)
 8006d42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d46:	f003 0308 	and.w	r3, r3, #8
 8006d4a:	60bb      	str	r3, [r7, #8]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8006d4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006d52:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d56:	2302      	movs	r3, #2
 8006d58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006d62:	2300      	movs	r3, #0
 8006d64:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8006d68:	2307      	movs	r3, #7
 8006d6a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006d6e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006d72:	4619      	mov	r1, r3
 8006d74:	4820      	ldr	r0, [pc, #128]	; (8006df8 <HAL_UART_MspInit+0x134>)
 8006d76:	f003 fd71 	bl	800a85c <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 8006d7a:	4b20      	ldr	r3, [pc, #128]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006d7c:	4a20      	ldr	r2, [pc, #128]	; (8006e00 <HAL_UART_MspInit+0x13c>)
 8006d7e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8006d80:	4b1e      	ldr	r3, [pc, #120]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006d82:	222d      	movs	r2, #45	; 0x2d
 8006d84:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d86:	4b1d      	ldr	r3, [pc, #116]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006d88:	2200      	movs	r2, #0
 8006d8a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d8c:	4b1b      	ldr	r3, [pc, #108]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006d92:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d98:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006d9a:	4b18      	ldr	r3, [pc, #96]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006da0:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006da2:	2200      	movs	r2, #0
 8006da4:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8006da6:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006da8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006dac:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8006dba:	4810      	ldr	r0, [pc, #64]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006dbc:	f000 faee 	bl	800739c <HAL_DMA_Init>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d001      	beq.n	8006dca <HAL_UART_MspInit+0x106>
    {
      Error_Handler();
 8006dc6:	f7ff fcbb 	bl	8006740 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a0b      	ldr	r2, [pc, #44]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006dce:	67da      	str	r2, [r3, #124]	; 0x7c
 8006dd0:	4a0a      	ldr	r2, [pc, #40]	; (8006dfc <HAL_UART_MspInit+0x138>)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2100      	movs	r1, #0
 8006dda:	2027      	movs	r0, #39	; 0x27
 8006ddc:	f000 faa9 	bl	8007332 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8006de0:	2027      	movs	r0, #39	; 0x27
 8006de2:	f000 fac0 	bl	8007366 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8006de6:	bf00      	nop
 8006de8:	37e0      	adds	r7, #224	; 0xe0
 8006dea:	46bd      	mov	sp, r7
 8006dec:	bd80      	pop	{r7, pc}
 8006dee:	bf00      	nop
 8006df0:	40004800 	.word	0x40004800
 8006df4:	58024400 	.word	0x58024400
 8006df8:	58020c00 	.word	0x58020c00
 8006dfc:	24000f40 	.word	0x24000f40
 8006e00:	40020010 	.word	0x40020010

08006e04 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006e08:	4b15      	ldr	r3, [pc, #84]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e0a:	4a16      	ldr	r2, [pc, #88]	; (8006e64 <MX_USB_OTG_FS_PCD_Init+0x60>)
 8006e0c:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8006e0e:	4b14      	ldr	r3, [pc, #80]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e10:	2209      	movs	r2, #9
 8006e12:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006e14:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e16:	2202      	movs	r2, #2
 8006e18:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006e1a:	4b11      	ldr	r3, [pc, #68]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006e20:	4b0f      	ldr	r3, [pc, #60]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e22:	2202      	movs	r2, #2
 8006e24:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006e26:	4b0e      	ldr	r3, [pc, #56]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e28:	2200      	movs	r2, #0
 8006e2a:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006e2c:	4b0c      	ldr	r3, [pc, #48]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e2e:	2200      	movs	r2, #0
 8006e30:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006e32:	4b0b      	ldr	r3, [pc, #44]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e34:	2200      	movs	r2, #0
 8006e36:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8006e38:	4b09      	ldr	r3, [pc, #36]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e3a:	2201      	movs	r2, #1
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8006e3e:	4b08      	ldr	r3, [pc, #32]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e40:	2201      	movs	r2, #1
 8006e42:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006e44:	4b06      	ldr	r3, [pc, #24]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e46:	2200      	movs	r2, #0
 8006e48:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006e4a:	4805      	ldr	r0, [pc, #20]	; (8006e60 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8006e4c:	f004 fc87 	bl	800b75e <HAL_PCD_Init>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d001      	beq.n	8006e5a <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8006e56:	f7ff fc73 	bl	8006740 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8006e5a:	bf00      	nop
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	24000fb8 	.word	0x24000fb8
 8006e64:	40080000 	.word	0x40080000

08006e68 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b0b8      	sub	sp, #224	; 0xe0
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e70:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8006e80:	f107 0310 	add.w	r3, r7, #16
 8006e84:	22bc      	movs	r2, #188	; 0xbc
 8006e86:	2100      	movs	r1, #0
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f00a fc6f 	bl	801176c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	4a37      	ldr	r2, [pc, #220]	; (8006f70 <HAL_PCD_MspInit+0x108>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d166      	bne.n	8006f66 <HAL_PCD_MspInit+0xfe>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8006e98:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006e9c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL3.PLL3M = 1;
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL3.PLL3N = 18;
 8006ea2:	2312      	movs	r3, #18
 8006ea4:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 8006ea6:	2302      	movs	r3, #2
 8006ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.PLL3.PLL3Q = 3;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	643b      	str	r3, [r7, #64]	; 0x40
    PeriphClkInitStruct.PLL3.PLL3R = 2;
 8006eae:	2302      	movs	r3, #2
 8006eb0:	647b      	str	r3, [r7, #68]	; 0x44
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_3;
 8006eb2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006eb6:	64bb      	str	r3, [r7, #72]	; 0x48
    PeriphClkInitStruct.PLL3.PLL3FRACN = 6144;
 8006eb8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006ebc:	653b      	str	r3, [r7, #80]	; 0x50
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL3;
 8006ebe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8006ec2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8006ec6:	f107 0310 	add.w	r3, r7, #16
 8006eca:	4618      	mov	r0, r3
 8006ecc:	f005 fdb4 	bl	800ca38 <HAL_RCCEx_PeriphCLKConfig>
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d001      	beq.n	8006eda <HAL_PCD_MspInit+0x72>
    {
      Error_Handler();
 8006ed6:	f7ff fc33 	bl	8006740 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8006eda:	f004 fde3 	bl	800baa4 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ede:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <HAL_PCD_MspInit+0x10c>)
 8006ee0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ee4:	4a23      	ldr	r2, [pc, #140]	; (8006f74 <HAL_PCD_MspInit+0x10c>)
 8006ee6:	f043 0301 	orr.w	r3, r3, #1
 8006eea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8006eee:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <HAL_PCD_MspInit+0x10c>)
 8006ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8006efc:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8006f00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f04:	2302      	movs	r3, #2
 8006f06:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f10:	2300      	movs	r3, #0
 8006f12:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8006f16:	230a      	movs	r3, #10
 8006f18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f1c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f20:	4619      	mov	r1, r3
 8006f22:	4815      	ldr	r0, [pc, #84]	; (8006f78 <HAL_PCD_MspInit+0x110>)
 8006f24:	f003 fc9a 	bl	800a85c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006f28:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f2c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006f30:	2300      	movs	r3, #0
 8006f32:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006f3c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8006f40:	4619      	mov	r1, r3
 8006f42:	480d      	ldr	r0, [pc, #52]	; (8006f78 <HAL_PCD_MspInit+0x110>)
 8006f44:	f003 fc8a 	bl	800a85c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006f48:	4b0a      	ldr	r3, [pc, #40]	; (8006f74 <HAL_PCD_MspInit+0x10c>)
 8006f4a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f4e:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <HAL_PCD_MspInit+0x10c>)
 8006f50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006f54:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <HAL_PCD_MspInit+0x10c>)
 8006f5a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006f5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006f62:	60bb      	str	r3, [r7, #8]
 8006f64:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006f66:	bf00      	nop
 8006f68:	37e0      	adds	r7, #224	; 0xe0
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	bd80      	pop	{r7, pc}
 8006f6e:	bf00      	nop
 8006f70:	40080000 	.word	0x40080000
 8006f74:	58024400 	.word	0x58024400
 8006f78:	58020000 	.word	0x58020000

08006f7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8006f7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006fb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8006f80:	f7f9 fb88 	bl	8000694 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006f84:	480c      	ldr	r0, [pc, #48]	; (8006fb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8006f86:	490d      	ldr	r1, [pc, #52]	; (8006fbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006f88:	4a0d      	ldr	r2, [pc, #52]	; (8006fc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006f8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006f8c:	e002      	b.n	8006f94 <LoopCopyDataInit>

08006f8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006f8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006f90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006f92:	3304      	adds	r3, #4

08006f94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006f94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006f96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006f98:	d3f9      	bcc.n	8006f8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006f9a:	4a0a      	ldr	r2, [pc, #40]	; (8006fc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006f9c:	4c0a      	ldr	r4, [pc, #40]	; (8006fc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006f9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006fa0:	e001      	b.n	8006fa6 <LoopFillZerobss>

08006fa2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006fa2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006fa4:	3204      	adds	r2, #4

08006fa6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006fa6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006fa8:	d3fb      	bcc.n	8006fa2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006faa:	f00a fb83 	bl	80116b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006fae:	f7fe febf 	bl	8005d30 <main>
  bx  lr
 8006fb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006fb4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8006fb8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8006fbc:	2400008c 	.word	0x2400008c
  ldr r2, =_sidata
 8006fc0:	08012d30 	.word	0x08012d30
  ldr r2, =_sbss
 8006fc4:	24000150 	.word	0x24000150
  ldr r4, =_ebss
 8006fc8:	240014dc 	.word	0x240014dc

08006fcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006fcc:	e7fe      	b.n	8006fcc <ADC3_IRQHandler>
	...

08006fd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006fd6:	2003      	movs	r0, #3
 8006fd8:	f000 f9a0 	bl	800731c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006fdc:	f005 fb56 	bl	800c68c <HAL_RCC_GetSysClockFreq>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	4b15      	ldr	r3, [pc, #84]	; (8007038 <HAL_Init+0x68>)
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	0a1b      	lsrs	r3, r3, #8
 8006fe8:	f003 030f 	and.w	r3, r3, #15
 8006fec:	4913      	ldr	r1, [pc, #76]	; (800703c <HAL_Init+0x6c>)
 8006fee:	5ccb      	ldrb	r3, [r1, r3]
 8006ff0:	f003 031f 	and.w	r3, r3, #31
 8006ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ff8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006ffa:	4b0f      	ldr	r3, [pc, #60]	; (8007038 <HAL_Init+0x68>)
 8006ffc:	699b      	ldr	r3, [r3, #24]
 8006ffe:	f003 030f 	and.w	r3, r3, #15
 8007002:	4a0e      	ldr	r2, [pc, #56]	; (800703c <HAL_Init+0x6c>)
 8007004:	5cd3      	ldrb	r3, [r2, r3]
 8007006:	f003 031f 	and.w	r3, r3, #31
 800700a:	687a      	ldr	r2, [r7, #4]
 800700c:	fa22 f303 	lsr.w	r3, r2, r3
 8007010:	4a0b      	ldr	r2, [pc, #44]	; (8007040 <HAL_Init+0x70>)
 8007012:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007014:	4a0b      	ldr	r2, [pc, #44]	; (8007044 <HAL_Init+0x74>)
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800701a:	2000      	movs	r0, #0
 800701c:	f000 f814 	bl	8007048 <HAL_InitTick>
 8007020:	4603      	mov	r3, r0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007026:	2301      	movs	r3, #1
 8007028:	e002      	b.n	8007030 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800702a:	f7ff fc11 	bl	8006850 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800702e:	2300      	movs	r3, #0
}
 8007030:	4618      	mov	r0, r3
 8007032:	3708      	adds	r7, #8
 8007034:	46bd      	mov	sp, r7
 8007036:	bd80      	pop	{r7, pc}
 8007038:	58024400 	.word	0x58024400
 800703c:	08012bc8 	.word	0x08012bc8
 8007040:	24000004 	.word	0x24000004
 8007044:	24000000 	.word	0x24000000

08007048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007050:	4b15      	ldr	r3, [pc, #84]	; (80070a8 <HAL_InitTick+0x60>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d101      	bne.n	800705c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e021      	b.n	80070a0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800705c:	4b13      	ldr	r3, [pc, #76]	; (80070ac <HAL_InitTick+0x64>)
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	4b11      	ldr	r3, [pc, #68]	; (80070a8 <HAL_InitTick+0x60>)
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	4619      	mov	r1, r3
 8007066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800706a:	fbb3 f3f1 	udiv	r3, r3, r1
 800706e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f985 	bl	8007382 <HAL_SYSTICK_Config>
 8007078:	4603      	mov	r3, r0
 800707a:	2b00      	cmp	r3, #0
 800707c:	d001      	beq.n	8007082 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e00e      	b.n	80070a0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2b0f      	cmp	r3, #15
 8007086:	d80a      	bhi.n	800709e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007088:	2200      	movs	r2, #0
 800708a:	6879      	ldr	r1, [r7, #4]
 800708c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007090:	f000 f94f 	bl	8007332 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007094:	4a06      	ldr	r2, [pc, #24]	; (80070b0 <HAL_InitTick+0x68>)
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	e000      	b.n	80070a0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800709e:	2301      	movs	r3, #1
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}
 80070a8:	24000024 	.word	0x24000024
 80070ac:	24000000 	.word	0x24000000
 80070b0:	24000020 	.word	0x24000020

080070b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80070b4:	b480      	push	{r7}
 80070b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80070b8:	4b06      	ldr	r3, [pc, #24]	; (80070d4 <HAL_IncTick+0x20>)
 80070ba:	781b      	ldrb	r3, [r3, #0]
 80070bc:	461a      	mov	r2, r3
 80070be:	4b06      	ldr	r3, [pc, #24]	; (80070d8 <HAL_IncTick+0x24>)
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4413      	add	r3, r2
 80070c4:	4a04      	ldr	r2, [pc, #16]	; (80070d8 <HAL_IncTick+0x24>)
 80070c6:	6013      	str	r3, [r2, #0]
}
 80070c8:	bf00      	nop
 80070ca:	46bd      	mov	sp, r7
 80070cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop
 80070d4:	24000024 	.word	0x24000024
 80070d8:	240014c4 	.word	0x240014c4

080070dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80070dc:	b480      	push	{r7}
 80070de:	af00      	add	r7, sp, #0
  return uwTick;
 80070e0:	4b03      	ldr	r3, [pc, #12]	; (80070f0 <HAL_GetTick+0x14>)
 80070e2:	681b      	ldr	r3, [r3, #0]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	46bd      	mov	sp, r7
 80070e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop
 80070f0:	240014c4 	.word	0x240014c4

080070f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b084      	sub	sp, #16
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80070fc:	f7ff ffee 	bl	80070dc <HAL_GetTick>
 8007100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800710c:	d005      	beq.n	800711a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800710e:	4b0a      	ldr	r3, [pc, #40]	; (8007138 <HAL_Delay+0x44>)
 8007110:	781b      	ldrb	r3, [r3, #0]
 8007112:	461a      	mov	r2, r3
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	4413      	add	r3, r2
 8007118:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800711a:	bf00      	nop
 800711c:	f7ff ffde 	bl	80070dc <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	68fa      	ldr	r2, [r7, #12]
 8007128:	429a      	cmp	r2, r3
 800712a:	d8f7      	bhi.n	800711c <HAL_Delay+0x28>
  {
  }
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}
 8007136:	bf00      	nop
 8007138:	24000024 	.word	0x24000024

0800713c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800713c:	b480      	push	{r7}
 800713e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007140:	4b03      	ldr	r3, [pc, #12]	; (8007150 <HAL_GetREVID+0x14>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	0c1b      	lsrs	r3, r3, #16
}
 8007146:	4618      	mov	r0, r3
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	5c001000 	.word	0x5c001000

08007154 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800715c:	4b06      	ldr	r3, [pc, #24]	; (8007178 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8007164:	4904      	ldr	r1, [pc, #16]	; (8007178 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4313      	orrs	r3, r2
 800716a:	604b      	str	r3, [r1, #4]
}
 800716c:	bf00      	nop
 800716e:	370c      	adds	r7, #12
 8007170:	46bd      	mov	sp, r7
 8007172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007176:	4770      	bx	lr
 8007178:	58000400 	.word	0x58000400

0800717c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800717c:	b480      	push	{r7}
 800717e:	b085      	sub	sp, #20
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f003 0307 	and.w	r3, r3, #7
 800718a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800718c:	4b0b      	ldr	r3, [pc, #44]	; (80071bc <__NVIC_SetPriorityGrouping+0x40>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007192:	68ba      	ldr	r2, [r7, #8]
 8007194:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007198:	4013      	ands	r3, r2
 800719a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80071a0:	68bb      	ldr	r3, [r7, #8]
 80071a2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80071a4:	4b06      	ldr	r3, [pc, #24]	; (80071c0 <__NVIC_SetPriorityGrouping+0x44>)
 80071a6:	4313      	orrs	r3, r2
 80071a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80071aa:	4a04      	ldr	r2, [pc, #16]	; (80071bc <__NVIC_SetPriorityGrouping+0x40>)
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	60d3      	str	r3, [r2, #12]
}
 80071b0:	bf00      	nop
 80071b2:	3714      	adds	r7, #20
 80071b4:	46bd      	mov	sp, r7
 80071b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ba:	4770      	bx	lr
 80071bc:	e000ed00 	.word	0xe000ed00
 80071c0:	05fa0000 	.word	0x05fa0000

080071c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80071c8:	4b04      	ldr	r3, [pc, #16]	; (80071dc <__NVIC_GetPriorityGrouping+0x18>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	0a1b      	lsrs	r3, r3, #8
 80071ce:	f003 0307 	and.w	r3, r3, #7
}
 80071d2:	4618      	mov	r0, r3
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr
 80071dc:	e000ed00 	.word	0xe000ed00

080071e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80071e0:	b480      	push	{r7}
 80071e2:	b083      	sub	sp, #12
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	4603      	mov	r3, r0
 80071e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80071ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	db0b      	blt.n	800720a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80071f2:	88fb      	ldrh	r3, [r7, #6]
 80071f4:	f003 021f 	and.w	r2, r3, #31
 80071f8:	4907      	ldr	r1, [pc, #28]	; (8007218 <__NVIC_EnableIRQ+0x38>)
 80071fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80071fe:	095b      	lsrs	r3, r3, #5
 8007200:	2001      	movs	r0, #1
 8007202:	fa00 f202 	lsl.w	r2, r0, r2
 8007206:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	e000e100 	.word	0xe000e100

0800721c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800721c:	b480      	push	{r7}
 800721e:	b083      	sub	sp, #12
 8007220:	af00      	add	r7, sp, #0
 8007222:	4603      	mov	r3, r0
 8007224:	6039      	str	r1, [r7, #0]
 8007226:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8007228:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800722c:	2b00      	cmp	r3, #0
 800722e:	db0a      	blt.n	8007246 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	b2da      	uxtb	r2, r3
 8007234:	490c      	ldr	r1, [pc, #48]	; (8007268 <__NVIC_SetPriority+0x4c>)
 8007236:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800723a:	0112      	lsls	r2, r2, #4
 800723c:	b2d2      	uxtb	r2, r2
 800723e:	440b      	add	r3, r1
 8007240:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007244:	e00a      	b.n	800725c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	b2da      	uxtb	r2, r3
 800724a:	4908      	ldr	r1, [pc, #32]	; (800726c <__NVIC_SetPriority+0x50>)
 800724c:	88fb      	ldrh	r3, [r7, #6]
 800724e:	f003 030f 	and.w	r3, r3, #15
 8007252:	3b04      	subs	r3, #4
 8007254:	0112      	lsls	r2, r2, #4
 8007256:	b2d2      	uxtb	r2, r2
 8007258:	440b      	add	r3, r1
 800725a:	761a      	strb	r2, [r3, #24]
}
 800725c:	bf00      	nop
 800725e:	370c      	adds	r7, #12
 8007260:	46bd      	mov	sp, r7
 8007262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007266:	4770      	bx	lr
 8007268:	e000e100 	.word	0xe000e100
 800726c:	e000ed00 	.word	0xe000ed00

08007270 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007270:	b480      	push	{r7}
 8007272:	b089      	sub	sp, #36	; 0x24
 8007274:	af00      	add	r7, sp, #0
 8007276:	60f8      	str	r0, [r7, #12]
 8007278:	60b9      	str	r1, [r7, #8]
 800727a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f003 0307 	and.w	r3, r3, #7
 8007282:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007284:	69fb      	ldr	r3, [r7, #28]
 8007286:	f1c3 0307 	rsb	r3, r3, #7
 800728a:	2b04      	cmp	r3, #4
 800728c:	bf28      	it	cs
 800728e:	2304      	movcs	r3, #4
 8007290:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	3304      	adds	r3, #4
 8007296:	2b06      	cmp	r3, #6
 8007298:	d902      	bls.n	80072a0 <NVIC_EncodePriority+0x30>
 800729a:	69fb      	ldr	r3, [r7, #28]
 800729c:	3b03      	subs	r3, #3
 800729e:	e000      	b.n	80072a2 <NVIC_EncodePriority+0x32>
 80072a0:	2300      	movs	r3, #0
 80072a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	fa02 f303 	lsl.w	r3, r2, r3
 80072ae:	43da      	mvns	r2, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	401a      	ands	r2, r3
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80072b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	fa01 f303 	lsl.w	r3, r1, r3
 80072c2:	43d9      	mvns	r1, r3
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80072c8:	4313      	orrs	r3, r2
         );
}
 80072ca:	4618      	mov	r0, r3
 80072cc:	3724      	adds	r7, #36	; 0x24
 80072ce:	46bd      	mov	sp, r7
 80072d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d4:	4770      	bx	lr
	...

080072d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80072e8:	d301      	bcc.n	80072ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80072ea:	2301      	movs	r3, #1
 80072ec:	e00f      	b.n	800730e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80072ee:	4a0a      	ldr	r2, [pc, #40]	; (8007318 <SysTick_Config+0x40>)
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3b01      	subs	r3, #1
 80072f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80072f6:	210f      	movs	r1, #15
 80072f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072fc:	f7ff ff8e 	bl	800721c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007300:	4b05      	ldr	r3, [pc, #20]	; (8007318 <SysTick_Config+0x40>)
 8007302:	2200      	movs	r2, #0
 8007304:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007306:	4b04      	ldr	r3, [pc, #16]	; (8007318 <SysTick_Config+0x40>)
 8007308:	2207      	movs	r2, #7
 800730a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3708      	adds	r7, #8
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}
 8007316:	bf00      	nop
 8007318:	e000e010 	.word	0xe000e010

0800731c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b082      	sub	sp, #8
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f7ff ff29 	bl	800717c <__NVIC_SetPriorityGrouping>
}
 800732a:	bf00      	nop
 800732c:	3708      	adds	r7, #8
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b086      	sub	sp, #24
 8007336:	af00      	add	r7, sp, #0
 8007338:	4603      	mov	r3, r0
 800733a:	60b9      	str	r1, [r7, #8]
 800733c:	607a      	str	r2, [r7, #4]
 800733e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007340:	f7ff ff40 	bl	80071c4 <__NVIC_GetPriorityGrouping>
 8007344:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007346:	687a      	ldr	r2, [r7, #4]
 8007348:	68b9      	ldr	r1, [r7, #8]
 800734a:	6978      	ldr	r0, [r7, #20]
 800734c:	f7ff ff90 	bl	8007270 <NVIC_EncodePriority>
 8007350:	4602      	mov	r2, r0
 8007352:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8007356:	4611      	mov	r1, r2
 8007358:	4618      	mov	r0, r3
 800735a:	f7ff ff5f 	bl	800721c <__NVIC_SetPriority>
}
 800735e:	bf00      	nop
 8007360:	3718      	adds	r7, #24
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}

08007366 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007366:	b580      	push	{r7, lr}
 8007368:	b082      	sub	sp, #8
 800736a:	af00      	add	r7, sp, #0
 800736c:	4603      	mov	r3, r0
 800736e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007370:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007374:	4618      	mov	r0, r3
 8007376:	f7ff ff33 	bl	80071e0 <__NVIC_EnableIRQ>
}
 800737a:	bf00      	nop
 800737c:	3708      	adds	r7, #8
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b082      	sub	sp, #8
 8007386:	af00      	add	r7, sp, #0
 8007388:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f7ff ffa4 	bl	80072d8 <SysTick_Config>
 8007390:	4603      	mov	r3, r0
}
 8007392:	4618      	mov	r0, r3
 8007394:	3708      	adds	r7, #8
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b086      	sub	sp, #24
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80073a4:	f7ff fe9a 	bl	80070dc <HAL_GetTick>
 80073a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d101      	bne.n	80073b4 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80073b0:	2301      	movs	r3, #1
 80073b2:	e316      	b.n	80079e2 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	4a66      	ldr	r2, [pc, #408]	; (8007554 <HAL_DMA_Init+0x1b8>)
 80073ba:	4293      	cmp	r3, r2
 80073bc:	d04a      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	4a65      	ldr	r2, [pc, #404]	; (8007558 <HAL_DMA_Init+0x1bc>)
 80073c4:	4293      	cmp	r3, r2
 80073c6:	d045      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	4a63      	ldr	r2, [pc, #396]	; (800755c <HAL_DMA_Init+0x1c0>)
 80073ce:	4293      	cmp	r3, r2
 80073d0:	d040      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a62      	ldr	r2, [pc, #392]	; (8007560 <HAL_DMA_Init+0x1c4>)
 80073d8:	4293      	cmp	r3, r2
 80073da:	d03b      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	4a60      	ldr	r2, [pc, #384]	; (8007564 <HAL_DMA_Init+0x1c8>)
 80073e2:	4293      	cmp	r3, r2
 80073e4:	d036      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	4a5f      	ldr	r2, [pc, #380]	; (8007568 <HAL_DMA_Init+0x1cc>)
 80073ec:	4293      	cmp	r3, r2
 80073ee:	d031      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	4a5d      	ldr	r2, [pc, #372]	; (800756c <HAL_DMA_Init+0x1d0>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d02c      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	4a5c      	ldr	r2, [pc, #368]	; (8007570 <HAL_DMA_Init+0x1d4>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d027      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4a5a      	ldr	r2, [pc, #360]	; (8007574 <HAL_DMA_Init+0x1d8>)
 800740a:	4293      	cmp	r3, r2
 800740c:	d022      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	4a59      	ldr	r2, [pc, #356]	; (8007578 <HAL_DMA_Init+0x1dc>)
 8007414:	4293      	cmp	r3, r2
 8007416:	d01d      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	4a57      	ldr	r2, [pc, #348]	; (800757c <HAL_DMA_Init+0x1e0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d018      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	4a56      	ldr	r2, [pc, #344]	; (8007580 <HAL_DMA_Init+0x1e4>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d013      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	4a54      	ldr	r2, [pc, #336]	; (8007584 <HAL_DMA_Init+0x1e8>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d00e      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	4a53      	ldr	r2, [pc, #332]	; (8007588 <HAL_DMA_Init+0x1ec>)
 800743c:	4293      	cmp	r3, r2
 800743e:	d009      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	4a51      	ldr	r2, [pc, #324]	; (800758c <HAL_DMA_Init+0x1f0>)
 8007446:	4293      	cmp	r3, r2
 8007448:	d004      	beq.n	8007454 <HAL_DMA_Init+0xb8>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	4a50      	ldr	r2, [pc, #320]	; (8007590 <HAL_DMA_Init+0x1f4>)
 8007450:	4293      	cmp	r3, r2
 8007452:	d101      	bne.n	8007458 <HAL_DMA_Init+0xbc>
 8007454:	2301      	movs	r3, #1
 8007456:	e000      	b.n	800745a <HAL_DMA_Init+0xbe>
 8007458:	2300      	movs	r3, #0
 800745a:	2b00      	cmp	r3, #0
 800745c:	f000 813b 	beq.w	80076d6 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2202      	movs	r2, #2
 8007464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	2200      	movs	r2, #0
 800746c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4a37      	ldr	r2, [pc, #220]	; (8007554 <HAL_DMA_Init+0x1b8>)
 8007476:	4293      	cmp	r3, r2
 8007478:	d04a      	beq.n	8007510 <HAL_DMA_Init+0x174>
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	4a36      	ldr	r2, [pc, #216]	; (8007558 <HAL_DMA_Init+0x1bc>)
 8007480:	4293      	cmp	r3, r2
 8007482:	d045      	beq.n	8007510 <HAL_DMA_Init+0x174>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a34      	ldr	r2, [pc, #208]	; (800755c <HAL_DMA_Init+0x1c0>)
 800748a:	4293      	cmp	r3, r2
 800748c:	d040      	beq.n	8007510 <HAL_DMA_Init+0x174>
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	4a33      	ldr	r2, [pc, #204]	; (8007560 <HAL_DMA_Init+0x1c4>)
 8007494:	4293      	cmp	r3, r2
 8007496:	d03b      	beq.n	8007510 <HAL_DMA_Init+0x174>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a31      	ldr	r2, [pc, #196]	; (8007564 <HAL_DMA_Init+0x1c8>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d036      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	4a30      	ldr	r2, [pc, #192]	; (8007568 <HAL_DMA_Init+0x1cc>)
 80074a8:	4293      	cmp	r3, r2
 80074aa:	d031      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4a2e      	ldr	r2, [pc, #184]	; (800756c <HAL_DMA_Init+0x1d0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d02c      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a2d      	ldr	r2, [pc, #180]	; (8007570 <HAL_DMA_Init+0x1d4>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d027      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a2b      	ldr	r2, [pc, #172]	; (8007574 <HAL_DMA_Init+0x1d8>)
 80074c6:	4293      	cmp	r3, r2
 80074c8:	d022      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	4a2a      	ldr	r2, [pc, #168]	; (8007578 <HAL_DMA_Init+0x1dc>)
 80074d0:	4293      	cmp	r3, r2
 80074d2:	d01d      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a28      	ldr	r2, [pc, #160]	; (800757c <HAL_DMA_Init+0x1e0>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d018      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	4a27      	ldr	r2, [pc, #156]	; (8007580 <HAL_DMA_Init+0x1e4>)
 80074e4:	4293      	cmp	r3, r2
 80074e6:	d013      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	4a25      	ldr	r2, [pc, #148]	; (8007584 <HAL_DMA_Init+0x1e8>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d00e      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	4a24      	ldr	r2, [pc, #144]	; (8007588 <HAL_DMA_Init+0x1ec>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d009      	beq.n	8007510 <HAL_DMA_Init+0x174>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a22      	ldr	r2, [pc, #136]	; (800758c <HAL_DMA_Init+0x1f0>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d004      	beq.n	8007510 <HAL_DMA_Init+0x174>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	4a21      	ldr	r2, [pc, #132]	; (8007590 <HAL_DMA_Init+0x1f4>)
 800750c:	4293      	cmp	r3, r2
 800750e:	d108      	bne.n	8007522 <HAL_DMA_Init+0x186>
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	681a      	ldr	r2, [r3, #0]
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	f022 0201 	bic.w	r2, r2, #1
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	e007      	b.n	8007532 <HAL_DMA_Init+0x196>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f022 0201 	bic.w	r2, r2, #1
 8007530:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007532:	e02f      	b.n	8007594 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007534:	f7ff fdd2 	bl	80070dc <HAL_GetTick>
 8007538:	4602      	mov	r2, r0
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	1ad3      	subs	r3, r2, r3
 800753e:	2b05      	cmp	r3, #5
 8007540:	d928      	bls.n	8007594 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	2220      	movs	r2, #32
 8007546:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	2203      	movs	r2, #3
 800754c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	e246      	b.n	80079e2 <HAL_DMA_Init+0x646>
 8007554:	40020010 	.word	0x40020010
 8007558:	40020028 	.word	0x40020028
 800755c:	40020040 	.word	0x40020040
 8007560:	40020058 	.word	0x40020058
 8007564:	40020070 	.word	0x40020070
 8007568:	40020088 	.word	0x40020088
 800756c:	400200a0 	.word	0x400200a0
 8007570:	400200b8 	.word	0x400200b8
 8007574:	40020410 	.word	0x40020410
 8007578:	40020428 	.word	0x40020428
 800757c:	40020440 	.word	0x40020440
 8007580:	40020458 	.word	0x40020458
 8007584:	40020470 	.word	0x40020470
 8007588:	40020488 	.word	0x40020488
 800758c:	400204a0 	.word	0x400204a0
 8007590:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 0301 	and.w	r3, r3, #1
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d1c8      	bne.n	8007534 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4b83      	ldr	r3, [pc, #524]	; (80077bc <HAL_DMA_Init+0x420>)
 80075ae:	4013      	ands	r3, r2
 80075b0:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80075ba:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80075c6:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80075d2:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80075da:	697a      	ldr	r2, [r7, #20]
 80075dc:	4313      	orrs	r3, r2
 80075de:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075e4:	2b04      	cmp	r3, #4
 80075e6:	d107      	bne.n	80075f8 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075f0:	4313      	orrs	r3, r2
 80075f2:	697a      	ldr	r2, [r7, #20]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80075f8:	4b71      	ldr	r3, [pc, #452]	; (80077c0 <HAL_DMA_Init+0x424>)
 80075fa:	681a      	ldr	r2, [r3, #0]
 80075fc:	4b71      	ldr	r3, [pc, #452]	; (80077c4 <HAL_DMA_Init+0x428>)
 80075fe:	4013      	ands	r3, r2
 8007600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007604:	d328      	bcc.n	8007658 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	685b      	ldr	r3, [r3, #4]
 800760a:	2b28      	cmp	r3, #40	; 0x28
 800760c:	d903      	bls.n	8007616 <HAL_DMA_Init+0x27a>
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	2b2e      	cmp	r3, #46	; 0x2e
 8007614:	d917      	bls.n	8007646 <HAL_DMA_Init+0x2aa>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	2b3e      	cmp	r3, #62	; 0x3e
 800761c:	d903      	bls.n	8007626 <HAL_DMA_Init+0x28a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	685b      	ldr	r3, [r3, #4]
 8007622:	2b42      	cmp	r3, #66	; 0x42
 8007624:	d90f      	bls.n	8007646 <HAL_DMA_Init+0x2aa>
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	2b46      	cmp	r3, #70	; 0x46
 800762c:	d903      	bls.n	8007636 <HAL_DMA_Init+0x29a>
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b48      	cmp	r3, #72	; 0x48
 8007634:	d907      	bls.n	8007646 <HAL_DMA_Init+0x2aa>
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	685b      	ldr	r3, [r3, #4]
 800763a:	2b4e      	cmp	r3, #78	; 0x4e
 800763c:	d905      	bls.n	800764a <HAL_DMA_Init+0x2ae>
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	685b      	ldr	r3, [r3, #4]
 8007642:	2b52      	cmp	r3, #82	; 0x52
 8007644:	d801      	bhi.n	800764a <HAL_DMA_Init+0x2ae>
 8007646:	2301      	movs	r3, #1
 8007648:	e000      	b.n	800764c <HAL_DMA_Init+0x2b0>
 800764a:	2300      	movs	r3, #0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d003      	beq.n	8007658 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007656:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	697a      	ldr	r2, [r7, #20]
 800765e:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	695b      	ldr	r3, [r3, #20]
 8007666:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	f023 0307 	bic.w	r3, r3, #7
 800766e:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800767e:	2b04      	cmp	r3, #4
 8007680:	d117      	bne.n	80076b2 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007686:	697a      	ldr	r2, [r7, #20]
 8007688:	4313      	orrs	r3, r2
 800768a:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007690:	2b00      	cmp	r3, #0
 8007692:	d00e      	beq.n	80076b2 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007694:	6878      	ldr	r0, [r7, #4]
 8007696:	f002 fb33 	bl	8009d00 <DMA_CheckFifoParam>
 800769a:	4603      	mov	r3, r0
 800769c:	2b00      	cmp	r3, #0
 800769e:	d008      	beq.n	80076b2 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2240      	movs	r2, #64	; 0x40
 80076a4:	655a      	str	r2, [r3, #84]	; 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          return HAL_ERROR;
 80076ae:	2301      	movs	r3, #1
 80076b0:	e197      	b.n	80079e2 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f002 fa6e 	bl	8009b9c <DMA_CalcBaseAndBitshift>
 80076c0:	4603      	mov	r3, r0
 80076c2:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80076c8:	f003 031f 	and.w	r3, r3, #31
 80076cc:	223f      	movs	r2, #63	; 0x3f
 80076ce:	409a      	lsls	r2, r3
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	609a      	str	r2, [r3, #8]
 80076d4:	e0cd      	b.n	8007872 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	4a3b      	ldr	r2, [pc, #236]	; (80077c8 <HAL_DMA_Init+0x42c>)
 80076dc:	4293      	cmp	r3, r2
 80076de:	d022      	beq.n	8007726 <HAL_DMA_Init+0x38a>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	4a39      	ldr	r2, [pc, #228]	; (80077cc <HAL_DMA_Init+0x430>)
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d01d      	beq.n	8007726 <HAL_DMA_Init+0x38a>
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a38      	ldr	r2, [pc, #224]	; (80077d0 <HAL_DMA_Init+0x434>)
 80076f0:	4293      	cmp	r3, r2
 80076f2:	d018      	beq.n	8007726 <HAL_DMA_Init+0x38a>
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a36      	ldr	r2, [pc, #216]	; (80077d4 <HAL_DMA_Init+0x438>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d013      	beq.n	8007726 <HAL_DMA_Init+0x38a>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a35      	ldr	r2, [pc, #212]	; (80077d8 <HAL_DMA_Init+0x43c>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d00e      	beq.n	8007726 <HAL_DMA_Init+0x38a>
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	4a33      	ldr	r2, [pc, #204]	; (80077dc <HAL_DMA_Init+0x440>)
 800770e:	4293      	cmp	r3, r2
 8007710:	d009      	beq.n	8007726 <HAL_DMA_Init+0x38a>
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4a32      	ldr	r2, [pc, #200]	; (80077e0 <HAL_DMA_Init+0x444>)
 8007718:	4293      	cmp	r3, r2
 800771a:	d004      	beq.n	8007726 <HAL_DMA_Init+0x38a>
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a30      	ldr	r2, [pc, #192]	; (80077e4 <HAL_DMA_Init+0x448>)
 8007722:	4293      	cmp	r3, r2
 8007724:	d101      	bne.n	800772a <HAL_DMA_Init+0x38e>
 8007726:	2301      	movs	r3, #1
 8007728:	e000      	b.n	800772c <HAL_DMA_Init+0x390>
 800772a:	2300      	movs	r3, #0
 800772c:	2b00      	cmp	r3, #0
 800772e:	f000 8097 	beq.w	8007860 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	4a24      	ldr	r2, [pc, #144]	; (80077c8 <HAL_DMA_Init+0x42c>)
 8007738:	4293      	cmp	r3, r2
 800773a:	d021      	beq.n	8007780 <HAL_DMA_Init+0x3e4>
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	4a22      	ldr	r2, [pc, #136]	; (80077cc <HAL_DMA_Init+0x430>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d01c      	beq.n	8007780 <HAL_DMA_Init+0x3e4>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	4a21      	ldr	r2, [pc, #132]	; (80077d0 <HAL_DMA_Init+0x434>)
 800774c:	4293      	cmp	r3, r2
 800774e:	d017      	beq.n	8007780 <HAL_DMA_Init+0x3e4>
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	4a1f      	ldr	r2, [pc, #124]	; (80077d4 <HAL_DMA_Init+0x438>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d012      	beq.n	8007780 <HAL_DMA_Init+0x3e4>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	4a1e      	ldr	r2, [pc, #120]	; (80077d8 <HAL_DMA_Init+0x43c>)
 8007760:	4293      	cmp	r3, r2
 8007762:	d00d      	beq.n	8007780 <HAL_DMA_Init+0x3e4>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4a1c      	ldr	r2, [pc, #112]	; (80077dc <HAL_DMA_Init+0x440>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d008      	beq.n	8007780 <HAL_DMA_Init+0x3e4>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a1b      	ldr	r2, [pc, #108]	; (80077e0 <HAL_DMA_Init+0x444>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d003      	beq.n	8007780 <HAL_DMA_Init+0x3e4>
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	4a19      	ldr	r2, [pc, #100]	; (80077e4 <HAL_DMA_Init+0x448>)
 800777e:	4293      	cmp	r3, r2
 8007780:	bf00      	nop
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2202      	movs	r2, #2
 8007786:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 800779a:	697a      	ldr	r2, [r7, #20]
 800779c:	4b12      	ldr	r3, [pc, #72]	; (80077e8 <HAL_DMA_Init+0x44c>)
 800779e:	4013      	ands	r3, r2
 80077a0:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	689b      	ldr	r3, [r3, #8]
 80077a6:	2b40      	cmp	r3, #64	; 0x40
 80077a8:	d020      	beq.n	80077ec <HAL_DMA_Init+0x450>
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	689b      	ldr	r3, [r3, #8]
 80077ae:	2b80      	cmp	r3, #128	; 0x80
 80077b0:	d102      	bne.n	80077b8 <HAL_DMA_Init+0x41c>
 80077b2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80077b6:	e01a      	b.n	80077ee <HAL_DMA_Init+0x452>
 80077b8:	2300      	movs	r3, #0
 80077ba:	e018      	b.n	80077ee <HAL_DMA_Init+0x452>
 80077bc:	fe10803f 	.word	0xfe10803f
 80077c0:	5c001000 	.word	0x5c001000
 80077c4:	ffff0000 	.word	0xffff0000
 80077c8:	58025408 	.word	0x58025408
 80077cc:	5802541c 	.word	0x5802541c
 80077d0:	58025430 	.word	0x58025430
 80077d4:	58025444 	.word	0x58025444
 80077d8:	58025458 	.word	0x58025458
 80077dc:	5802546c 	.word	0x5802546c
 80077e0:	58025480 	.word	0x58025480
 80077e4:	58025494 	.word	0x58025494
 80077e8:	fffe000f 	.word	0xfffe000f
 80077ec:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	68d2      	ldr	r2, [r2, #12]
 80077f2:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80077f4:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80077fc:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	695b      	ldr	r3, [r3, #20]
 8007802:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8007804:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	699b      	ldr	r3, [r3, #24]
 800780a:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 800780c:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8007814:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6a1b      	ldr	r3, [r3, #32]
 800781a:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 800781c:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 800781e:	697a      	ldr	r2, [r7, #20]
 8007820:	4313      	orrs	r3, r2
 8007822:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	697a      	ldr	r2, [r7, #20]
 800782a:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	461a      	mov	r2, r3
 8007832:	4b6e      	ldr	r3, [pc, #440]	; (80079ec <HAL_DMA_Init+0x650>)
 8007834:	4413      	add	r3, r2
 8007836:	4a6e      	ldr	r2, [pc, #440]	; (80079f0 <HAL_DMA_Init+0x654>)
 8007838:	fba2 2303 	umull	r2, r3, r2, r3
 800783c:	091b      	lsrs	r3, r3, #4
 800783e:	009a      	lsls	r2, r3, #2
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007844:	6878      	ldr	r0, [r7, #4]
 8007846:	f002 f9a9 	bl	8009b9c <DMA_CalcBaseAndBitshift>
 800784a:	4603      	mov	r3, r0
 800784c:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007852:	f003 031f 	and.w	r3, r3, #31
 8007856:	2201      	movs	r2, #1
 8007858:	409a      	lsls	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	605a      	str	r2, [r3, #4]
 800785e:	e008      	b.n	8007872 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2240      	movs	r2, #64	; 0x40
 8007864:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2203      	movs	r2, #3
 800786a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    return HAL_ERROR;
 800786e:	2301      	movs	r3, #1
 8007870:	e0b7      	b.n	80079e2 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	4a5f      	ldr	r2, [pc, #380]	; (80079f4 <HAL_DMA_Init+0x658>)
 8007878:	4293      	cmp	r3, r2
 800787a:	d072      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	4a5d      	ldr	r2, [pc, #372]	; (80079f8 <HAL_DMA_Init+0x65c>)
 8007882:	4293      	cmp	r3, r2
 8007884:	d06d      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	4a5c      	ldr	r2, [pc, #368]	; (80079fc <HAL_DMA_Init+0x660>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d068      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	4a5a      	ldr	r2, [pc, #360]	; (8007a00 <HAL_DMA_Init+0x664>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d063      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a59      	ldr	r2, [pc, #356]	; (8007a04 <HAL_DMA_Init+0x668>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d05e      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a57      	ldr	r2, [pc, #348]	; (8007a08 <HAL_DMA_Init+0x66c>)
 80078aa:	4293      	cmp	r3, r2
 80078ac:	d059      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	4a56      	ldr	r2, [pc, #344]	; (8007a0c <HAL_DMA_Init+0x670>)
 80078b4:	4293      	cmp	r3, r2
 80078b6:	d054      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	4a54      	ldr	r2, [pc, #336]	; (8007a10 <HAL_DMA_Init+0x674>)
 80078be:	4293      	cmp	r3, r2
 80078c0:	d04f      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	4a53      	ldr	r2, [pc, #332]	; (8007a14 <HAL_DMA_Init+0x678>)
 80078c8:	4293      	cmp	r3, r2
 80078ca:	d04a      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	4a51      	ldr	r2, [pc, #324]	; (8007a18 <HAL_DMA_Init+0x67c>)
 80078d2:	4293      	cmp	r3, r2
 80078d4:	d045      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a50      	ldr	r2, [pc, #320]	; (8007a1c <HAL_DMA_Init+0x680>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d040      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	4a4e      	ldr	r2, [pc, #312]	; (8007a20 <HAL_DMA_Init+0x684>)
 80078e6:	4293      	cmp	r3, r2
 80078e8:	d03b      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a4d      	ldr	r2, [pc, #308]	; (8007a24 <HAL_DMA_Init+0x688>)
 80078f0:	4293      	cmp	r3, r2
 80078f2:	d036      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	4a4b      	ldr	r2, [pc, #300]	; (8007a28 <HAL_DMA_Init+0x68c>)
 80078fa:	4293      	cmp	r3, r2
 80078fc:	d031      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a4a      	ldr	r2, [pc, #296]	; (8007a2c <HAL_DMA_Init+0x690>)
 8007904:	4293      	cmp	r3, r2
 8007906:	d02c      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a48      	ldr	r2, [pc, #288]	; (8007a30 <HAL_DMA_Init+0x694>)
 800790e:	4293      	cmp	r3, r2
 8007910:	d027      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a47      	ldr	r2, [pc, #284]	; (8007a34 <HAL_DMA_Init+0x698>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d022      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	4a45      	ldr	r2, [pc, #276]	; (8007a38 <HAL_DMA_Init+0x69c>)
 8007922:	4293      	cmp	r3, r2
 8007924:	d01d      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a44      	ldr	r2, [pc, #272]	; (8007a3c <HAL_DMA_Init+0x6a0>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d018      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a42      	ldr	r2, [pc, #264]	; (8007a40 <HAL_DMA_Init+0x6a4>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d013      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a41      	ldr	r2, [pc, #260]	; (8007a44 <HAL_DMA_Init+0x6a8>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d00e      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a3f      	ldr	r2, [pc, #252]	; (8007a48 <HAL_DMA_Init+0x6ac>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d009      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a3e      	ldr	r2, [pc, #248]	; (8007a4c <HAL_DMA_Init+0x6b0>)
 8007954:	4293      	cmp	r3, r2
 8007956:	d004      	beq.n	8007962 <HAL_DMA_Init+0x5c6>
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	4a3c      	ldr	r2, [pc, #240]	; (8007a50 <HAL_DMA_Init+0x6b4>)
 800795e:	4293      	cmp	r3, r2
 8007960:	d101      	bne.n	8007966 <HAL_DMA_Init+0x5ca>
 8007962:	2301      	movs	r3, #1
 8007964:	e000      	b.n	8007968 <HAL_DMA_Init+0x5cc>
 8007966:	2300      	movs	r3, #0
 8007968:	2b00      	cmp	r3, #0
 800796a:	d032      	beq.n	80079d2 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800796c:	6878      	ldr	r0, [r7, #4]
 800796e:	f002 fa43 	bl	8009df8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	689b      	ldr	r3, [r3, #8]
 8007976:	2b80      	cmp	r3, #128	; 0x80
 8007978:	d102      	bne.n	8007980 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	685a      	ldr	r2, [r3, #4]
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007988:	b2d2      	uxtb	r2, r2
 800798a:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8007994:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	685b      	ldr	r3, [r3, #4]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d010      	beq.n	80079c0 <HAL_DMA_Init+0x624>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	685b      	ldr	r3, [r3, #4]
 80079a2:	2b08      	cmp	r3, #8
 80079a4:	d80c      	bhi.n	80079c0 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80079a6:	6878      	ldr	r0, [r7, #4]
 80079a8:	f002 fac0 	bl	8009f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079b0:	2200      	movs	r2, #0
 80079b2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b8:	687a      	ldr	r2, [r7, #4]
 80079ba:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80079bc:	605a      	str	r2, [r3, #4]
 80079be:	e008      	b.n	80079d2 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2200      	movs	r2, #0
 80079c4:	66da      	str	r2, [r3, #108]	; 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	2200      	movs	r2, #0
 80079ca:	671a      	str	r2, [r3, #112]	; 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	675a      	str	r2, [r3, #116]	; 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	2200      	movs	r2, #0
 80079d6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3718      	adds	r7, #24
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	a7fdabf8 	.word	0xa7fdabf8
 80079f0:	cccccccd 	.word	0xcccccccd
 80079f4:	40020010 	.word	0x40020010
 80079f8:	40020028 	.word	0x40020028
 80079fc:	40020040 	.word	0x40020040
 8007a00:	40020058 	.word	0x40020058
 8007a04:	40020070 	.word	0x40020070
 8007a08:	40020088 	.word	0x40020088
 8007a0c:	400200a0 	.word	0x400200a0
 8007a10:	400200b8 	.word	0x400200b8
 8007a14:	40020410 	.word	0x40020410
 8007a18:	40020428 	.word	0x40020428
 8007a1c:	40020440 	.word	0x40020440
 8007a20:	40020458 	.word	0x40020458
 8007a24:	40020470 	.word	0x40020470
 8007a28:	40020488 	.word	0x40020488
 8007a2c:	400204a0 	.word	0x400204a0
 8007a30:	400204b8 	.word	0x400204b8
 8007a34:	58025408 	.word	0x58025408
 8007a38:	5802541c 	.word	0x5802541c
 8007a3c:	58025430 	.word	0x58025430
 8007a40:	58025444 	.word	0x58025444
 8007a44:	58025458 	.word	0x58025458
 8007a48:	5802546c 	.word	0x5802546c
 8007a4c:	58025480 	.word	0x58025480
 8007a50:	58025494 	.word	0x58025494

08007a54 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007a54:	b580      	push	{r7, lr}
 8007a56:	b086      	sub	sp, #24
 8007a58:	af00      	add	r7, sp, #0
 8007a5a:	60f8      	str	r0, [r7, #12]
 8007a5c:	60b9      	str	r1, [r7, #8]
 8007a5e:	607a      	str	r2, [r7, #4]
 8007a60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007a62:	2300      	movs	r3, #0
 8007a64:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d101      	bne.n	8007a70 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8007a6c:	2301      	movs	r3, #1
 8007a6e:	e226      	b.n	8007ebe <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007a76:	2b01      	cmp	r3, #1
 8007a78:	d101      	bne.n	8007a7e <HAL_DMA_Start_IT+0x2a>
 8007a7a:	2302      	movs	r3, #2
 8007a7c:	e21f      	b.n	8007ebe <HAL_DMA_Start_IT+0x46a>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2201      	movs	r2, #1
 8007a82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a8c:	b2db      	uxtb	r3, r3
 8007a8e:	2b01      	cmp	r3, #1
 8007a90:	f040 820a 	bne.w	8007ea8 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	2202      	movs	r2, #2
 8007a98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	4a68      	ldr	r2, [pc, #416]	; (8007c48 <HAL_DMA_Start_IT+0x1f4>)
 8007aa8:	4293      	cmp	r3, r2
 8007aaa:	d04a      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4a66      	ldr	r2, [pc, #408]	; (8007c4c <HAL_DMA_Start_IT+0x1f8>)
 8007ab2:	4293      	cmp	r3, r2
 8007ab4:	d045      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	4a65      	ldr	r2, [pc, #404]	; (8007c50 <HAL_DMA_Start_IT+0x1fc>)
 8007abc:	4293      	cmp	r3, r2
 8007abe:	d040      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	4a63      	ldr	r2, [pc, #396]	; (8007c54 <HAL_DMA_Start_IT+0x200>)
 8007ac6:	4293      	cmp	r3, r2
 8007ac8:	d03b      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	4a62      	ldr	r2, [pc, #392]	; (8007c58 <HAL_DMA_Start_IT+0x204>)
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	d036      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	4a60      	ldr	r2, [pc, #384]	; (8007c5c <HAL_DMA_Start_IT+0x208>)
 8007ada:	4293      	cmp	r3, r2
 8007adc:	d031      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a5f      	ldr	r2, [pc, #380]	; (8007c60 <HAL_DMA_Start_IT+0x20c>)
 8007ae4:	4293      	cmp	r3, r2
 8007ae6:	d02c      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	4a5d      	ldr	r2, [pc, #372]	; (8007c64 <HAL_DMA_Start_IT+0x210>)
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d027      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	4a5c      	ldr	r2, [pc, #368]	; (8007c68 <HAL_DMA_Start_IT+0x214>)
 8007af8:	4293      	cmp	r3, r2
 8007afa:	d022      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a5a      	ldr	r2, [pc, #360]	; (8007c6c <HAL_DMA_Start_IT+0x218>)
 8007b02:	4293      	cmp	r3, r2
 8007b04:	d01d      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a59      	ldr	r2, [pc, #356]	; (8007c70 <HAL_DMA_Start_IT+0x21c>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d018      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a57      	ldr	r2, [pc, #348]	; (8007c74 <HAL_DMA_Start_IT+0x220>)
 8007b16:	4293      	cmp	r3, r2
 8007b18:	d013      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a56      	ldr	r2, [pc, #344]	; (8007c78 <HAL_DMA_Start_IT+0x224>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d00e      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a54      	ldr	r2, [pc, #336]	; (8007c7c <HAL_DMA_Start_IT+0x228>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d009      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a53      	ldr	r2, [pc, #332]	; (8007c80 <HAL_DMA_Start_IT+0x22c>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d004      	beq.n	8007b42 <HAL_DMA_Start_IT+0xee>
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a51      	ldr	r2, [pc, #324]	; (8007c84 <HAL_DMA_Start_IT+0x230>)
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d108      	bne.n	8007b54 <HAL_DMA_Start_IT+0x100>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681a      	ldr	r2, [r3, #0]
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	f022 0201 	bic.w	r2, r2, #1
 8007b50:	601a      	str	r2, [r3, #0]
 8007b52:	e007      	b.n	8007b64 <HAL_DMA_Start_IT+0x110>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	681a      	ldr	r2, [r3, #0]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f022 0201 	bic.w	r2, r2, #1
 8007b62:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007b64:	683b      	ldr	r3, [r7, #0]
 8007b66:	687a      	ldr	r2, [r7, #4]
 8007b68:	68b9      	ldr	r1, [r7, #8]
 8007b6a:	68f8      	ldr	r0, [r7, #12]
 8007b6c:	f001 fe6a 	bl	8009844 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a34      	ldr	r2, [pc, #208]	; (8007c48 <HAL_DMA_Start_IT+0x1f4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	d04a      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	4a33      	ldr	r2, [pc, #204]	; (8007c4c <HAL_DMA_Start_IT+0x1f8>)
 8007b80:	4293      	cmp	r3, r2
 8007b82:	d045      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	4a31      	ldr	r2, [pc, #196]	; (8007c50 <HAL_DMA_Start_IT+0x1fc>)
 8007b8a:	4293      	cmp	r3, r2
 8007b8c:	d040      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	4a30      	ldr	r2, [pc, #192]	; (8007c54 <HAL_DMA_Start_IT+0x200>)
 8007b94:	4293      	cmp	r3, r2
 8007b96:	d03b      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a2e      	ldr	r2, [pc, #184]	; (8007c58 <HAL_DMA_Start_IT+0x204>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d036      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007ba2:	68fb      	ldr	r3, [r7, #12]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	4a2d      	ldr	r2, [pc, #180]	; (8007c5c <HAL_DMA_Start_IT+0x208>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d031      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a2b      	ldr	r2, [pc, #172]	; (8007c60 <HAL_DMA_Start_IT+0x20c>)
 8007bb2:	4293      	cmp	r3, r2
 8007bb4:	d02c      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	4a2a      	ldr	r2, [pc, #168]	; (8007c64 <HAL_DMA_Start_IT+0x210>)
 8007bbc:	4293      	cmp	r3, r2
 8007bbe:	d027      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a28      	ldr	r2, [pc, #160]	; (8007c68 <HAL_DMA_Start_IT+0x214>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d022      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	4a27      	ldr	r2, [pc, #156]	; (8007c6c <HAL_DMA_Start_IT+0x218>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d01d      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a25      	ldr	r2, [pc, #148]	; (8007c70 <HAL_DMA_Start_IT+0x21c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d018      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	4a24      	ldr	r2, [pc, #144]	; (8007c74 <HAL_DMA_Start_IT+0x220>)
 8007be4:	4293      	cmp	r3, r2
 8007be6:	d013      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007be8:	68fb      	ldr	r3, [r7, #12]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	4a22      	ldr	r2, [pc, #136]	; (8007c78 <HAL_DMA_Start_IT+0x224>)
 8007bee:	4293      	cmp	r3, r2
 8007bf0:	d00e      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a21      	ldr	r2, [pc, #132]	; (8007c7c <HAL_DMA_Start_IT+0x228>)
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d009      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	4a1f      	ldr	r2, [pc, #124]	; (8007c80 <HAL_DMA_Start_IT+0x22c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d004      	beq.n	8007c10 <HAL_DMA_Start_IT+0x1bc>
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	4a1e      	ldr	r2, [pc, #120]	; (8007c84 <HAL_DMA_Start_IT+0x230>)
 8007c0c:	4293      	cmp	r3, r2
 8007c0e:	d101      	bne.n	8007c14 <HAL_DMA_Start_IT+0x1c0>
 8007c10:	2301      	movs	r3, #1
 8007c12:	e000      	b.n	8007c16 <HAL_DMA_Start_IT+0x1c2>
 8007c14:	2300      	movs	r3, #0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d036      	beq.n	8007c88 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	f023 021e 	bic.w	r2, r3, #30
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f042 0216 	orr.w	r2, r2, #22
 8007c2c:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d03e      	beq.n	8007cb4 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	681a      	ldr	r2, [r3, #0]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f042 0208 	orr.w	r2, r2, #8
 8007c44:	601a      	str	r2, [r3, #0]
 8007c46:	e035      	b.n	8007cb4 <HAL_DMA_Start_IT+0x260>
 8007c48:	40020010 	.word	0x40020010
 8007c4c:	40020028 	.word	0x40020028
 8007c50:	40020040 	.word	0x40020040
 8007c54:	40020058 	.word	0x40020058
 8007c58:	40020070 	.word	0x40020070
 8007c5c:	40020088 	.word	0x40020088
 8007c60:	400200a0 	.word	0x400200a0
 8007c64:	400200b8 	.word	0x400200b8
 8007c68:	40020410 	.word	0x40020410
 8007c6c:	40020428 	.word	0x40020428
 8007c70:	40020440 	.word	0x40020440
 8007c74:	40020458 	.word	0x40020458
 8007c78:	40020470 	.word	0x40020470
 8007c7c:	40020488 	.word	0x40020488
 8007c80:	400204a0 	.word	0x400204a0
 8007c84:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	f023 020e 	bic.w	r2, r3, #14
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f042 020a 	orr.w	r2, r2, #10
 8007c9a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d007      	beq.n	8007cb4 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681a      	ldr	r2, [r3, #0]
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f042 0204 	orr.w	r2, r2, #4
 8007cb2:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	4a83      	ldr	r2, [pc, #524]	; (8007ec8 <HAL_DMA_Start_IT+0x474>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d072      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007cbe:	68fb      	ldr	r3, [r7, #12]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	4a82      	ldr	r2, [pc, #520]	; (8007ecc <HAL_DMA_Start_IT+0x478>)
 8007cc4:	4293      	cmp	r3, r2
 8007cc6:	d06d      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	4a80      	ldr	r2, [pc, #512]	; (8007ed0 <HAL_DMA_Start_IT+0x47c>)
 8007cce:	4293      	cmp	r3, r2
 8007cd0:	d068      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4a7f      	ldr	r2, [pc, #508]	; (8007ed4 <HAL_DMA_Start_IT+0x480>)
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d063      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	4a7d      	ldr	r2, [pc, #500]	; (8007ed8 <HAL_DMA_Start_IT+0x484>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d05e      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	4a7c      	ldr	r2, [pc, #496]	; (8007edc <HAL_DMA_Start_IT+0x488>)
 8007cec:	4293      	cmp	r3, r2
 8007cee:	d059      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	4a7a      	ldr	r2, [pc, #488]	; (8007ee0 <HAL_DMA_Start_IT+0x48c>)
 8007cf6:	4293      	cmp	r3, r2
 8007cf8:	d054      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	4a79      	ldr	r2, [pc, #484]	; (8007ee4 <HAL_DMA_Start_IT+0x490>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d04f      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	4a77      	ldr	r2, [pc, #476]	; (8007ee8 <HAL_DMA_Start_IT+0x494>)
 8007d0a:	4293      	cmp	r3, r2
 8007d0c:	d04a      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a76      	ldr	r2, [pc, #472]	; (8007eec <HAL_DMA_Start_IT+0x498>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d045      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	4a74      	ldr	r2, [pc, #464]	; (8007ef0 <HAL_DMA_Start_IT+0x49c>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d040      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4a73      	ldr	r2, [pc, #460]	; (8007ef4 <HAL_DMA_Start_IT+0x4a0>)
 8007d28:	4293      	cmp	r3, r2
 8007d2a:	d03b      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a71      	ldr	r2, [pc, #452]	; (8007ef8 <HAL_DMA_Start_IT+0x4a4>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d036      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	4a70      	ldr	r2, [pc, #448]	; (8007efc <HAL_DMA_Start_IT+0x4a8>)
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d031      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	4a6e      	ldr	r2, [pc, #440]	; (8007f00 <HAL_DMA_Start_IT+0x4ac>)
 8007d46:	4293      	cmp	r3, r2
 8007d48:	d02c      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	4a6d      	ldr	r2, [pc, #436]	; (8007f04 <HAL_DMA_Start_IT+0x4b0>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d027      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	4a6b      	ldr	r2, [pc, #428]	; (8007f08 <HAL_DMA_Start_IT+0x4b4>)
 8007d5a:	4293      	cmp	r3, r2
 8007d5c:	d022      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	4a6a      	ldr	r2, [pc, #424]	; (8007f0c <HAL_DMA_Start_IT+0x4b8>)
 8007d64:	4293      	cmp	r3, r2
 8007d66:	d01d      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	4a68      	ldr	r2, [pc, #416]	; (8007f10 <HAL_DMA_Start_IT+0x4bc>)
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d018      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4a67      	ldr	r2, [pc, #412]	; (8007f14 <HAL_DMA_Start_IT+0x4c0>)
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d013      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a65      	ldr	r2, [pc, #404]	; (8007f18 <HAL_DMA_Start_IT+0x4c4>)
 8007d82:	4293      	cmp	r3, r2
 8007d84:	d00e      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	4a64      	ldr	r2, [pc, #400]	; (8007f1c <HAL_DMA_Start_IT+0x4c8>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d009      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	4a62      	ldr	r2, [pc, #392]	; (8007f20 <HAL_DMA_Start_IT+0x4cc>)
 8007d96:	4293      	cmp	r3, r2
 8007d98:	d004      	beq.n	8007da4 <HAL_DMA_Start_IT+0x350>
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	4a61      	ldr	r2, [pc, #388]	; (8007f24 <HAL_DMA_Start_IT+0x4d0>)
 8007da0:	4293      	cmp	r3, r2
 8007da2:	d101      	bne.n	8007da8 <HAL_DMA_Start_IT+0x354>
 8007da4:	2301      	movs	r3, #1
 8007da6:	e000      	b.n	8007daa <HAL_DMA_Start_IT+0x356>
 8007da8:	2300      	movs	r3, #0
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d01a      	beq.n	8007de4 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc0:	681a      	ldr	r2, [r3, #0]
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007dc6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007dca:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d007      	beq.n	8007de4 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dd8:	681a      	ldr	r2, [r3, #0]
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007dde:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007de2:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4a37      	ldr	r2, [pc, #220]	; (8007ec8 <HAL_DMA_Start_IT+0x474>)
 8007dea:	4293      	cmp	r3, r2
 8007dec:	d04a      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	4a36      	ldr	r2, [pc, #216]	; (8007ecc <HAL_DMA_Start_IT+0x478>)
 8007df4:	4293      	cmp	r3, r2
 8007df6:	d045      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	4a34      	ldr	r2, [pc, #208]	; (8007ed0 <HAL_DMA_Start_IT+0x47c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d040      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	4a33      	ldr	r2, [pc, #204]	; (8007ed4 <HAL_DMA_Start_IT+0x480>)
 8007e08:	4293      	cmp	r3, r2
 8007e0a:	d03b      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	4a31      	ldr	r2, [pc, #196]	; (8007ed8 <HAL_DMA_Start_IT+0x484>)
 8007e12:	4293      	cmp	r3, r2
 8007e14:	d036      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4a30      	ldr	r2, [pc, #192]	; (8007edc <HAL_DMA_Start_IT+0x488>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d031      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	681b      	ldr	r3, [r3, #0]
 8007e24:	4a2e      	ldr	r2, [pc, #184]	; (8007ee0 <HAL_DMA_Start_IT+0x48c>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d02c      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	4a2d      	ldr	r2, [pc, #180]	; (8007ee4 <HAL_DMA_Start_IT+0x490>)
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d027      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a2b      	ldr	r2, [pc, #172]	; (8007ee8 <HAL_DMA_Start_IT+0x494>)
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d022      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	4a2a      	ldr	r2, [pc, #168]	; (8007eec <HAL_DMA_Start_IT+0x498>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d01d      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	4a28      	ldr	r2, [pc, #160]	; (8007ef0 <HAL_DMA_Start_IT+0x49c>)
 8007e4e:	4293      	cmp	r3, r2
 8007e50:	d018      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	4a27      	ldr	r2, [pc, #156]	; (8007ef4 <HAL_DMA_Start_IT+0x4a0>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d013      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	4a25      	ldr	r2, [pc, #148]	; (8007ef8 <HAL_DMA_Start_IT+0x4a4>)
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d00e      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a24      	ldr	r2, [pc, #144]	; (8007efc <HAL_DMA_Start_IT+0x4a8>)
 8007e6c:	4293      	cmp	r3, r2
 8007e6e:	d009      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4a22      	ldr	r2, [pc, #136]	; (8007f00 <HAL_DMA_Start_IT+0x4ac>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d004      	beq.n	8007e84 <HAL_DMA_Start_IT+0x430>
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	4a21      	ldr	r2, [pc, #132]	; (8007f04 <HAL_DMA_Start_IT+0x4b0>)
 8007e80:	4293      	cmp	r3, r2
 8007e82:	d108      	bne.n	8007e96 <HAL_DMA_Start_IT+0x442>
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]
 8007e94:	e012      	b.n	8007ebc <HAL_DMA_Start_IT+0x468>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	f042 0201 	orr.w	r2, r2, #1
 8007ea4:	601a      	str	r2, [r3, #0]
 8007ea6:	e009      	b.n	8007ebc <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007eae:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return error status */
    status = HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8007ebc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40020010 	.word	0x40020010
 8007ecc:	40020028 	.word	0x40020028
 8007ed0:	40020040 	.word	0x40020040
 8007ed4:	40020058 	.word	0x40020058
 8007ed8:	40020070 	.word	0x40020070
 8007edc:	40020088 	.word	0x40020088
 8007ee0:	400200a0 	.word	0x400200a0
 8007ee4:	400200b8 	.word	0x400200b8
 8007ee8:	40020410 	.word	0x40020410
 8007eec:	40020428 	.word	0x40020428
 8007ef0:	40020440 	.word	0x40020440
 8007ef4:	40020458 	.word	0x40020458
 8007ef8:	40020470 	.word	0x40020470
 8007efc:	40020488 	.word	0x40020488
 8007f00:	400204a0 	.word	0x400204a0
 8007f04:	400204b8 	.word	0x400204b8
 8007f08:	58025408 	.word	0x58025408
 8007f0c:	5802541c 	.word	0x5802541c
 8007f10:	58025430 	.word	0x58025430
 8007f14:	58025444 	.word	0x58025444
 8007f18:	58025458 	.word	0x58025458
 8007f1c:	5802546c 	.word	0x5802546c
 8007f20:	58025480 	.word	0x58025480
 8007f24:	58025494 	.word	0x58025494

08007f28 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b086      	sub	sp, #24
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007f30:	f7ff f8d4 	bl	80070dc <HAL_GetTick>
 8007f34:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d101      	bne.n	8007f40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	e2dc      	b.n	80084fa <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007f46:	b2db      	uxtb	r3, r3
 8007f48:	2b02      	cmp	r3, #2
 8007f4a:	d008      	beq.n	8007f5e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2280      	movs	r2, #128	; 0x80
 8007f50:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2200      	movs	r2, #0
 8007f56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	e2cd      	b.n	80084fa <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a76      	ldr	r2, [pc, #472]	; (800813c <HAL_DMA_Abort+0x214>)
 8007f64:	4293      	cmp	r3, r2
 8007f66:	d04a      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a74      	ldr	r2, [pc, #464]	; (8008140 <HAL_DMA_Abort+0x218>)
 8007f6e:	4293      	cmp	r3, r2
 8007f70:	d045      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	4a73      	ldr	r2, [pc, #460]	; (8008144 <HAL_DMA_Abort+0x21c>)
 8007f78:	4293      	cmp	r3, r2
 8007f7a:	d040      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	4a71      	ldr	r2, [pc, #452]	; (8008148 <HAL_DMA_Abort+0x220>)
 8007f82:	4293      	cmp	r3, r2
 8007f84:	d03b      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	4a70      	ldr	r2, [pc, #448]	; (800814c <HAL_DMA_Abort+0x224>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d036      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	4a6e      	ldr	r2, [pc, #440]	; (8008150 <HAL_DMA_Abort+0x228>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d031      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	4a6d      	ldr	r2, [pc, #436]	; (8008154 <HAL_DMA_Abort+0x22c>)
 8007fa0:	4293      	cmp	r3, r2
 8007fa2:	d02c      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4a6b      	ldr	r2, [pc, #428]	; (8008158 <HAL_DMA_Abort+0x230>)
 8007faa:	4293      	cmp	r3, r2
 8007fac:	d027      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	4a6a      	ldr	r2, [pc, #424]	; (800815c <HAL_DMA_Abort+0x234>)
 8007fb4:	4293      	cmp	r3, r2
 8007fb6:	d022      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	4a68      	ldr	r2, [pc, #416]	; (8008160 <HAL_DMA_Abort+0x238>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d01d      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	4a67      	ldr	r2, [pc, #412]	; (8008164 <HAL_DMA_Abort+0x23c>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d018      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	4a65      	ldr	r2, [pc, #404]	; (8008168 <HAL_DMA_Abort+0x240>)
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d013      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	4a64      	ldr	r2, [pc, #400]	; (800816c <HAL_DMA_Abort+0x244>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d00e      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a62      	ldr	r2, [pc, #392]	; (8008170 <HAL_DMA_Abort+0x248>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d009      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	4a61      	ldr	r2, [pc, #388]	; (8008174 <HAL_DMA_Abort+0x24c>)
 8007ff0:	4293      	cmp	r3, r2
 8007ff2:	d004      	beq.n	8007ffe <HAL_DMA_Abort+0xd6>
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	4a5f      	ldr	r2, [pc, #380]	; (8008178 <HAL_DMA_Abort+0x250>)
 8007ffa:	4293      	cmp	r3, r2
 8007ffc:	d101      	bne.n	8008002 <HAL_DMA_Abort+0xda>
 8007ffe:	2301      	movs	r3, #1
 8008000:	e000      	b.n	8008004 <HAL_DMA_Abort+0xdc>
 8008002:	2300      	movs	r3, #0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d013      	beq.n	8008030 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	681a      	ldr	r2, [r3, #0]
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f022 021e 	bic.w	r2, r2, #30
 8008016:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	695a      	ldr	r2, [r3, #20]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008026:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	617b      	str	r3, [r7, #20]
 800802e:	e00a      	b.n	8008046 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f022 020e 	bic.w	r2, r2, #14
 800803e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	4a3c      	ldr	r2, [pc, #240]	; (800813c <HAL_DMA_Abort+0x214>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d072      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4a3a      	ldr	r2, [pc, #232]	; (8008140 <HAL_DMA_Abort+0x218>)
 8008056:	4293      	cmp	r3, r2
 8008058:	d06d      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	4a39      	ldr	r2, [pc, #228]	; (8008144 <HAL_DMA_Abort+0x21c>)
 8008060:	4293      	cmp	r3, r2
 8008062:	d068      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	4a37      	ldr	r2, [pc, #220]	; (8008148 <HAL_DMA_Abort+0x220>)
 800806a:	4293      	cmp	r3, r2
 800806c:	d063      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a36      	ldr	r2, [pc, #216]	; (800814c <HAL_DMA_Abort+0x224>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d05e      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a34      	ldr	r2, [pc, #208]	; (8008150 <HAL_DMA_Abort+0x228>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d059      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	4a33      	ldr	r2, [pc, #204]	; (8008154 <HAL_DMA_Abort+0x22c>)
 8008088:	4293      	cmp	r3, r2
 800808a:	d054      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	4a31      	ldr	r2, [pc, #196]	; (8008158 <HAL_DMA_Abort+0x230>)
 8008092:	4293      	cmp	r3, r2
 8008094:	d04f      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	4a30      	ldr	r2, [pc, #192]	; (800815c <HAL_DMA_Abort+0x234>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d04a      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	4a2e      	ldr	r2, [pc, #184]	; (8008160 <HAL_DMA_Abort+0x238>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d045      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	4a2d      	ldr	r2, [pc, #180]	; (8008164 <HAL_DMA_Abort+0x23c>)
 80080b0:	4293      	cmp	r3, r2
 80080b2:	d040      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681b      	ldr	r3, [r3, #0]
 80080b8:	4a2b      	ldr	r2, [pc, #172]	; (8008168 <HAL_DMA_Abort+0x240>)
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d03b      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	4a2a      	ldr	r2, [pc, #168]	; (800816c <HAL_DMA_Abort+0x244>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d036      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a28      	ldr	r2, [pc, #160]	; (8008170 <HAL_DMA_Abort+0x248>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d031      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	4a27      	ldr	r2, [pc, #156]	; (8008174 <HAL_DMA_Abort+0x24c>)
 80080d8:	4293      	cmp	r3, r2
 80080da:	d02c      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a25      	ldr	r2, [pc, #148]	; (8008178 <HAL_DMA_Abort+0x250>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d027      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a24      	ldr	r2, [pc, #144]	; (800817c <HAL_DMA_Abort+0x254>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d022      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a22      	ldr	r2, [pc, #136]	; (8008180 <HAL_DMA_Abort+0x258>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d01d      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a21      	ldr	r2, [pc, #132]	; (8008184 <HAL_DMA_Abort+0x25c>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d018      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a1f      	ldr	r2, [pc, #124]	; (8008188 <HAL_DMA_Abort+0x260>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d013      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a1e      	ldr	r2, [pc, #120]	; (800818c <HAL_DMA_Abort+0x264>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d00e      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a1c      	ldr	r2, [pc, #112]	; (8008190 <HAL_DMA_Abort+0x268>)
 800811e:	4293      	cmp	r3, r2
 8008120:	d009      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	4a1b      	ldr	r2, [pc, #108]	; (8008194 <HAL_DMA_Abort+0x26c>)
 8008128:	4293      	cmp	r3, r2
 800812a:	d004      	beq.n	8008136 <HAL_DMA_Abort+0x20e>
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a19      	ldr	r2, [pc, #100]	; (8008198 <HAL_DMA_Abort+0x270>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d132      	bne.n	800819c <HAL_DMA_Abort+0x274>
 8008136:	2301      	movs	r3, #1
 8008138:	e031      	b.n	800819e <HAL_DMA_Abort+0x276>
 800813a:	bf00      	nop
 800813c:	40020010 	.word	0x40020010
 8008140:	40020028 	.word	0x40020028
 8008144:	40020040 	.word	0x40020040
 8008148:	40020058 	.word	0x40020058
 800814c:	40020070 	.word	0x40020070
 8008150:	40020088 	.word	0x40020088
 8008154:	400200a0 	.word	0x400200a0
 8008158:	400200b8 	.word	0x400200b8
 800815c:	40020410 	.word	0x40020410
 8008160:	40020428 	.word	0x40020428
 8008164:	40020440 	.word	0x40020440
 8008168:	40020458 	.word	0x40020458
 800816c:	40020470 	.word	0x40020470
 8008170:	40020488 	.word	0x40020488
 8008174:	400204a0 	.word	0x400204a0
 8008178:	400204b8 	.word	0x400204b8
 800817c:	58025408 	.word	0x58025408
 8008180:	5802541c 	.word	0x5802541c
 8008184:	58025430 	.word	0x58025430
 8008188:	58025444 	.word	0x58025444
 800818c:	58025458 	.word	0x58025458
 8008190:	5802546c 	.word	0x5802546c
 8008194:	58025480 	.word	0x58025480
 8008198:	58025494 	.word	0x58025494
 800819c:	2300      	movs	r3, #0
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d007      	beq.n	80081b2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80081ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80081b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4a6d      	ldr	r2, [pc, #436]	; (800836c <HAL_DMA_Abort+0x444>)
 80081b8:	4293      	cmp	r3, r2
 80081ba:	d04a      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	4a6b      	ldr	r2, [pc, #428]	; (8008370 <HAL_DMA_Abort+0x448>)
 80081c2:	4293      	cmp	r3, r2
 80081c4:	d045      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	4a6a      	ldr	r2, [pc, #424]	; (8008374 <HAL_DMA_Abort+0x44c>)
 80081cc:	4293      	cmp	r3, r2
 80081ce:	d040      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	4a68      	ldr	r2, [pc, #416]	; (8008378 <HAL_DMA_Abort+0x450>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d03b      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	4a67      	ldr	r2, [pc, #412]	; (800837c <HAL_DMA_Abort+0x454>)
 80081e0:	4293      	cmp	r3, r2
 80081e2:	d036      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	4a65      	ldr	r2, [pc, #404]	; (8008380 <HAL_DMA_Abort+0x458>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d031      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a64      	ldr	r2, [pc, #400]	; (8008384 <HAL_DMA_Abort+0x45c>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d02c      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	4a62      	ldr	r2, [pc, #392]	; (8008388 <HAL_DMA_Abort+0x460>)
 80081fe:	4293      	cmp	r3, r2
 8008200:	d027      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	4a61      	ldr	r2, [pc, #388]	; (800838c <HAL_DMA_Abort+0x464>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d022      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4a5f      	ldr	r2, [pc, #380]	; (8008390 <HAL_DMA_Abort+0x468>)
 8008212:	4293      	cmp	r3, r2
 8008214:	d01d      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a5e      	ldr	r2, [pc, #376]	; (8008394 <HAL_DMA_Abort+0x46c>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d018      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	4a5c      	ldr	r2, [pc, #368]	; (8008398 <HAL_DMA_Abort+0x470>)
 8008226:	4293      	cmp	r3, r2
 8008228:	d013      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	4a5b      	ldr	r2, [pc, #364]	; (800839c <HAL_DMA_Abort+0x474>)
 8008230:	4293      	cmp	r3, r2
 8008232:	d00e      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	4a59      	ldr	r2, [pc, #356]	; (80083a0 <HAL_DMA_Abort+0x478>)
 800823a:	4293      	cmp	r3, r2
 800823c:	d009      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	4a58      	ldr	r2, [pc, #352]	; (80083a4 <HAL_DMA_Abort+0x47c>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d004      	beq.n	8008252 <HAL_DMA_Abort+0x32a>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	4a56      	ldr	r2, [pc, #344]	; (80083a8 <HAL_DMA_Abort+0x480>)
 800824e:	4293      	cmp	r3, r2
 8008250:	d108      	bne.n	8008264 <HAL_DMA_Abort+0x33c>
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	681a      	ldr	r2, [r3, #0]
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f022 0201 	bic.w	r2, r2, #1
 8008260:	601a      	str	r2, [r3, #0]
 8008262:	e007      	b.n	8008274 <HAL_DMA_Abort+0x34c>
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	681a      	ldr	r2, [r3, #0]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f022 0201 	bic.w	r2, r2, #1
 8008272:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8008274:	e013      	b.n	800829e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008276:	f7fe ff31 	bl	80070dc <HAL_GetTick>
 800827a:	4602      	mov	r2, r0
 800827c:	693b      	ldr	r3, [r7, #16]
 800827e:	1ad3      	subs	r3, r2, r3
 8008280:	2b05      	cmp	r3, #5
 8008282:	d90c      	bls.n	800829e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2220      	movs	r2, #32
 8008288:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2203      	movs	r2, #3
 800828e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	2200      	movs	r2, #0
 8008296:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 800829a:	2301      	movs	r3, #1
 800829c:	e12d      	b.n	80084fa <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	f003 0301 	and.w	r3, r3, #1
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d1e5      	bne.n	8008276 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	4a2f      	ldr	r2, [pc, #188]	; (800836c <HAL_DMA_Abort+0x444>)
 80082b0:	4293      	cmp	r3, r2
 80082b2:	d04a      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	4a2d      	ldr	r2, [pc, #180]	; (8008370 <HAL_DMA_Abort+0x448>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d045      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4a2c      	ldr	r2, [pc, #176]	; (8008374 <HAL_DMA_Abort+0x44c>)
 80082c4:	4293      	cmp	r3, r2
 80082c6:	d040      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	4a2a      	ldr	r2, [pc, #168]	; (8008378 <HAL_DMA_Abort+0x450>)
 80082ce:	4293      	cmp	r3, r2
 80082d0:	d03b      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	4a29      	ldr	r2, [pc, #164]	; (800837c <HAL_DMA_Abort+0x454>)
 80082d8:	4293      	cmp	r3, r2
 80082da:	d036      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	4a27      	ldr	r2, [pc, #156]	; (8008380 <HAL_DMA_Abort+0x458>)
 80082e2:	4293      	cmp	r3, r2
 80082e4:	d031      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	4a26      	ldr	r2, [pc, #152]	; (8008384 <HAL_DMA_Abort+0x45c>)
 80082ec:	4293      	cmp	r3, r2
 80082ee:	d02c      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	4a24      	ldr	r2, [pc, #144]	; (8008388 <HAL_DMA_Abort+0x460>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d027      	beq.n	800834a <HAL_DMA_Abort+0x422>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	4a23      	ldr	r2, [pc, #140]	; (800838c <HAL_DMA_Abort+0x464>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d022      	beq.n	800834a <HAL_DMA_Abort+0x422>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	4a21      	ldr	r2, [pc, #132]	; (8008390 <HAL_DMA_Abort+0x468>)
 800830a:	4293      	cmp	r3, r2
 800830c:	d01d      	beq.n	800834a <HAL_DMA_Abort+0x422>
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	4a20      	ldr	r2, [pc, #128]	; (8008394 <HAL_DMA_Abort+0x46c>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d018      	beq.n	800834a <HAL_DMA_Abort+0x422>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	4a1e      	ldr	r2, [pc, #120]	; (8008398 <HAL_DMA_Abort+0x470>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d013      	beq.n	800834a <HAL_DMA_Abort+0x422>
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	4a1d      	ldr	r2, [pc, #116]	; (800839c <HAL_DMA_Abort+0x474>)
 8008328:	4293      	cmp	r3, r2
 800832a:	d00e      	beq.n	800834a <HAL_DMA_Abort+0x422>
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	4a1b      	ldr	r2, [pc, #108]	; (80083a0 <HAL_DMA_Abort+0x478>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d009      	beq.n	800834a <HAL_DMA_Abort+0x422>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4a1a      	ldr	r2, [pc, #104]	; (80083a4 <HAL_DMA_Abort+0x47c>)
 800833c:	4293      	cmp	r3, r2
 800833e:	d004      	beq.n	800834a <HAL_DMA_Abort+0x422>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	4a18      	ldr	r2, [pc, #96]	; (80083a8 <HAL_DMA_Abort+0x480>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d101      	bne.n	800834e <HAL_DMA_Abort+0x426>
 800834a:	2301      	movs	r3, #1
 800834c:	e000      	b.n	8008350 <HAL_DMA_Abort+0x428>
 800834e:	2300      	movs	r3, #0
 8008350:	2b00      	cmp	r3, #0
 8008352:	d02b      	beq.n	80083ac <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008358:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800835e:	f003 031f 	and.w	r3, r3, #31
 8008362:	223f      	movs	r2, #63	; 0x3f
 8008364:	409a      	lsls	r2, r3
 8008366:	68bb      	ldr	r3, [r7, #8]
 8008368:	609a      	str	r2, [r3, #8]
 800836a:	e02a      	b.n	80083c2 <HAL_DMA_Abort+0x49a>
 800836c:	40020010 	.word	0x40020010
 8008370:	40020028 	.word	0x40020028
 8008374:	40020040 	.word	0x40020040
 8008378:	40020058 	.word	0x40020058
 800837c:	40020070 	.word	0x40020070
 8008380:	40020088 	.word	0x40020088
 8008384:	400200a0 	.word	0x400200a0
 8008388:	400200b8 	.word	0x400200b8
 800838c:	40020410 	.word	0x40020410
 8008390:	40020428 	.word	0x40020428
 8008394:	40020440 	.word	0x40020440
 8008398:	40020458 	.word	0x40020458
 800839c:	40020470 	.word	0x40020470
 80083a0:	40020488 	.word	0x40020488
 80083a4:	400204a0 	.word	0x400204a0
 80083a8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80083b0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80083b6:	f003 031f 	and.w	r3, r3, #31
 80083ba:	2201      	movs	r2, #1
 80083bc:	409a      	lsls	r2, r3
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	4a4f      	ldr	r2, [pc, #316]	; (8008504 <HAL_DMA_Abort+0x5dc>)
 80083c8:	4293      	cmp	r3, r2
 80083ca:	d072      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a4d      	ldr	r2, [pc, #308]	; (8008508 <HAL_DMA_Abort+0x5e0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d06d      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a4c      	ldr	r2, [pc, #304]	; (800850c <HAL_DMA_Abort+0x5e4>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d068      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	4a4a      	ldr	r2, [pc, #296]	; (8008510 <HAL_DMA_Abort+0x5e8>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d063      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a49      	ldr	r2, [pc, #292]	; (8008514 <HAL_DMA_Abort+0x5ec>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d05e      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	4a47      	ldr	r2, [pc, #284]	; (8008518 <HAL_DMA_Abort+0x5f0>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d059      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	4a46      	ldr	r2, [pc, #280]	; (800851c <HAL_DMA_Abort+0x5f4>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d054      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	4a44      	ldr	r2, [pc, #272]	; (8008520 <HAL_DMA_Abort+0x5f8>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d04f      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a43      	ldr	r2, [pc, #268]	; (8008524 <HAL_DMA_Abort+0x5fc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d04a      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	4a41      	ldr	r2, [pc, #260]	; (8008528 <HAL_DMA_Abort+0x600>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d045      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	4a40      	ldr	r2, [pc, #256]	; (800852c <HAL_DMA_Abort+0x604>)
 800842c:	4293      	cmp	r3, r2
 800842e:	d040      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	4a3e      	ldr	r2, [pc, #248]	; (8008530 <HAL_DMA_Abort+0x608>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d03b      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	4a3d      	ldr	r2, [pc, #244]	; (8008534 <HAL_DMA_Abort+0x60c>)
 8008440:	4293      	cmp	r3, r2
 8008442:	d036      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	4a3b      	ldr	r2, [pc, #236]	; (8008538 <HAL_DMA_Abort+0x610>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d031      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	4a3a      	ldr	r2, [pc, #232]	; (800853c <HAL_DMA_Abort+0x614>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d02c      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a38      	ldr	r2, [pc, #224]	; (8008540 <HAL_DMA_Abort+0x618>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d027      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	4a37      	ldr	r2, [pc, #220]	; (8008544 <HAL_DMA_Abort+0x61c>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d022      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	4a35      	ldr	r2, [pc, #212]	; (8008548 <HAL_DMA_Abort+0x620>)
 8008472:	4293      	cmp	r3, r2
 8008474:	d01d      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	4a34      	ldr	r2, [pc, #208]	; (800854c <HAL_DMA_Abort+0x624>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d018      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a32      	ldr	r2, [pc, #200]	; (8008550 <HAL_DMA_Abort+0x628>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d013      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4a31      	ldr	r2, [pc, #196]	; (8008554 <HAL_DMA_Abort+0x62c>)
 8008490:	4293      	cmp	r3, r2
 8008492:	d00e      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a2f      	ldr	r2, [pc, #188]	; (8008558 <HAL_DMA_Abort+0x630>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d009      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a2e      	ldr	r2, [pc, #184]	; (800855c <HAL_DMA_Abort+0x634>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d004      	beq.n	80084b2 <HAL_DMA_Abort+0x58a>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a2c      	ldr	r2, [pc, #176]	; (8008560 <HAL_DMA_Abort+0x638>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d101      	bne.n	80084b6 <HAL_DMA_Abort+0x58e>
 80084b2:	2301      	movs	r3, #1
 80084b4:	e000      	b.n	80084b8 <HAL_DMA_Abort+0x590>
 80084b6:	2300      	movs	r3, #0
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d015      	beq.n	80084e8 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80084c0:	687a      	ldr	r2, [r7, #4]
 80084c2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80084c4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d00c      	beq.n	80084e8 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d2:	681a      	ldr	r2, [r3, #0]
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80084d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80084dc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e2:	687a      	ldr	r2, [r7, #4]
 80084e4:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80084e6:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	2201      	movs	r2, #1
 80084ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2200      	movs	r2, #0
 80084f4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3718      	adds	r7, #24
 80084fe:	46bd      	mov	sp, r7
 8008500:	bd80      	pop	{r7, pc}
 8008502:	bf00      	nop
 8008504:	40020010 	.word	0x40020010
 8008508:	40020028 	.word	0x40020028
 800850c:	40020040 	.word	0x40020040
 8008510:	40020058 	.word	0x40020058
 8008514:	40020070 	.word	0x40020070
 8008518:	40020088 	.word	0x40020088
 800851c:	400200a0 	.word	0x400200a0
 8008520:	400200b8 	.word	0x400200b8
 8008524:	40020410 	.word	0x40020410
 8008528:	40020428 	.word	0x40020428
 800852c:	40020440 	.word	0x40020440
 8008530:	40020458 	.word	0x40020458
 8008534:	40020470 	.word	0x40020470
 8008538:	40020488 	.word	0x40020488
 800853c:	400204a0 	.word	0x400204a0
 8008540:	400204b8 	.word	0x400204b8
 8008544:	58025408 	.word	0x58025408
 8008548:	5802541c 	.word	0x5802541c
 800854c:	58025430 	.word	0x58025430
 8008550:	58025444 	.word	0x58025444
 8008554:	58025458 	.word	0x58025458
 8008558:	5802546c 	.word	0x5802546c
 800855c:	58025480 	.word	0x58025480
 8008560:	58025494 	.word	0x58025494

08008564 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008564:	b580      	push	{r7, lr}
 8008566:	b084      	sub	sp, #16
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e237      	b.n	80089e6 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800857c:	b2db      	uxtb	r3, r3
 800857e:	2b02      	cmp	r3, #2
 8008580:	d004      	beq.n	800858c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	2280      	movs	r2, #128	; 0x80
 8008586:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8008588:	2301      	movs	r3, #1
 800858a:	e22c      	b.n	80089e6 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	4a5c      	ldr	r2, [pc, #368]	; (8008704 <HAL_DMA_Abort_IT+0x1a0>)
 8008592:	4293      	cmp	r3, r2
 8008594:	d04a      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a5b      	ldr	r2, [pc, #364]	; (8008708 <HAL_DMA_Abort_IT+0x1a4>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d045      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	681b      	ldr	r3, [r3, #0]
 80085a4:	4a59      	ldr	r2, [pc, #356]	; (800870c <HAL_DMA_Abort_IT+0x1a8>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d040      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	4a58      	ldr	r2, [pc, #352]	; (8008710 <HAL_DMA_Abort_IT+0x1ac>)
 80085b0:	4293      	cmp	r3, r2
 80085b2:	d03b      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a56      	ldr	r2, [pc, #344]	; (8008714 <HAL_DMA_Abort_IT+0x1b0>)
 80085ba:	4293      	cmp	r3, r2
 80085bc:	d036      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a55      	ldr	r2, [pc, #340]	; (8008718 <HAL_DMA_Abort_IT+0x1b4>)
 80085c4:	4293      	cmp	r3, r2
 80085c6:	d031      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	4a53      	ldr	r2, [pc, #332]	; (800871c <HAL_DMA_Abort_IT+0x1b8>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d02c      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	4a52      	ldr	r2, [pc, #328]	; (8008720 <HAL_DMA_Abort_IT+0x1bc>)
 80085d8:	4293      	cmp	r3, r2
 80085da:	d027      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	4a50      	ldr	r2, [pc, #320]	; (8008724 <HAL_DMA_Abort_IT+0x1c0>)
 80085e2:	4293      	cmp	r3, r2
 80085e4:	d022      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4a4f      	ldr	r2, [pc, #316]	; (8008728 <HAL_DMA_Abort_IT+0x1c4>)
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d01d      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	4a4d      	ldr	r2, [pc, #308]	; (800872c <HAL_DMA_Abort_IT+0x1c8>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d018      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a4c      	ldr	r2, [pc, #304]	; (8008730 <HAL_DMA_Abort_IT+0x1cc>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d013      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a4a      	ldr	r2, [pc, #296]	; (8008734 <HAL_DMA_Abort_IT+0x1d0>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d00e      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a49      	ldr	r2, [pc, #292]	; (8008738 <HAL_DMA_Abort_IT+0x1d4>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d009      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a47      	ldr	r2, [pc, #284]	; (800873c <HAL_DMA_Abort_IT+0x1d8>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d004      	beq.n	800862c <HAL_DMA_Abort_IT+0xc8>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a46      	ldr	r2, [pc, #280]	; (8008740 <HAL_DMA_Abort_IT+0x1dc>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d101      	bne.n	8008630 <HAL_DMA_Abort_IT+0xcc>
 800862c:	2301      	movs	r3, #1
 800862e:	e000      	b.n	8008632 <HAL_DMA_Abort_IT+0xce>
 8008630:	2300      	movs	r3, #0
 8008632:	2b00      	cmp	r3, #0
 8008634:	f000 8086 	beq.w	8008744 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	2204      	movs	r2, #4
 800863c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a2f      	ldr	r2, [pc, #188]	; (8008704 <HAL_DMA_Abort_IT+0x1a0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d04a      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2e      	ldr	r2, [pc, #184]	; (8008708 <HAL_DMA_Abort_IT+0x1a4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d045      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4a2c      	ldr	r2, [pc, #176]	; (800870c <HAL_DMA_Abort_IT+0x1a8>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d040      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a2b      	ldr	r2, [pc, #172]	; (8008710 <HAL_DMA_Abort_IT+0x1ac>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d03b      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	4a29      	ldr	r2, [pc, #164]	; (8008714 <HAL_DMA_Abort_IT+0x1b0>)
 800866e:	4293      	cmp	r3, r2
 8008670:	d036      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	4a28      	ldr	r2, [pc, #160]	; (8008718 <HAL_DMA_Abort_IT+0x1b4>)
 8008678:	4293      	cmp	r3, r2
 800867a:	d031      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4a26      	ldr	r2, [pc, #152]	; (800871c <HAL_DMA_Abort_IT+0x1b8>)
 8008682:	4293      	cmp	r3, r2
 8008684:	d02c      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a25      	ldr	r2, [pc, #148]	; (8008720 <HAL_DMA_Abort_IT+0x1bc>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d027      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a23      	ldr	r2, [pc, #140]	; (8008724 <HAL_DMA_Abort_IT+0x1c0>)
 8008696:	4293      	cmp	r3, r2
 8008698:	d022      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	4a22      	ldr	r2, [pc, #136]	; (8008728 <HAL_DMA_Abort_IT+0x1c4>)
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d01d      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a20      	ldr	r2, [pc, #128]	; (800872c <HAL_DMA_Abort_IT+0x1c8>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d018      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1f      	ldr	r2, [pc, #124]	; (8008730 <HAL_DMA_Abort_IT+0x1cc>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d013      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a1d      	ldr	r2, [pc, #116]	; (8008734 <HAL_DMA_Abort_IT+0x1d0>)
 80086be:	4293      	cmp	r3, r2
 80086c0:	d00e      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4a1c      	ldr	r2, [pc, #112]	; (8008738 <HAL_DMA_Abort_IT+0x1d4>)
 80086c8:	4293      	cmp	r3, r2
 80086ca:	d009      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	4a1a      	ldr	r2, [pc, #104]	; (800873c <HAL_DMA_Abort_IT+0x1d8>)
 80086d2:	4293      	cmp	r3, r2
 80086d4:	d004      	beq.n	80086e0 <HAL_DMA_Abort_IT+0x17c>
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a19      	ldr	r2, [pc, #100]	; (8008740 <HAL_DMA_Abort_IT+0x1dc>)
 80086dc:	4293      	cmp	r3, r2
 80086de:	d108      	bne.n	80086f2 <HAL_DMA_Abort_IT+0x18e>
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	681a      	ldr	r2, [r3, #0]
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	f022 0201 	bic.w	r2, r2, #1
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	e178      	b.n	80089e4 <HAL_DMA_Abort_IT+0x480>
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	681b      	ldr	r3, [r3, #0]
 80086f6:	681a      	ldr	r2, [r3, #0]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	681b      	ldr	r3, [r3, #0]
 80086fc:	f022 0201 	bic.w	r2, r2, #1
 8008700:	601a      	str	r2, [r3, #0]
 8008702:	e16f      	b.n	80089e4 <HAL_DMA_Abort_IT+0x480>
 8008704:	40020010 	.word	0x40020010
 8008708:	40020028 	.word	0x40020028
 800870c:	40020040 	.word	0x40020040
 8008710:	40020058 	.word	0x40020058
 8008714:	40020070 	.word	0x40020070
 8008718:	40020088 	.word	0x40020088
 800871c:	400200a0 	.word	0x400200a0
 8008720:	400200b8 	.word	0x400200b8
 8008724:	40020410 	.word	0x40020410
 8008728:	40020428 	.word	0x40020428
 800872c:	40020440 	.word	0x40020440
 8008730:	40020458 	.word	0x40020458
 8008734:	40020470 	.word	0x40020470
 8008738:	40020488 	.word	0x40020488
 800873c:	400204a0 	.word	0x400204a0
 8008740:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	681a      	ldr	r2, [r3, #0]
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f022 020e 	bic.w	r2, r2, #14
 8008752:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a6c      	ldr	r2, [pc, #432]	; (800890c <HAL_DMA_Abort_IT+0x3a8>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d04a      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4a6b      	ldr	r2, [pc, #428]	; (8008910 <HAL_DMA_Abort_IT+0x3ac>)
 8008764:	4293      	cmp	r3, r2
 8008766:	d045      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a69      	ldr	r2, [pc, #420]	; (8008914 <HAL_DMA_Abort_IT+0x3b0>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d040      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	4a68      	ldr	r2, [pc, #416]	; (8008918 <HAL_DMA_Abort_IT+0x3b4>)
 8008778:	4293      	cmp	r3, r2
 800877a:	d03b      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	4a66      	ldr	r2, [pc, #408]	; (800891c <HAL_DMA_Abort_IT+0x3b8>)
 8008782:	4293      	cmp	r3, r2
 8008784:	d036      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	4a65      	ldr	r2, [pc, #404]	; (8008920 <HAL_DMA_Abort_IT+0x3bc>)
 800878c:	4293      	cmp	r3, r2
 800878e:	d031      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	681b      	ldr	r3, [r3, #0]
 8008794:	4a63      	ldr	r2, [pc, #396]	; (8008924 <HAL_DMA_Abort_IT+0x3c0>)
 8008796:	4293      	cmp	r3, r2
 8008798:	d02c      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	4a62      	ldr	r2, [pc, #392]	; (8008928 <HAL_DMA_Abort_IT+0x3c4>)
 80087a0:	4293      	cmp	r3, r2
 80087a2:	d027      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	4a60      	ldr	r2, [pc, #384]	; (800892c <HAL_DMA_Abort_IT+0x3c8>)
 80087aa:	4293      	cmp	r3, r2
 80087ac:	d022      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	4a5f      	ldr	r2, [pc, #380]	; (8008930 <HAL_DMA_Abort_IT+0x3cc>)
 80087b4:	4293      	cmp	r3, r2
 80087b6:	d01d      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	4a5d      	ldr	r2, [pc, #372]	; (8008934 <HAL_DMA_Abort_IT+0x3d0>)
 80087be:	4293      	cmp	r3, r2
 80087c0:	d018      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a5c      	ldr	r2, [pc, #368]	; (8008938 <HAL_DMA_Abort_IT+0x3d4>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d013      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a5a      	ldr	r2, [pc, #360]	; (800893c <HAL_DMA_Abort_IT+0x3d8>)
 80087d2:	4293      	cmp	r3, r2
 80087d4:	d00e      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a59      	ldr	r2, [pc, #356]	; (8008940 <HAL_DMA_Abort_IT+0x3dc>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d009      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a57      	ldr	r2, [pc, #348]	; (8008944 <HAL_DMA_Abort_IT+0x3e0>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d004      	beq.n	80087f4 <HAL_DMA_Abort_IT+0x290>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a56      	ldr	r2, [pc, #344]	; (8008948 <HAL_DMA_Abort_IT+0x3e4>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d108      	bne.n	8008806 <HAL_DMA_Abort_IT+0x2a2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f022 0201 	bic.w	r2, r2, #1
 8008802:	601a      	str	r2, [r3, #0]
 8008804:	e007      	b.n	8008816 <HAL_DMA_Abort_IT+0x2b2>
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681a      	ldr	r2, [r3, #0]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	f022 0201 	bic.w	r2, r2, #1
 8008814:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4a3c      	ldr	r2, [pc, #240]	; (800890c <HAL_DMA_Abort_IT+0x3a8>)
 800881c:	4293      	cmp	r3, r2
 800881e:	d072      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	4a3a      	ldr	r2, [pc, #232]	; (8008910 <HAL_DMA_Abort_IT+0x3ac>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d06d      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a39      	ldr	r2, [pc, #228]	; (8008914 <HAL_DMA_Abort_IT+0x3b0>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d068      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	4a37      	ldr	r2, [pc, #220]	; (8008918 <HAL_DMA_Abort_IT+0x3b4>)
 800883a:	4293      	cmp	r3, r2
 800883c:	d063      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a36      	ldr	r2, [pc, #216]	; (800891c <HAL_DMA_Abort_IT+0x3b8>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d05e      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a34      	ldr	r2, [pc, #208]	; (8008920 <HAL_DMA_Abort_IT+0x3bc>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d059      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a33      	ldr	r2, [pc, #204]	; (8008924 <HAL_DMA_Abort_IT+0x3c0>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d054      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a31      	ldr	r2, [pc, #196]	; (8008928 <HAL_DMA_Abort_IT+0x3c4>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d04f      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a30      	ldr	r2, [pc, #192]	; (800892c <HAL_DMA_Abort_IT+0x3c8>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d04a      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	4a2e      	ldr	r2, [pc, #184]	; (8008930 <HAL_DMA_Abort_IT+0x3cc>)
 8008876:	4293      	cmp	r3, r2
 8008878:	d045      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4a2d      	ldr	r2, [pc, #180]	; (8008934 <HAL_DMA_Abort_IT+0x3d0>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d040      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	4a2b      	ldr	r2, [pc, #172]	; (8008938 <HAL_DMA_Abort_IT+0x3d4>)
 800888a:	4293      	cmp	r3, r2
 800888c:	d03b      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a2a      	ldr	r2, [pc, #168]	; (800893c <HAL_DMA_Abort_IT+0x3d8>)
 8008894:	4293      	cmp	r3, r2
 8008896:	d036      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a28      	ldr	r2, [pc, #160]	; (8008940 <HAL_DMA_Abort_IT+0x3dc>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d031      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a27      	ldr	r2, [pc, #156]	; (8008944 <HAL_DMA_Abort_IT+0x3e0>)
 80088a8:	4293      	cmp	r3, r2
 80088aa:	d02c      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a25      	ldr	r2, [pc, #148]	; (8008948 <HAL_DMA_Abort_IT+0x3e4>)
 80088b2:	4293      	cmp	r3, r2
 80088b4:	d027      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	4a24      	ldr	r2, [pc, #144]	; (800894c <HAL_DMA_Abort_IT+0x3e8>)
 80088bc:	4293      	cmp	r3, r2
 80088be:	d022      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a22      	ldr	r2, [pc, #136]	; (8008950 <HAL_DMA_Abort_IT+0x3ec>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d01d      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	4a21      	ldr	r2, [pc, #132]	; (8008954 <HAL_DMA_Abort_IT+0x3f0>)
 80088d0:	4293      	cmp	r3, r2
 80088d2:	d018      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	4a1f      	ldr	r2, [pc, #124]	; (8008958 <HAL_DMA_Abort_IT+0x3f4>)
 80088da:	4293      	cmp	r3, r2
 80088dc:	d013      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	4a1e      	ldr	r2, [pc, #120]	; (800895c <HAL_DMA_Abort_IT+0x3f8>)
 80088e4:	4293      	cmp	r3, r2
 80088e6:	d00e      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	4a1c      	ldr	r2, [pc, #112]	; (8008960 <HAL_DMA_Abort_IT+0x3fc>)
 80088ee:	4293      	cmp	r3, r2
 80088f0:	d009      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	4a1b      	ldr	r2, [pc, #108]	; (8008964 <HAL_DMA_Abort_IT+0x400>)
 80088f8:	4293      	cmp	r3, r2
 80088fa:	d004      	beq.n	8008906 <HAL_DMA_Abort_IT+0x3a2>
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	4a19      	ldr	r2, [pc, #100]	; (8008968 <HAL_DMA_Abort_IT+0x404>)
 8008902:	4293      	cmp	r3, r2
 8008904:	d132      	bne.n	800896c <HAL_DMA_Abort_IT+0x408>
 8008906:	2301      	movs	r3, #1
 8008908:	e031      	b.n	800896e <HAL_DMA_Abort_IT+0x40a>
 800890a:	bf00      	nop
 800890c:	40020010 	.word	0x40020010
 8008910:	40020028 	.word	0x40020028
 8008914:	40020040 	.word	0x40020040
 8008918:	40020058 	.word	0x40020058
 800891c:	40020070 	.word	0x40020070
 8008920:	40020088 	.word	0x40020088
 8008924:	400200a0 	.word	0x400200a0
 8008928:	400200b8 	.word	0x400200b8
 800892c:	40020410 	.word	0x40020410
 8008930:	40020428 	.word	0x40020428
 8008934:	40020440 	.word	0x40020440
 8008938:	40020458 	.word	0x40020458
 800893c:	40020470 	.word	0x40020470
 8008940:	40020488 	.word	0x40020488
 8008944:	400204a0 	.word	0x400204a0
 8008948:	400204b8 	.word	0x400204b8
 800894c:	58025408 	.word	0x58025408
 8008950:	5802541c 	.word	0x5802541c
 8008954:	58025430 	.word	0x58025430
 8008958:	58025444 	.word	0x58025444
 800895c:	58025458 	.word	0x58025458
 8008960:	5802546c 	.word	0x5802546c
 8008964:	58025480 	.word	0x58025480
 8008968:	58025494 	.word	0x58025494
 800896c:	2300      	movs	r3, #0
 800896e:	2b00      	cmp	r3, #0
 8008970:	d028      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008976:	681a      	ldr	r2, [r3, #0]
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800897c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008980:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008986:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800898c:	f003 031f 	and.w	r3, r3, #31
 8008990:	2201      	movs	r2, #1
 8008992:	409a      	lsls	r2, r3
 8008994:	68fb      	ldr	r3, [r7, #12]
 8008996:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 80089a0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d00c      	beq.n	80089c4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80089b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80089b8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80089be:	687a      	ldr	r2, [r7, #4]
 80089c0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80089c2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	2201      	movs	r2, #1
 80089c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d003      	beq.n	80089e4 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 80089e4:	2300      	movs	r3, #0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3710      	adds	r7, #16
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop

080089f0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b08a      	sub	sp, #40	; 0x28
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80089f8:	2300      	movs	r3, #0
 80089fa:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80089fc:	4b67      	ldr	r3, [pc, #412]	; (8008b9c <HAL_DMA_IRQHandler+0x1ac>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	4a67      	ldr	r2, [pc, #412]	; (8008ba0 <HAL_DMA_IRQHandler+0x1b0>)
 8008a02:	fba2 2303 	umull	r2, r3, r2, r3
 8008a06:	0a9b      	lsrs	r3, r3, #10
 8008a08:	627b      	str	r3, [r7, #36]	; 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a0e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008a14:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8008a16:	6a3b      	ldr	r3, [r7, #32]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	4a5f      	ldr	r2, [pc, #380]	; (8008ba4 <HAL_DMA_IRQHandler+0x1b4>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d04a      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a5d      	ldr	r2, [pc, #372]	; (8008ba8 <HAL_DMA_IRQHandler+0x1b8>)
 8008a32:	4293      	cmp	r3, r2
 8008a34:	d045      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	4a5c      	ldr	r2, [pc, #368]	; (8008bac <HAL_DMA_IRQHandler+0x1bc>)
 8008a3c:	4293      	cmp	r3, r2
 8008a3e:	d040      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	4a5a      	ldr	r2, [pc, #360]	; (8008bb0 <HAL_DMA_IRQHandler+0x1c0>)
 8008a46:	4293      	cmp	r3, r2
 8008a48:	d03b      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a4a:	687b      	ldr	r3, [r7, #4]
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a59      	ldr	r2, [pc, #356]	; (8008bb4 <HAL_DMA_IRQHandler+0x1c4>)
 8008a50:	4293      	cmp	r3, r2
 8008a52:	d036      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	4a57      	ldr	r2, [pc, #348]	; (8008bb8 <HAL_DMA_IRQHandler+0x1c8>)
 8008a5a:	4293      	cmp	r3, r2
 8008a5c:	d031      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	4a56      	ldr	r2, [pc, #344]	; (8008bbc <HAL_DMA_IRQHandler+0x1cc>)
 8008a64:	4293      	cmp	r3, r2
 8008a66:	d02c      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a54      	ldr	r2, [pc, #336]	; (8008bc0 <HAL_DMA_IRQHandler+0x1d0>)
 8008a6e:	4293      	cmp	r3, r2
 8008a70:	d027      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	4a53      	ldr	r2, [pc, #332]	; (8008bc4 <HAL_DMA_IRQHandler+0x1d4>)
 8008a78:	4293      	cmp	r3, r2
 8008a7a:	d022      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	681b      	ldr	r3, [r3, #0]
 8008a80:	4a51      	ldr	r2, [pc, #324]	; (8008bc8 <HAL_DMA_IRQHandler+0x1d8>)
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d01d      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	4a50      	ldr	r2, [pc, #320]	; (8008bcc <HAL_DMA_IRQHandler+0x1dc>)
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	d018      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	4a4e      	ldr	r2, [pc, #312]	; (8008bd0 <HAL_DMA_IRQHandler+0x1e0>)
 8008a96:	4293      	cmp	r3, r2
 8008a98:	d013      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4a4d      	ldr	r2, [pc, #308]	; (8008bd4 <HAL_DMA_IRQHandler+0x1e4>)
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	d00e      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	4a4b      	ldr	r2, [pc, #300]	; (8008bd8 <HAL_DMA_IRQHandler+0x1e8>)
 8008aaa:	4293      	cmp	r3, r2
 8008aac:	d009      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	4a4a      	ldr	r2, [pc, #296]	; (8008bdc <HAL_DMA_IRQHandler+0x1ec>)
 8008ab4:	4293      	cmp	r3, r2
 8008ab6:	d004      	beq.n	8008ac2 <HAL_DMA_IRQHandler+0xd2>
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4a48      	ldr	r2, [pc, #288]	; (8008be0 <HAL_DMA_IRQHandler+0x1f0>)
 8008abe:	4293      	cmp	r3, r2
 8008ac0:	d101      	bne.n	8008ac6 <HAL_DMA_IRQHandler+0xd6>
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e000      	b.n	8008ac8 <HAL_DMA_IRQHandler+0xd8>
 8008ac6:	2300      	movs	r3, #0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	f000 842b 	beq.w	8009324 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008ad2:	f003 031f 	and.w	r3, r3, #31
 8008ad6:	2208      	movs	r2, #8
 8008ad8:	409a      	lsls	r2, r3
 8008ada:	69bb      	ldr	r3, [r7, #24]
 8008adc:	4013      	ands	r3, r2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	f000 80a2 	beq.w	8008c28 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	4a2e      	ldr	r2, [pc, #184]	; (8008ba4 <HAL_DMA_IRQHandler+0x1b4>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d04a      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	4a2d      	ldr	r2, [pc, #180]	; (8008ba8 <HAL_DMA_IRQHandler+0x1b8>)
 8008af4:	4293      	cmp	r3, r2
 8008af6:	d045      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	4a2b      	ldr	r2, [pc, #172]	; (8008bac <HAL_DMA_IRQHandler+0x1bc>)
 8008afe:	4293      	cmp	r3, r2
 8008b00:	d040      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	4a2a      	ldr	r2, [pc, #168]	; (8008bb0 <HAL_DMA_IRQHandler+0x1c0>)
 8008b08:	4293      	cmp	r3, r2
 8008b0a:	d03b      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	4a28      	ldr	r2, [pc, #160]	; (8008bb4 <HAL_DMA_IRQHandler+0x1c4>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d036      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a27      	ldr	r2, [pc, #156]	; (8008bb8 <HAL_DMA_IRQHandler+0x1c8>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d031      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a25      	ldr	r2, [pc, #148]	; (8008bbc <HAL_DMA_IRQHandler+0x1cc>)
 8008b26:	4293      	cmp	r3, r2
 8008b28:	d02c      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	4a24      	ldr	r2, [pc, #144]	; (8008bc0 <HAL_DMA_IRQHandler+0x1d0>)
 8008b30:	4293      	cmp	r3, r2
 8008b32:	d027      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	681b      	ldr	r3, [r3, #0]
 8008b38:	4a22      	ldr	r2, [pc, #136]	; (8008bc4 <HAL_DMA_IRQHandler+0x1d4>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d022      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	4a21      	ldr	r2, [pc, #132]	; (8008bc8 <HAL_DMA_IRQHandler+0x1d8>)
 8008b44:	4293      	cmp	r3, r2
 8008b46:	d01d      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	4a1f      	ldr	r2, [pc, #124]	; (8008bcc <HAL_DMA_IRQHandler+0x1dc>)
 8008b4e:	4293      	cmp	r3, r2
 8008b50:	d018      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a1e      	ldr	r2, [pc, #120]	; (8008bd0 <HAL_DMA_IRQHandler+0x1e0>)
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d013      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4a1c      	ldr	r2, [pc, #112]	; (8008bd4 <HAL_DMA_IRQHandler+0x1e4>)
 8008b62:	4293      	cmp	r3, r2
 8008b64:	d00e      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	4a1b      	ldr	r2, [pc, #108]	; (8008bd8 <HAL_DMA_IRQHandler+0x1e8>)
 8008b6c:	4293      	cmp	r3, r2
 8008b6e:	d009      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	4a19      	ldr	r2, [pc, #100]	; (8008bdc <HAL_DMA_IRQHandler+0x1ec>)
 8008b76:	4293      	cmp	r3, r2
 8008b78:	d004      	beq.n	8008b84 <HAL_DMA_IRQHandler+0x194>
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	4a18      	ldr	r2, [pc, #96]	; (8008be0 <HAL_DMA_IRQHandler+0x1f0>)
 8008b80:	4293      	cmp	r3, r2
 8008b82:	d12f      	bne.n	8008be4 <HAL_DMA_IRQHandler+0x1f4>
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 0304 	and.w	r3, r3, #4
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	bf14      	ite	ne
 8008b92:	2301      	movne	r3, #1
 8008b94:	2300      	moveq	r3, #0
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	e02e      	b.n	8008bf8 <HAL_DMA_IRQHandler+0x208>
 8008b9a:	bf00      	nop
 8008b9c:	24000000 	.word	0x24000000
 8008ba0:	1b4e81b5 	.word	0x1b4e81b5
 8008ba4:	40020010 	.word	0x40020010
 8008ba8:	40020028 	.word	0x40020028
 8008bac:	40020040 	.word	0x40020040
 8008bb0:	40020058 	.word	0x40020058
 8008bb4:	40020070 	.word	0x40020070
 8008bb8:	40020088 	.word	0x40020088
 8008bbc:	400200a0 	.word	0x400200a0
 8008bc0:	400200b8 	.word	0x400200b8
 8008bc4:	40020410 	.word	0x40020410
 8008bc8:	40020428 	.word	0x40020428
 8008bcc:	40020440 	.word	0x40020440
 8008bd0:	40020458 	.word	0x40020458
 8008bd4:	40020470 	.word	0x40020470
 8008bd8:	40020488 	.word	0x40020488
 8008bdc:	400204a0 	.word	0x400204a0
 8008be0:	400204b8 	.word	0x400204b8
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	f003 0308 	and.w	r3, r3, #8
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	bf14      	ite	ne
 8008bf2:	2301      	movne	r3, #1
 8008bf4:	2300      	moveq	r3, #0
 8008bf6:	b2db      	uxtb	r3, r3
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d015      	beq.n	8008c28 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	f022 0204 	bic.w	r2, r2, #4
 8008c0a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c10:	f003 031f 	and.w	r3, r3, #31
 8008c14:	2208      	movs	r2, #8
 8008c16:	409a      	lsls	r2, r3
 8008c18:	6a3b      	ldr	r3, [r7, #32]
 8008c1a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008c20:	f043 0201 	orr.w	r2, r3, #1
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c2c:	f003 031f 	and.w	r3, r3, #31
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	fa22 f303 	lsr.w	r3, r2, r3
 8008c36:	f003 0301 	and.w	r3, r3, #1
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d06e      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	4a69      	ldr	r2, [pc, #420]	; (8008de8 <HAL_DMA_IRQHandler+0x3f8>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d04a      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a67      	ldr	r2, [pc, #412]	; (8008dec <HAL_DMA_IRQHandler+0x3fc>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d045      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a66      	ldr	r2, [pc, #408]	; (8008df0 <HAL_DMA_IRQHandler+0x400>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d040      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	4a64      	ldr	r2, [pc, #400]	; (8008df4 <HAL_DMA_IRQHandler+0x404>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d03b      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	4a63      	ldr	r2, [pc, #396]	; (8008df8 <HAL_DMA_IRQHandler+0x408>)
 8008c6c:	4293      	cmp	r3, r2
 8008c6e:	d036      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	4a61      	ldr	r2, [pc, #388]	; (8008dfc <HAL_DMA_IRQHandler+0x40c>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d031      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	4a60      	ldr	r2, [pc, #384]	; (8008e00 <HAL_DMA_IRQHandler+0x410>)
 8008c80:	4293      	cmp	r3, r2
 8008c82:	d02c      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a5e      	ldr	r2, [pc, #376]	; (8008e04 <HAL_DMA_IRQHandler+0x414>)
 8008c8a:	4293      	cmp	r3, r2
 8008c8c:	d027      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	4a5d      	ldr	r2, [pc, #372]	; (8008e08 <HAL_DMA_IRQHandler+0x418>)
 8008c94:	4293      	cmp	r3, r2
 8008c96:	d022      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a5b      	ldr	r2, [pc, #364]	; (8008e0c <HAL_DMA_IRQHandler+0x41c>)
 8008c9e:	4293      	cmp	r3, r2
 8008ca0:	d01d      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	681b      	ldr	r3, [r3, #0]
 8008ca6:	4a5a      	ldr	r2, [pc, #360]	; (8008e10 <HAL_DMA_IRQHandler+0x420>)
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	d018      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	4a58      	ldr	r2, [pc, #352]	; (8008e14 <HAL_DMA_IRQHandler+0x424>)
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	d013      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	4a57      	ldr	r2, [pc, #348]	; (8008e18 <HAL_DMA_IRQHandler+0x428>)
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	d00e      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	4a55      	ldr	r2, [pc, #340]	; (8008e1c <HAL_DMA_IRQHandler+0x42c>)
 8008cc6:	4293      	cmp	r3, r2
 8008cc8:	d009      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a54      	ldr	r2, [pc, #336]	; (8008e20 <HAL_DMA_IRQHandler+0x430>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d004      	beq.n	8008cde <HAL_DMA_IRQHandler+0x2ee>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	4a52      	ldr	r2, [pc, #328]	; (8008e24 <HAL_DMA_IRQHandler+0x434>)
 8008cda:	4293      	cmp	r3, r2
 8008cdc:	d10a      	bne.n	8008cf4 <HAL_DMA_IRQHandler+0x304>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	695b      	ldr	r3, [r3, #20]
 8008ce4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bf14      	ite	ne
 8008cec:	2301      	movne	r3, #1
 8008cee:	2300      	moveq	r3, #0
 8008cf0:	b2db      	uxtb	r3, r3
 8008cf2:	e003      	b.n	8008cfc <HAL_DMA_IRQHandler+0x30c>
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	2b00      	cmp	r3, #0
 8008cfe:	d00d      	beq.n	8008d1c <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d04:	f003 031f 	and.w	r3, r3, #31
 8008d08:	2201      	movs	r2, #1
 8008d0a:	409a      	lsls	r2, r3
 8008d0c:	6a3b      	ldr	r3, [r7, #32]
 8008d0e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008d14:	f043 0202 	orr.w	r2, r3, #2
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008d20:	f003 031f 	and.w	r3, r3, #31
 8008d24:	2204      	movs	r2, #4
 8008d26:	409a      	lsls	r2, r3
 8008d28:	69bb      	ldr	r3, [r7, #24]
 8008d2a:	4013      	ands	r3, r2
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 808f 	beq.w	8008e50 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a2c      	ldr	r2, [pc, #176]	; (8008de8 <HAL_DMA_IRQHandler+0x3f8>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d04a      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a2a      	ldr	r2, [pc, #168]	; (8008dec <HAL_DMA_IRQHandler+0x3fc>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d045      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a29      	ldr	r2, [pc, #164]	; (8008df0 <HAL_DMA_IRQHandler+0x400>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d040      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a27      	ldr	r2, [pc, #156]	; (8008df4 <HAL_DMA_IRQHandler+0x404>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d03b      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a26      	ldr	r2, [pc, #152]	; (8008df8 <HAL_DMA_IRQHandler+0x408>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d036      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a24      	ldr	r2, [pc, #144]	; (8008dfc <HAL_DMA_IRQHandler+0x40c>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d031      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a23      	ldr	r2, [pc, #140]	; (8008e00 <HAL_DMA_IRQHandler+0x410>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d02c      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a21      	ldr	r2, [pc, #132]	; (8008e04 <HAL_DMA_IRQHandler+0x414>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d027      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a20      	ldr	r2, [pc, #128]	; (8008e08 <HAL_DMA_IRQHandler+0x418>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d022      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a1e      	ldr	r2, [pc, #120]	; (8008e0c <HAL_DMA_IRQHandler+0x41c>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d01d      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a1d      	ldr	r2, [pc, #116]	; (8008e10 <HAL_DMA_IRQHandler+0x420>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d018      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a1b      	ldr	r2, [pc, #108]	; (8008e14 <HAL_DMA_IRQHandler+0x424>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d013      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a1a      	ldr	r2, [pc, #104]	; (8008e18 <HAL_DMA_IRQHandler+0x428>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00e      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a18      	ldr	r2, [pc, #96]	; (8008e1c <HAL_DMA_IRQHandler+0x42c>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d009      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a17      	ldr	r2, [pc, #92]	; (8008e20 <HAL_DMA_IRQHandler+0x430>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d004      	beq.n	8008dd2 <HAL_DMA_IRQHandler+0x3e2>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a15      	ldr	r2, [pc, #84]	; (8008e24 <HAL_DMA_IRQHandler+0x434>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d12a      	bne.n	8008e28 <HAL_DMA_IRQHandler+0x438>
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	f003 0302 	and.w	r3, r3, #2
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	bf14      	ite	ne
 8008de0:	2301      	movne	r3, #1
 8008de2:	2300      	moveq	r3, #0
 8008de4:	b2db      	uxtb	r3, r3
 8008de6:	e023      	b.n	8008e30 <HAL_DMA_IRQHandler+0x440>
 8008de8:	40020010 	.word	0x40020010
 8008dec:	40020028 	.word	0x40020028
 8008df0:	40020040 	.word	0x40020040
 8008df4:	40020058 	.word	0x40020058
 8008df8:	40020070 	.word	0x40020070
 8008dfc:	40020088 	.word	0x40020088
 8008e00:	400200a0 	.word	0x400200a0
 8008e04:	400200b8 	.word	0x400200b8
 8008e08:	40020410 	.word	0x40020410
 8008e0c:	40020428 	.word	0x40020428
 8008e10:	40020440 	.word	0x40020440
 8008e14:	40020458 	.word	0x40020458
 8008e18:	40020470 	.word	0x40020470
 8008e1c:	40020488 	.word	0x40020488
 8008e20:	400204a0 	.word	0x400204a0
 8008e24:	400204b8 	.word	0x400204b8
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2b00      	cmp	r3, #0
 8008e32:	d00d      	beq.n	8008e50 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e38:	f003 031f 	and.w	r3, r3, #31
 8008e3c:	2204      	movs	r2, #4
 8008e3e:	409a      	lsls	r2, r3
 8008e40:	6a3b      	ldr	r3, [r7, #32]
 8008e42:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008e48:	f043 0204 	orr.w	r2, r3, #4
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	655a      	str	r2, [r3, #84]	; 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008e54:	f003 031f 	and.w	r3, r3, #31
 8008e58:	2210      	movs	r2, #16
 8008e5a:	409a      	lsls	r2, r3
 8008e5c:	69bb      	ldr	r3, [r7, #24]
 8008e5e:	4013      	ands	r3, r2
 8008e60:	2b00      	cmp	r3, #0
 8008e62:	f000 80a6 	beq.w	8008fb2 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	4a85      	ldr	r2, [pc, #532]	; (8009080 <HAL_DMA_IRQHandler+0x690>)
 8008e6c:	4293      	cmp	r3, r2
 8008e6e:	d04a      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a83      	ldr	r2, [pc, #524]	; (8009084 <HAL_DMA_IRQHandler+0x694>)
 8008e76:	4293      	cmp	r3, r2
 8008e78:	d045      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	4a82      	ldr	r2, [pc, #520]	; (8009088 <HAL_DMA_IRQHandler+0x698>)
 8008e80:	4293      	cmp	r3, r2
 8008e82:	d040      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a80      	ldr	r2, [pc, #512]	; (800908c <HAL_DMA_IRQHandler+0x69c>)
 8008e8a:	4293      	cmp	r3, r2
 8008e8c:	d03b      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	4a7f      	ldr	r2, [pc, #508]	; (8009090 <HAL_DMA_IRQHandler+0x6a0>)
 8008e94:	4293      	cmp	r3, r2
 8008e96:	d036      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a7d      	ldr	r2, [pc, #500]	; (8009094 <HAL_DMA_IRQHandler+0x6a4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d031      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	4a7c      	ldr	r2, [pc, #496]	; (8009098 <HAL_DMA_IRQHandler+0x6a8>)
 8008ea8:	4293      	cmp	r3, r2
 8008eaa:	d02c      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a7a      	ldr	r2, [pc, #488]	; (800909c <HAL_DMA_IRQHandler+0x6ac>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d027      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a79      	ldr	r2, [pc, #484]	; (80090a0 <HAL_DMA_IRQHandler+0x6b0>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d022      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a77      	ldr	r2, [pc, #476]	; (80090a4 <HAL_DMA_IRQHandler+0x6b4>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d01d      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a76      	ldr	r2, [pc, #472]	; (80090a8 <HAL_DMA_IRQHandler+0x6b8>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d018      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a74      	ldr	r2, [pc, #464]	; (80090ac <HAL_DMA_IRQHandler+0x6bc>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d013      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a73      	ldr	r2, [pc, #460]	; (80090b0 <HAL_DMA_IRQHandler+0x6c0>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d00e      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a71      	ldr	r2, [pc, #452]	; (80090b4 <HAL_DMA_IRQHandler+0x6c4>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d009      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a70      	ldr	r2, [pc, #448]	; (80090b8 <HAL_DMA_IRQHandler+0x6c8>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d004      	beq.n	8008f06 <HAL_DMA_IRQHandler+0x516>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a6e      	ldr	r2, [pc, #440]	; (80090bc <HAL_DMA_IRQHandler+0x6cc>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d10a      	bne.n	8008f1c <HAL_DMA_IRQHandler+0x52c>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	f003 0308 	and.w	r3, r3, #8
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	bf14      	ite	ne
 8008f14:	2301      	movne	r3, #1
 8008f16:	2300      	moveq	r3, #0
 8008f18:	b2db      	uxtb	r3, r3
 8008f1a:	e009      	b.n	8008f30 <HAL_DMA_IRQHandler+0x540>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	f003 0304 	and.w	r3, r3, #4
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	bf14      	ite	ne
 8008f2a:	2301      	movne	r3, #1
 8008f2c:	2300      	moveq	r3, #0
 8008f2e:	b2db      	uxtb	r3, r3
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d03e      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008f38:	f003 031f 	and.w	r3, r3, #31
 8008f3c:	2210      	movs	r2, #16
 8008f3e:	409a      	lsls	r2, r3
 8008f40:	6a3b      	ldr	r3, [r7, #32]
 8008f42:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d018      	beq.n	8008f84 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d108      	bne.n	8008f72 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d024      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f6c:	6878      	ldr	r0, [r7, #4]
 8008f6e:	4798      	blx	r3
 8008f70:	e01f      	b.n	8008fb2 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d01b      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	4798      	blx	r3
 8008f82:	e016      	b.n	8008fb2 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	681b      	ldr	r3, [r3, #0]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d107      	bne.n	8008fa2 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	681a      	ldr	r2, [r3, #0]
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	f022 0208 	bic.w	r2, r2, #8
 8008fa0:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d003      	beq.n	8008fb2 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008fb6:	f003 031f 	and.w	r3, r3, #31
 8008fba:	2220      	movs	r2, #32
 8008fbc:	409a      	lsls	r2, r3
 8008fbe:	69bb      	ldr	r3, [r7, #24]
 8008fc0:	4013      	ands	r3, r2
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	f000 8110 	beq.w	80091e8 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	4a2c      	ldr	r2, [pc, #176]	; (8009080 <HAL_DMA_IRQHandler+0x690>)
 8008fce:	4293      	cmp	r3, r2
 8008fd0:	d04a      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	4a2b      	ldr	r2, [pc, #172]	; (8009084 <HAL_DMA_IRQHandler+0x694>)
 8008fd8:	4293      	cmp	r3, r2
 8008fda:	d045      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	4a29      	ldr	r2, [pc, #164]	; (8009088 <HAL_DMA_IRQHandler+0x698>)
 8008fe2:	4293      	cmp	r3, r2
 8008fe4:	d040      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	4a28      	ldr	r2, [pc, #160]	; (800908c <HAL_DMA_IRQHandler+0x69c>)
 8008fec:	4293      	cmp	r3, r2
 8008fee:	d03b      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	681b      	ldr	r3, [r3, #0]
 8008ff4:	4a26      	ldr	r2, [pc, #152]	; (8009090 <HAL_DMA_IRQHandler+0x6a0>)
 8008ff6:	4293      	cmp	r3, r2
 8008ff8:	d036      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a25      	ldr	r2, [pc, #148]	; (8009094 <HAL_DMA_IRQHandler+0x6a4>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d031      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	4a23      	ldr	r2, [pc, #140]	; (8009098 <HAL_DMA_IRQHandler+0x6a8>)
 800900a:	4293      	cmp	r3, r2
 800900c:	d02c      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	4a22      	ldr	r2, [pc, #136]	; (800909c <HAL_DMA_IRQHandler+0x6ac>)
 8009014:	4293      	cmp	r3, r2
 8009016:	d027      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	4a20      	ldr	r2, [pc, #128]	; (80090a0 <HAL_DMA_IRQHandler+0x6b0>)
 800901e:	4293      	cmp	r3, r2
 8009020:	d022      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	4a1f      	ldr	r2, [pc, #124]	; (80090a4 <HAL_DMA_IRQHandler+0x6b4>)
 8009028:	4293      	cmp	r3, r2
 800902a:	d01d      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	4a1d      	ldr	r2, [pc, #116]	; (80090a8 <HAL_DMA_IRQHandler+0x6b8>)
 8009032:	4293      	cmp	r3, r2
 8009034:	d018      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	4a1c      	ldr	r2, [pc, #112]	; (80090ac <HAL_DMA_IRQHandler+0x6bc>)
 800903c:	4293      	cmp	r3, r2
 800903e:	d013      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	4a1a      	ldr	r2, [pc, #104]	; (80090b0 <HAL_DMA_IRQHandler+0x6c0>)
 8009046:	4293      	cmp	r3, r2
 8009048:	d00e      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	4a19      	ldr	r2, [pc, #100]	; (80090b4 <HAL_DMA_IRQHandler+0x6c4>)
 8009050:	4293      	cmp	r3, r2
 8009052:	d009      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	4a17      	ldr	r2, [pc, #92]	; (80090b8 <HAL_DMA_IRQHandler+0x6c8>)
 800905a:	4293      	cmp	r3, r2
 800905c:	d004      	beq.n	8009068 <HAL_DMA_IRQHandler+0x678>
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	4a16      	ldr	r2, [pc, #88]	; (80090bc <HAL_DMA_IRQHandler+0x6cc>)
 8009064:	4293      	cmp	r3, r2
 8009066:	d12b      	bne.n	80090c0 <HAL_DMA_IRQHandler+0x6d0>
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	f003 0310 	and.w	r3, r3, #16
 8009072:	2b00      	cmp	r3, #0
 8009074:	bf14      	ite	ne
 8009076:	2301      	movne	r3, #1
 8009078:	2300      	moveq	r3, #0
 800907a:	b2db      	uxtb	r3, r3
 800907c:	e02a      	b.n	80090d4 <HAL_DMA_IRQHandler+0x6e4>
 800907e:	bf00      	nop
 8009080:	40020010 	.word	0x40020010
 8009084:	40020028 	.word	0x40020028
 8009088:	40020040 	.word	0x40020040
 800908c:	40020058 	.word	0x40020058
 8009090:	40020070 	.word	0x40020070
 8009094:	40020088 	.word	0x40020088
 8009098:	400200a0 	.word	0x400200a0
 800909c:	400200b8 	.word	0x400200b8
 80090a0:	40020410 	.word	0x40020410
 80090a4:	40020428 	.word	0x40020428
 80090a8:	40020440 	.word	0x40020440
 80090ac:	40020458 	.word	0x40020458
 80090b0:	40020470 	.word	0x40020470
 80090b4:	40020488 	.word	0x40020488
 80090b8:	400204a0 	.word	0x400204a0
 80090bc:	400204b8 	.word	0x400204b8
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	f003 0302 	and.w	r3, r3, #2
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	bf14      	ite	ne
 80090ce:	2301      	movne	r3, #1
 80090d0:	2300      	moveq	r3, #0
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	f000 8087 	beq.w	80091e8 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090de:	f003 031f 	and.w	r3, r3, #31
 80090e2:	2220      	movs	r2, #32
 80090e4:	409a      	lsls	r2, r3
 80090e6:	6a3b      	ldr	r3, [r7, #32]
 80090e8:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b04      	cmp	r3, #4
 80090f4:	d139      	bne.n	800916a <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	681a      	ldr	r2, [r3, #0]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f022 0216 	bic.w	r2, r2, #22
 8009104:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695a      	ldr	r2, [r3, #20]
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009114:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d103      	bne.n	8009126 <HAL_DMA_IRQHandler+0x736>
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f022 0208 	bic.w	r2, r2, #8
 8009134:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800913a:	f003 031f 	and.w	r3, r3, #31
 800913e:	223f      	movs	r2, #63	; 0x3f
 8009140:	409a      	lsls	r2, r3
 8009142:	6a3b      	ldr	r3, [r7, #32]
 8009144:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	2201      	movs	r2, #1
 800914a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2200      	movs	r2, #0
 8009152:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          if(hdma->XferAbortCallback != NULL)
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800915a:	2b00      	cmp	r3, #0
 800915c:	f000 834a 	beq.w	80097f4 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	4798      	blx	r3
          }
          return;
 8009168:	e344      	b.n	80097f4 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009174:	2b00      	cmp	r3, #0
 8009176:	d018      	beq.n	80091aa <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009182:	2b00      	cmp	r3, #0
 8009184:	d108      	bne.n	8009198 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800918a:	2b00      	cmp	r3, #0
 800918c:	d02c      	beq.n	80091e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009192:	6878      	ldr	r0, [r7, #4]
 8009194:	4798      	blx	r3
 8009196:	e027      	b.n	80091e8 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800919c:	2b00      	cmp	r3, #0
 800919e:	d023      	beq.n	80091e8 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	4798      	blx	r3
 80091a8:	e01e      	b.n	80091e8 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d10f      	bne.n	80091d8 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	681a      	ldr	r2, [r3, #0]
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f022 0210 	bic.w	r2, r2, #16
 80091c6:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2200      	movs	r2, #0
 80091d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d003      	beq.n	80091e8 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80091e4:	6878      	ldr	r0, [r7, #4]
 80091e6:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	f000 8306 	beq.w	80097fe <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091f6:	f003 0301 	and.w	r3, r3, #1
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	f000 8088 	beq.w	8009310 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2204      	movs	r2, #4
 8009204:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a7a      	ldr	r2, [pc, #488]	; (80093f8 <HAL_DMA_IRQHandler+0xa08>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d04a      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a79      	ldr	r2, [pc, #484]	; (80093fc <HAL_DMA_IRQHandler+0xa0c>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d045      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a77      	ldr	r2, [pc, #476]	; (8009400 <HAL_DMA_IRQHandler+0xa10>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d040      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a76      	ldr	r2, [pc, #472]	; (8009404 <HAL_DMA_IRQHandler+0xa14>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d03b      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a74      	ldr	r2, [pc, #464]	; (8009408 <HAL_DMA_IRQHandler+0xa18>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d036      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a73      	ldr	r2, [pc, #460]	; (800940c <HAL_DMA_IRQHandler+0xa1c>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d031      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a71      	ldr	r2, [pc, #452]	; (8009410 <HAL_DMA_IRQHandler+0xa20>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d02c      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a70      	ldr	r2, [pc, #448]	; (8009414 <HAL_DMA_IRQHandler+0xa24>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d027      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a6e      	ldr	r2, [pc, #440]	; (8009418 <HAL_DMA_IRQHandler+0xa28>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d022      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a6d      	ldr	r2, [pc, #436]	; (800941c <HAL_DMA_IRQHandler+0xa2c>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d01d      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a6b      	ldr	r2, [pc, #428]	; (8009420 <HAL_DMA_IRQHandler+0xa30>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d018      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a6a      	ldr	r2, [pc, #424]	; (8009424 <HAL_DMA_IRQHandler+0xa34>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d013      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a68      	ldr	r2, [pc, #416]	; (8009428 <HAL_DMA_IRQHandler+0xa38>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d00e      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	681b      	ldr	r3, [r3, #0]
 800928e:	4a67      	ldr	r2, [pc, #412]	; (800942c <HAL_DMA_IRQHandler+0xa3c>)
 8009290:	4293      	cmp	r3, r2
 8009292:	d009      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	4a65      	ldr	r2, [pc, #404]	; (8009430 <HAL_DMA_IRQHandler+0xa40>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d004      	beq.n	80092a8 <HAL_DMA_IRQHandler+0x8b8>
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	4a64      	ldr	r2, [pc, #400]	; (8009434 <HAL_DMA_IRQHandler+0xa44>)
 80092a4:	4293      	cmp	r3, r2
 80092a6:	d108      	bne.n	80092ba <HAL_DMA_IRQHandler+0x8ca>
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	681a      	ldr	r2, [r3, #0]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 0201 	bic.w	r2, r2, #1
 80092b6:	601a      	str	r2, [r3, #0]
 80092b8:	e007      	b.n	80092ca <HAL_DMA_IRQHandler+0x8da>
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	681a      	ldr	r2, [r3, #0]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	f022 0201 	bic.w	r2, r2, #1
 80092c8:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80092ca:	68fb      	ldr	r3, [r7, #12]
 80092cc:	3301      	adds	r3, #1
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092d2:	429a      	cmp	r2, r3
 80092d4:	d307      	bcc.n	80092e6 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	f003 0301 	and.w	r3, r3, #1
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	d1f2      	bne.n	80092ca <HAL_DMA_IRQHandler+0x8da>
 80092e4:	e000      	b.n	80092e8 <HAL_DMA_IRQHandler+0x8f8>
            break;
 80092e6:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	f003 0301 	and.w	r3, r3, #1
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	d004      	beq.n	8009300 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	2203      	movs	r2, #3
 80092fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 80092fe:	e003      	b.n	8009308 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	2201      	movs	r2, #1
 8009304:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2200      	movs	r2, #0
 800930c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009314:	2b00      	cmp	r3, #0
 8009316:	f000 8272 	beq.w	80097fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800931e:	6878      	ldr	r0, [r7, #4]
 8009320:	4798      	blx	r3
 8009322:	e26c      	b.n	80097fe <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a43      	ldr	r2, [pc, #268]	; (8009438 <HAL_DMA_IRQHandler+0xa48>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d022      	beq.n	8009374 <HAL_DMA_IRQHandler+0x984>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a42      	ldr	r2, [pc, #264]	; (800943c <HAL_DMA_IRQHandler+0xa4c>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d01d      	beq.n	8009374 <HAL_DMA_IRQHandler+0x984>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a40      	ldr	r2, [pc, #256]	; (8009440 <HAL_DMA_IRQHandler+0xa50>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d018      	beq.n	8009374 <HAL_DMA_IRQHandler+0x984>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a3f      	ldr	r2, [pc, #252]	; (8009444 <HAL_DMA_IRQHandler+0xa54>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d013      	beq.n	8009374 <HAL_DMA_IRQHandler+0x984>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	4a3d      	ldr	r2, [pc, #244]	; (8009448 <HAL_DMA_IRQHandler+0xa58>)
 8009352:	4293      	cmp	r3, r2
 8009354:	d00e      	beq.n	8009374 <HAL_DMA_IRQHandler+0x984>
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	4a3c      	ldr	r2, [pc, #240]	; (800944c <HAL_DMA_IRQHandler+0xa5c>)
 800935c:	4293      	cmp	r3, r2
 800935e:	d009      	beq.n	8009374 <HAL_DMA_IRQHandler+0x984>
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	4a3a      	ldr	r2, [pc, #232]	; (8009450 <HAL_DMA_IRQHandler+0xa60>)
 8009366:	4293      	cmp	r3, r2
 8009368:	d004      	beq.n	8009374 <HAL_DMA_IRQHandler+0x984>
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	4a39      	ldr	r2, [pc, #228]	; (8009454 <HAL_DMA_IRQHandler+0xa64>)
 8009370:	4293      	cmp	r3, r2
 8009372:	d101      	bne.n	8009378 <HAL_DMA_IRQHandler+0x988>
 8009374:	2301      	movs	r3, #1
 8009376:	e000      	b.n	800937a <HAL_DMA_IRQHandler+0x98a>
 8009378:	2300      	movs	r3, #0
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 823f 	beq.w	80097fe <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800938c:	f003 031f 	and.w	r3, r3, #31
 8009390:	2204      	movs	r2, #4
 8009392:	409a      	lsls	r2, r3
 8009394:	697b      	ldr	r3, [r7, #20]
 8009396:	4013      	ands	r3, r2
 8009398:	2b00      	cmp	r3, #0
 800939a:	f000 80cd 	beq.w	8009538 <HAL_DMA_IRQHandler+0xb48>
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f003 0304 	and.w	r3, r3, #4
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	f000 80c7 	beq.w	8009538 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ae:	f003 031f 	and.w	r3, r3, #31
 80093b2:	2204      	movs	r2, #4
 80093b4:	409a      	lsls	r2, r3
 80093b6:	69fb      	ldr	r3, [r7, #28]
 80093b8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d049      	beq.n	8009458 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80093c4:	693b      	ldr	r3, [r7, #16]
 80093c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d109      	bne.n	80093e2 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	f000 8210 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093e0:	e20a      	b.n	80097f8 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	f000 8206 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80093f4:	e200      	b.n	80097f8 <HAL_DMA_IRQHandler+0xe08>
 80093f6:	bf00      	nop
 80093f8:	40020010 	.word	0x40020010
 80093fc:	40020028 	.word	0x40020028
 8009400:	40020040 	.word	0x40020040
 8009404:	40020058 	.word	0x40020058
 8009408:	40020070 	.word	0x40020070
 800940c:	40020088 	.word	0x40020088
 8009410:	400200a0 	.word	0x400200a0
 8009414:	400200b8 	.word	0x400200b8
 8009418:	40020410 	.word	0x40020410
 800941c:	40020428 	.word	0x40020428
 8009420:	40020440 	.word	0x40020440
 8009424:	40020458 	.word	0x40020458
 8009428:	40020470 	.word	0x40020470
 800942c:	40020488 	.word	0x40020488
 8009430:	400204a0 	.word	0x400204a0
 8009434:	400204b8 	.word	0x400204b8
 8009438:	58025408 	.word	0x58025408
 800943c:	5802541c 	.word	0x5802541c
 8009440:	58025430 	.word	0x58025430
 8009444:	58025444 	.word	0x58025444
 8009448:	58025458 	.word	0x58025458
 800944c:	5802546c 	.word	0x5802546c
 8009450:	58025480 	.word	0x58025480
 8009454:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009458:	693b      	ldr	r3, [r7, #16]
 800945a:	f003 0320 	and.w	r3, r3, #32
 800945e:	2b00      	cmp	r3, #0
 8009460:	d160      	bne.n	8009524 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	4a7f      	ldr	r2, [pc, #508]	; (8009664 <HAL_DMA_IRQHandler+0xc74>)
 8009468:	4293      	cmp	r3, r2
 800946a:	d04a      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	681b      	ldr	r3, [r3, #0]
 8009470:	4a7d      	ldr	r2, [pc, #500]	; (8009668 <HAL_DMA_IRQHandler+0xc78>)
 8009472:	4293      	cmp	r3, r2
 8009474:	d045      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	4a7c      	ldr	r2, [pc, #496]	; (800966c <HAL_DMA_IRQHandler+0xc7c>)
 800947c:	4293      	cmp	r3, r2
 800947e:	d040      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a7a      	ldr	r2, [pc, #488]	; (8009670 <HAL_DMA_IRQHandler+0xc80>)
 8009486:	4293      	cmp	r3, r2
 8009488:	d03b      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	4a79      	ldr	r2, [pc, #484]	; (8009674 <HAL_DMA_IRQHandler+0xc84>)
 8009490:	4293      	cmp	r3, r2
 8009492:	d036      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	4a77      	ldr	r2, [pc, #476]	; (8009678 <HAL_DMA_IRQHandler+0xc88>)
 800949a:	4293      	cmp	r3, r2
 800949c:	d031      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	4a76      	ldr	r2, [pc, #472]	; (800967c <HAL_DMA_IRQHandler+0xc8c>)
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d02c      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	4a74      	ldr	r2, [pc, #464]	; (8009680 <HAL_DMA_IRQHandler+0xc90>)
 80094ae:	4293      	cmp	r3, r2
 80094b0:	d027      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	4a73      	ldr	r2, [pc, #460]	; (8009684 <HAL_DMA_IRQHandler+0xc94>)
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d022      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	4a71      	ldr	r2, [pc, #452]	; (8009688 <HAL_DMA_IRQHandler+0xc98>)
 80094c2:	4293      	cmp	r3, r2
 80094c4:	d01d      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	4a70      	ldr	r2, [pc, #448]	; (800968c <HAL_DMA_IRQHandler+0xc9c>)
 80094cc:	4293      	cmp	r3, r2
 80094ce:	d018      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	4a6e      	ldr	r2, [pc, #440]	; (8009690 <HAL_DMA_IRQHandler+0xca0>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d013      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	4a6d      	ldr	r2, [pc, #436]	; (8009694 <HAL_DMA_IRQHandler+0xca4>)
 80094e0:	4293      	cmp	r3, r2
 80094e2:	d00e      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	4a6b      	ldr	r2, [pc, #428]	; (8009698 <HAL_DMA_IRQHandler+0xca8>)
 80094ea:	4293      	cmp	r3, r2
 80094ec:	d009      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	4a6a      	ldr	r2, [pc, #424]	; (800969c <HAL_DMA_IRQHandler+0xcac>)
 80094f4:	4293      	cmp	r3, r2
 80094f6:	d004      	beq.n	8009502 <HAL_DMA_IRQHandler+0xb12>
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4a68      	ldr	r2, [pc, #416]	; (80096a0 <HAL_DMA_IRQHandler+0xcb0>)
 80094fe:	4293      	cmp	r3, r2
 8009500:	d108      	bne.n	8009514 <HAL_DMA_IRQHandler+0xb24>
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f022 0208 	bic.w	r2, r2, #8
 8009510:	601a      	str	r2, [r3, #0]
 8009512:	e007      	b.n	8009524 <HAL_DMA_IRQHandler+0xb34>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	681a      	ldr	r2, [r3, #0]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f022 0204 	bic.w	r2, r2, #4
 8009522:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	2b00      	cmp	r3, #0
 800952a:	f000 8165 	beq.w	80097f8 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009536:	e15f      	b.n	80097f8 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800953c:	f003 031f 	and.w	r3, r3, #31
 8009540:	2202      	movs	r2, #2
 8009542:	409a      	lsls	r2, r3
 8009544:	697b      	ldr	r3, [r7, #20]
 8009546:	4013      	ands	r3, r2
 8009548:	2b00      	cmp	r3, #0
 800954a:	f000 80c5 	beq.w	80096d8 <HAL_DMA_IRQHandler+0xce8>
 800954e:	693b      	ldr	r3, [r7, #16]
 8009550:	f003 0302 	and.w	r3, r3, #2
 8009554:	2b00      	cmp	r3, #0
 8009556:	f000 80bf 	beq.w	80096d8 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800955e:	f003 031f 	and.w	r3, r3, #31
 8009562:	2202      	movs	r2, #2
 8009564:	409a      	lsls	r2, r3
 8009566:	69fb      	ldr	r3, [r7, #28]
 8009568:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800956a:	693b      	ldr	r3, [r7, #16]
 800956c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009570:	2b00      	cmp	r3, #0
 8009572:	d018      	beq.n	80095a6 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009574:	693b      	ldr	r3, [r7, #16]
 8009576:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d109      	bne.n	8009592 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009582:	2b00      	cmp	r3, #0
 8009584:	f000 813a 	beq.w	80097fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009590:	e134      	b.n	80097fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009596:	2b00      	cmp	r3, #0
 8009598:	f000 8130 	beq.w	80097fc <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80095a4:	e12a      	b.n	80097fc <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	f003 0320 	and.w	r3, r3, #32
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	f040 8089 	bne.w	80096c4 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	4a2b      	ldr	r2, [pc, #172]	; (8009664 <HAL_DMA_IRQHandler+0xc74>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d04a      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	4a29      	ldr	r2, [pc, #164]	; (8009668 <HAL_DMA_IRQHandler+0xc78>)
 80095c2:	4293      	cmp	r3, r2
 80095c4:	d045      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	4a28      	ldr	r2, [pc, #160]	; (800966c <HAL_DMA_IRQHandler+0xc7c>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d040      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	4a26      	ldr	r2, [pc, #152]	; (8009670 <HAL_DMA_IRQHandler+0xc80>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d03b      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	4a25      	ldr	r2, [pc, #148]	; (8009674 <HAL_DMA_IRQHandler+0xc84>)
 80095e0:	4293      	cmp	r3, r2
 80095e2:	d036      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	4a23      	ldr	r2, [pc, #140]	; (8009678 <HAL_DMA_IRQHandler+0xc88>)
 80095ea:	4293      	cmp	r3, r2
 80095ec:	d031      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	4a22      	ldr	r2, [pc, #136]	; (800967c <HAL_DMA_IRQHandler+0xc8c>)
 80095f4:	4293      	cmp	r3, r2
 80095f6:	d02c      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a20      	ldr	r2, [pc, #128]	; (8009680 <HAL_DMA_IRQHandler+0xc90>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d027      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	4a1f      	ldr	r2, [pc, #124]	; (8009684 <HAL_DMA_IRQHandler+0xc94>)
 8009608:	4293      	cmp	r3, r2
 800960a:	d022      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4a1d      	ldr	r2, [pc, #116]	; (8009688 <HAL_DMA_IRQHandler+0xc98>)
 8009612:	4293      	cmp	r3, r2
 8009614:	d01d      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	4a1c      	ldr	r2, [pc, #112]	; (800968c <HAL_DMA_IRQHandler+0xc9c>)
 800961c:	4293      	cmp	r3, r2
 800961e:	d018      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	4a1a      	ldr	r2, [pc, #104]	; (8009690 <HAL_DMA_IRQHandler+0xca0>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d013      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	681b      	ldr	r3, [r3, #0]
 800962e:	4a19      	ldr	r2, [pc, #100]	; (8009694 <HAL_DMA_IRQHandler+0xca4>)
 8009630:	4293      	cmp	r3, r2
 8009632:	d00e      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 8009634:	687b      	ldr	r3, [r7, #4]
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a17      	ldr	r2, [pc, #92]	; (8009698 <HAL_DMA_IRQHandler+0xca8>)
 800963a:	4293      	cmp	r3, r2
 800963c:	d009      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	4a16      	ldr	r2, [pc, #88]	; (800969c <HAL_DMA_IRQHandler+0xcac>)
 8009644:	4293      	cmp	r3, r2
 8009646:	d004      	beq.n	8009652 <HAL_DMA_IRQHandler+0xc62>
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	4a14      	ldr	r2, [pc, #80]	; (80096a0 <HAL_DMA_IRQHandler+0xcb0>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d128      	bne.n	80096a4 <HAL_DMA_IRQHandler+0xcb4>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	681a      	ldr	r2, [r3, #0]
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	f022 0214 	bic.w	r2, r2, #20
 8009660:	601a      	str	r2, [r3, #0]
 8009662:	e027      	b.n	80096b4 <HAL_DMA_IRQHandler+0xcc4>
 8009664:	40020010 	.word	0x40020010
 8009668:	40020028 	.word	0x40020028
 800966c:	40020040 	.word	0x40020040
 8009670:	40020058 	.word	0x40020058
 8009674:	40020070 	.word	0x40020070
 8009678:	40020088 	.word	0x40020088
 800967c:	400200a0 	.word	0x400200a0
 8009680:	400200b8 	.word	0x400200b8
 8009684:	40020410 	.word	0x40020410
 8009688:	40020428 	.word	0x40020428
 800968c:	40020440 	.word	0x40020440
 8009690:	40020458 	.word	0x40020458
 8009694:	40020470 	.word	0x40020470
 8009698:	40020488 	.word	0x40020488
 800969c:	400204a0 	.word	0x400204a0
 80096a0:	400204b8 	.word	0x400204b8
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	681b      	ldr	r3, [r3, #0]
 80096a8:	681a      	ldr	r2, [r3, #0]
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f022 020a 	bic.w	r2, r2, #10
 80096b2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2201      	movs	r2, #1
 80096b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	f000 8097 	beq.w	80097fc <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80096d6:	e091      	b.n	80097fc <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80096dc:	f003 031f 	and.w	r3, r3, #31
 80096e0:	2208      	movs	r2, #8
 80096e2:	409a      	lsls	r2, r3
 80096e4:	697b      	ldr	r3, [r7, #20]
 80096e6:	4013      	ands	r3, r2
 80096e8:	2b00      	cmp	r3, #0
 80096ea:	f000 8088 	beq.w	80097fe <HAL_DMA_IRQHandler+0xe0e>
 80096ee:	693b      	ldr	r3, [r7, #16]
 80096f0:	f003 0308 	and.w	r3, r3, #8
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	f000 8082 	beq.w	80097fe <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	4a41      	ldr	r2, [pc, #260]	; (8009804 <HAL_DMA_IRQHandler+0xe14>)
 8009700:	4293      	cmp	r3, r2
 8009702:	d04a      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4a3f      	ldr	r2, [pc, #252]	; (8009808 <HAL_DMA_IRQHandler+0xe18>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d045      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4a3e      	ldr	r2, [pc, #248]	; (800980c <HAL_DMA_IRQHandler+0xe1c>)
 8009714:	4293      	cmp	r3, r2
 8009716:	d040      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	4a3c      	ldr	r2, [pc, #240]	; (8009810 <HAL_DMA_IRQHandler+0xe20>)
 800971e:	4293      	cmp	r3, r2
 8009720:	d03b      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	4a3b      	ldr	r2, [pc, #236]	; (8009814 <HAL_DMA_IRQHandler+0xe24>)
 8009728:	4293      	cmp	r3, r2
 800972a:	d036      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	4a39      	ldr	r2, [pc, #228]	; (8009818 <HAL_DMA_IRQHandler+0xe28>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d031      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	4a38      	ldr	r2, [pc, #224]	; (800981c <HAL_DMA_IRQHandler+0xe2c>)
 800973c:	4293      	cmp	r3, r2
 800973e:	d02c      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	4a36      	ldr	r2, [pc, #216]	; (8009820 <HAL_DMA_IRQHandler+0xe30>)
 8009746:	4293      	cmp	r3, r2
 8009748:	d027      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a35      	ldr	r2, [pc, #212]	; (8009824 <HAL_DMA_IRQHandler+0xe34>)
 8009750:	4293      	cmp	r3, r2
 8009752:	d022      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	4a33      	ldr	r2, [pc, #204]	; (8009828 <HAL_DMA_IRQHandler+0xe38>)
 800975a:	4293      	cmp	r3, r2
 800975c:	d01d      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 800975e:	687b      	ldr	r3, [r7, #4]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	4a32      	ldr	r2, [pc, #200]	; (800982c <HAL_DMA_IRQHandler+0xe3c>)
 8009764:	4293      	cmp	r3, r2
 8009766:	d018      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	4a30      	ldr	r2, [pc, #192]	; (8009830 <HAL_DMA_IRQHandler+0xe40>)
 800976e:	4293      	cmp	r3, r2
 8009770:	d013      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	4a2f      	ldr	r2, [pc, #188]	; (8009834 <HAL_DMA_IRQHandler+0xe44>)
 8009778:	4293      	cmp	r3, r2
 800977a:	d00e      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	4a2d      	ldr	r2, [pc, #180]	; (8009838 <HAL_DMA_IRQHandler+0xe48>)
 8009782:	4293      	cmp	r3, r2
 8009784:	d009      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	4a2c      	ldr	r2, [pc, #176]	; (800983c <HAL_DMA_IRQHandler+0xe4c>)
 800978c:	4293      	cmp	r3, r2
 800978e:	d004      	beq.n	800979a <HAL_DMA_IRQHandler+0xdaa>
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a2a      	ldr	r2, [pc, #168]	; (8009840 <HAL_DMA_IRQHandler+0xe50>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d108      	bne.n	80097ac <HAL_DMA_IRQHandler+0xdbc>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681a      	ldr	r2, [r3, #0]
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f022 021c 	bic.w	r2, r2, #28
 80097a8:	601a      	str	r2, [r3, #0]
 80097aa:	e007      	b.n	80097bc <HAL_DMA_IRQHandler+0xdcc>
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681a      	ldr	r2, [r3, #0]
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f022 020e 	bic.w	r2, r2, #14
 80097ba:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097c0:	f003 031f 	and.w	r3, r3, #31
 80097c4:	2201      	movs	r2, #1
 80097c6:	409a      	lsls	r2, r3
 80097c8:	69fb      	ldr	r3, [r7, #28]
 80097ca:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	2201      	movs	r2, #1
 80097d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      if (hdma->XferErrorCallback != NULL)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d009      	beq.n	80097fe <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80097ee:	6878      	ldr	r0, [r7, #4]
 80097f0:	4798      	blx	r3
 80097f2:	e004      	b.n	80097fe <HAL_DMA_IRQHandler+0xe0e>
          return;
 80097f4:	bf00      	nop
 80097f6:	e002      	b.n	80097fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097f8:	bf00      	nop
 80097fa:	e000      	b.n	80097fe <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80097fc:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 80097fe:	3728      	adds	r7, #40	; 0x28
 8009800:	46bd      	mov	sp, r7
 8009802:	bd80      	pop	{r7, pc}
 8009804:	40020010 	.word	0x40020010
 8009808:	40020028 	.word	0x40020028
 800980c:	40020040 	.word	0x40020040
 8009810:	40020058 	.word	0x40020058
 8009814:	40020070 	.word	0x40020070
 8009818:	40020088 	.word	0x40020088
 800981c:	400200a0 	.word	0x400200a0
 8009820:	400200b8 	.word	0x400200b8
 8009824:	40020410 	.word	0x40020410
 8009828:	40020428 	.word	0x40020428
 800982c:	40020440 	.word	0x40020440
 8009830:	40020458 	.word	0x40020458
 8009834:	40020470 	.word	0x40020470
 8009838:	40020488 	.word	0x40020488
 800983c:	400204a0 	.word	0x400204a0
 8009840:	400204b8 	.word	0x400204b8

08009844 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009844:	b480      	push	{r7}
 8009846:	b087      	sub	sp, #28
 8009848:	af00      	add	r7, sp, #0
 800984a:	60f8      	str	r0, [r7, #12]
 800984c:	60b9      	str	r1, [r7, #8]
 800984e:	607a      	str	r2, [r7, #4]
 8009850:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009856:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800985c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a7f      	ldr	r2, [pc, #508]	; (8009a60 <DMA_SetConfig+0x21c>)
 8009864:	4293      	cmp	r3, r2
 8009866:	d072      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	4a7d      	ldr	r2, [pc, #500]	; (8009a64 <DMA_SetConfig+0x220>)
 800986e:	4293      	cmp	r3, r2
 8009870:	d06d      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	4a7c      	ldr	r2, [pc, #496]	; (8009a68 <DMA_SetConfig+0x224>)
 8009878:	4293      	cmp	r3, r2
 800987a:	d068      	beq.n	800994e <DMA_SetConfig+0x10a>
 800987c:	68fb      	ldr	r3, [r7, #12]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	4a7a      	ldr	r2, [pc, #488]	; (8009a6c <DMA_SetConfig+0x228>)
 8009882:	4293      	cmp	r3, r2
 8009884:	d063      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	4a79      	ldr	r2, [pc, #484]	; (8009a70 <DMA_SetConfig+0x22c>)
 800988c:	4293      	cmp	r3, r2
 800988e:	d05e      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4a77      	ldr	r2, [pc, #476]	; (8009a74 <DMA_SetConfig+0x230>)
 8009896:	4293      	cmp	r3, r2
 8009898:	d059      	beq.n	800994e <DMA_SetConfig+0x10a>
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	4a76      	ldr	r2, [pc, #472]	; (8009a78 <DMA_SetConfig+0x234>)
 80098a0:	4293      	cmp	r3, r2
 80098a2:	d054      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	4a74      	ldr	r2, [pc, #464]	; (8009a7c <DMA_SetConfig+0x238>)
 80098aa:	4293      	cmp	r3, r2
 80098ac:	d04f      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	4a73      	ldr	r2, [pc, #460]	; (8009a80 <DMA_SetConfig+0x23c>)
 80098b4:	4293      	cmp	r3, r2
 80098b6:	d04a      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	4a71      	ldr	r2, [pc, #452]	; (8009a84 <DMA_SetConfig+0x240>)
 80098be:	4293      	cmp	r3, r2
 80098c0:	d045      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	4a70      	ldr	r2, [pc, #448]	; (8009a88 <DMA_SetConfig+0x244>)
 80098c8:	4293      	cmp	r3, r2
 80098ca:	d040      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	4a6e      	ldr	r2, [pc, #440]	; (8009a8c <DMA_SetConfig+0x248>)
 80098d2:	4293      	cmp	r3, r2
 80098d4:	d03b      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	4a6d      	ldr	r2, [pc, #436]	; (8009a90 <DMA_SetConfig+0x24c>)
 80098dc:	4293      	cmp	r3, r2
 80098de:	d036      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098e0:	68fb      	ldr	r3, [r7, #12]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a6b      	ldr	r2, [pc, #428]	; (8009a94 <DMA_SetConfig+0x250>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d031      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098ea:	68fb      	ldr	r3, [r7, #12]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	4a6a      	ldr	r2, [pc, #424]	; (8009a98 <DMA_SetConfig+0x254>)
 80098f0:	4293      	cmp	r3, r2
 80098f2:	d02c      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	4a68      	ldr	r2, [pc, #416]	; (8009a9c <DMA_SetConfig+0x258>)
 80098fa:	4293      	cmp	r3, r2
 80098fc:	d027      	beq.n	800994e <DMA_SetConfig+0x10a>
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	4a67      	ldr	r2, [pc, #412]	; (8009aa0 <DMA_SetConfig+0x25c>)
 8009904:	4293      	cmp	r3, r2
 8009906:	d022      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	4a65      	ldr	r2, [pc, #404]	; (8009aa4 <DMA_SetConfig+0x260>)
 800990e:	4293      	cmp	r3, r2
 8009910:	d01d      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	4a64      	ldr	r2, [pc, #400]	; (8009aa8 <DMA_SetConfig+0x264>)
 8009918:	4293      	cmp	r3, r2
 800991a:	d018      	beq.n	800994e <DMA_SetConfig+0x10a>
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	4a62      	ldr	r2, [pc, #392]	; (8009aac <DMA_SetConfig+0x268>)
 8009922:	4293      	cmp	r3, r2
 8009924:	d013      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a61      	ldr	r2, [pc, #388]	; (8009ab0 <DMA_SetConfig+0x26c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d00e      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	4a5f      	ldr	r2, [pc, #380]	; (8009ab4 <DMA_SetConfig+0x270>)
 8009936:	4293      	cmp	r3, r2
 8009938:	d009      	beq.n	800994e <DMA_SetConfig+0x10a>
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	681b      	ldr	r3, [r3, #0]
 800993e:	4a5e      	ldr	r2, [pc, #376]	; (8009ab8 <DMA_SetConfig+0x274>)
 8009940:	4293      	cmp	r3, r2
 8009942:	d004      	beq.n	800994e <DMA_SetConfig+0x10a>
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	681b      	ldr	r3, [r3, #0]
 8009948:	4a5c      	ldr	r2, [pc, #368]	; (8009abc <DMA_SetConfig+0x278>)
 800994a:	4293      	cmp	r3, r2
 800994c:	d101      	bne.n	8009952 <DMA_SetConfig+0x10e>
 800994e:	2301      	movs	r3, #1
 8009950:	e000      	b.n	8009954 <DMA_SetConfig+0x110>
 8009952:	2300      	movs	r3, #0
 8009954:	2b00      	cmp	r3, #0
 8009956:	d00d      	beq.n	8009974 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800995c:	68fa      	ldr	r2, [r7, #12]
 800995e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8009960:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009966:	2b00      	cmp	r3, #0
 8009968:	d004      	beq.n	8009974 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800996e:	68fa      	ldr	r2, [r7, #12]
 8009970:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8009972:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	4a39      	ldr	r2, [pc, #228]	; (8009a60 <DMA_SetConfig+0x21c>)
 800997a:	4293      	cmp	r3, r2
 800997c:	d04a      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	4a38      	ldr	r2, [pc, #224]	; (8009a64 <DMA_SetConfig+0x220>)
 8009984:	4293      	cmp	r3, r2
 8009986:	d045      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	4a36      	ldr	r2, [pc, #216]	; (8009a68 <DMA_SetConfig+0x224>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d040      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	4a35      	ldr	r2, [pc, #212]	; (8009a6c <DMA_SetConfig+0x228>)
 8009998:	4293      	cmp	r3, r2
 800999a:	d03b      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	4a33      	ldr	r2, [pc, #204]	; (8009a70 <DMA_SetConfig+0x22c>)
 80099a2:	4293      	cmp	r3, r2
 80099a4:	d036      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	4a32      	ldr	r2, [pc, #200]	; (8009a74 <DMA_SetConfig+0x230>)
 80099ac:	4293      	cmp	r3, r2
 80099ae:	d031      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	4a30      	ldr	r2, [pc, #192]	; (8009a78 <DMA_SetConfig+0x234>)
 80099b6:	4293      	cmp	r3, r2
 80099b8:	d02c      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	4a2f      	ldr	r2, [pc, #188]	; (8009a7c <DMA_SetConfig+0x238>)
 80099c0:	4293      	cmp	r3, r2
 80099c2:	d027      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	4a2d      	ldr	r2, [pc, #180]	; (8009a80 <DMA_SetConfig+0x23c>)
 80099ca:	4293      	cmp	r3, r2
 80099cc:	d022      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	681b      	ldr	r3, [r3, #0]
 80099d2:	4a2c      	ldr	r2, [pc, #176]	; (8009a84 <DMA_SetConfig+0x240>)
 80099d4:	4293      	cmp	r3, r2
 80099d6:	d01d      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	4a2a      	ldr	r2, [pc, #168]	; (8009a88 <DMA_SetConfig+0x244>)
 80099de:	4293      	cmp	r3, r2
 80099e0:	d018      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a29      	ldr	r2, [pc, #164]	; (8009a8c <DMA_SetConfig+0x248>)
 80099e8:	4293      	cmp	r3, r2
 80099ea:	d013      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	4a27      	ldr	r2, [pc, #156]	; (8009a90 <DMA_SetConfig+0x24c>)
 80099f2:	4293      	cmp	r3, r2
 80099f4:	d00e      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	4a26      	ldr	r2, [pc, #152]	; (8009a94 <DMA_SetConfig+0x250>)
 80099fc:	4293      	cmp	r3, r2
 80099fe:	d009      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a24      	ldr	r2, [pc, #144]	; (8009a98 <DMA_SetConfig+0x254>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d004      	beq.n	8009a14 <DMA_SetConfig+0x1d0>
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a23      	ldr	r2, [pc, #140]	; (8009a9c <DMA_SetConfig+0x258>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d101      	bne.n	8009a18 <DMA_SetConfig+0x1d4>
 8009a14:	2301      	movs	r3, #1
 8009a16:	e000      	b.n	8009a1a <DMA_SetConfig+0x1d6>
 8009a18:	2300      	movs	r3, #0
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d059      	beq.n	8009ad2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009a1e:	68fb      	ldr	r3, [r7, #12]
 8009a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a22:	f003 031f 	and.w	r3, r3, #31
 8009a26:	223f      	movs	r2, #63	; 0x3f
 8009a28:	409a      	lsls	r2, r3
 8009a2a:	697b      	ldr	r3, [r7, #20]
 8009a2c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	681a      	ldr	r2, [r3, #0]
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a3c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	683a      	ldr	r2, [r7, #0]
 8009a44:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	2b40      	cmp	r3, #64	; 0x40
 8009a4c:	d138      	bne.n	8009ac0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	68ba      	ldr	r2, [r7, #8]
 8009a5c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009a5e:	e086      	b.n	8009b6e <DMA_SetConfig+0x32a>
 8009a60:	40020010 	.word	0x40020010
 8009a64:	40020028 	.word	0x40020028
 8009a68:	40020040 	.word	0x40020040
 8009a6c:	40020058 	.word	0x40020058
 8009a70:	40020070 	.word	0x40020070
 8009a74:	40020088 	.word	0x40020088
 8009a78:	400200a0 	.word	0x400200a0
 8009a7c:	400200b8 	.word	0x400200b8
 8009a80:	40020410 	.word	0x40020410
 8009a84:	40020428 	.word	0x40020428
 8009a88:	40020440 	.word	0x40020440
 8009a8c:	40020458 	.word	0x40020458
 8009a90:	40020470 	.word	0x40020470
 8009a94:	40020488 	.word	0x40020488
 8009a98:	400204a0 	.word	0x400204a0
 8009a9c:	400204b8 	.word	0x400204b8
 8009aa0:	58025408 	.word	0x58025408
 8009aa4:	5802541c 	.word	0x5802541c
 8009aa8:	58025430 	.word	0x58025430
 8009aac:	58025444 	.word	0x58025444
 8009ab0:	58025458 	.word	0x58025458
 8009ab4:	5802546c 	.word	0x5802546c
 8009ab8:	58025480 	.word	0x58025480
 8009abc:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8009ac0:	68fb      	ldr	r3, [r7, #12]
 8009ac2:	681b      	ldr	r3, [r3, #0]
 8009ac4:	68ba      	ldr	r2, [r7, #8]
 8009ac6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	687a      	ldr	r2, [r7, #4]
 8009ace:	60da      	str	r2, [r3, #12]
}
 8009ad0:	e04d      	b.n	8009b6e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009ad2:	68fb      	ldr	r3, [r7, #12]
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	4a29      	ldr	r2, [pc, #164]	; (8009b7c <DMA_SetConfig+0x338>)
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	d022      	beq.n	8009b22 <DMA_SetConfig+0x2de>
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	681b      	ldr	r3, [r3, #0]
 8009ae0:	4a27      	ldr	r2, [pc, #156]	; (8009b80 <DMA_SetConfig+0x33c>)
 8009ae2:	4293      	cmp	r3, r2
 8009ae4:	d01d      	beq.n	8009b22 <DMA_SetConfig+0x2de>
 8009ae6:	68fb      	ldr	r3, [r7, #12]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a26      	ldr	r2, [pc, #152]	; (8009b84 <DMA_SetConfig+0x340>)
 8009aec:	4293      	cmp	r3, r2
 8009aee:	d018      	beq.n	8009b22 <DMA_SetConfig+0x2de>
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	4a24      	ldr	r2, [pc, #144]	; (8009b88 <DMA_SetConfig+0x344>)
 8009af6:	4293      	cmp	r3, r2
 8009af8:	d013      	beq.n	8009b22 <DMA_SetConfig+0x2de>
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	4a23      	ldr	r2, [pc, #140]	; (8009b8c <DMA_SetConfig+0x348>)
 8009b00:	4293      	cmp	r3, r2
 8009b02:	d00e      	beq.n	8009b22 <DMA_SetConfig+0x2de>
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	4a21      	ldr	r2, [pc, #132]	; (8009b90 <DMA_SetConfig+0x34c>)
 8009b0a:	4293      	cmp	r3, r2
 8009b0c:	d009      	beq.n	8009b22 <DMA_SetConfig+0x2de>
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4a20      	ldr	r2, [pc, #128]	; (8009b94 <DMA_SetConfig+0x350>)
 8009b14:	4293      	cmp	r3, r2
 8009b16:	d004      	beq.n	8009b22 <DMA_SetConfig+0x2de>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	4a1e      	ldr	r2, [pc, #120]	; (8009b98 <DMA_SetConfig+0x354>)
 8009b1e:	4293      	cmp	r3, r2
 8009b20:	d101      	bne.n	8009b26 <DMA_SetConfig+0x2e2>
 8009b22:	2301      	movs	r3, #1
 8009b24:	e000      	b.n	8009b28 <DMA_SetConfig+0x2e4>
 8009b26:	2300      	movs	r3, #0
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	d020      	beq.n	8009b6e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009b30:	f003 031f 	and.w	r3, r3, #31
 8009b34:	2201      	movs	r2, #1
 8009b36:	409a      	lsls	r2, r3
 8009b38:	693b      	ldr	r3, [r7, #16]
 8009b3a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	683a      	ldr	r2, [r7, #0]
 8009b42:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	689b      	ldr	r3, [r3, #8]
 8009b48:	2b40      	cmp	r3, #64	; 0x40
 8009b4a:	d108      	bne.n	8009b5e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	687a      	ldr	r2, [r7, #4]
 8009b52:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	681b      	ldr	r3, [r3, #0]
 8009b58:	68ba      	ldr	r2, [r7, #8]
 8009b5a:	60da      	str	r2, [r3, #12]
}
 8009b5c:	e007      	b.n	8009b6e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	68ba      	ldr	r2, [r7, #8]
 8009b64:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	60da      	str	r2, [r3, #12]
}
 8009b6e:	bf00      	nop
 8009b70:	371c      	adds	r7, #28
 8009b72:	46bd      	mov	sp, r7
 8009b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b78:	4770      	bx	lr
 8009b7a:	bf00      	nop
 8009b7c:	58025408 	.word	0x58025408
 8009b80:	5802541c 	.word	0x5802541c
 8009b84:	58025430 	.word	0x58025430
 8009b88:	58025444 	.word	0x58025444
 8009b8c:	58025458 	.word	0x58025458
 8009b90:	5802546c 	.word	0x5802546c
 8009b94:	58025480 	.word	0x58025480
 8009b98:	58025494 	.word	0x58025494

08009b9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009b9c:	b480      	push	{r7}
 8009b9e:	b085      	sub	sp, #20
 8009ba0:	af00      	add	r7, sp, #0
 8009ba2:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	4a42      	ldr	r2, [pc, #264]	; (8009cb4 <DMA_CalcBaseAndBitshift+0x118>)
 8009baa:	4293      	cmp	r3, r2
 8009bac:	d04a      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a41      	ldr	r2, [pc, #260]	; (8009cb8 <DMA_CalcBaseAndBitshift+0x11c>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d045      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a3f      	ldr	r2, [pc, #252]	; (8009cbc <DMA_CalcBaseAndBitshift+0x120>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d040      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a3e      	ldr	r2, [pc, #248]	; (8009cc0 <DMA_CalcBaseAndBitshift+0x124>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d03b      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a3c      	ldr	r2, [pc, #240]	; (8009cc4 <DMA_CalcBaseAndBitshift+0x128>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d036      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a3b      	ldr	r2, [pc, #236]	; (8009cc8 <DMA_CalcBaseAndBitshift+0x12c>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d031      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a39      	ldr	r2, [pc, #228]	; (8009ccc <DMA_CalcBaseAndBitshift+0x130>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d02c      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a38      	ldr	r2, [pc, #224]	; (8009cd0 <DMA_CalcBaseAndBitshift+0x134>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d027      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a36      	ldr	r2, [pc, #216]	; (8009cd4 <DMA_CalcBaseAndBitshift+0x138>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d022      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a35      	ldr	r2, [pc, #212]	; (8009cd8 <DMA_CalcBaseAndBitshift+0x13c>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d01d      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a33      	ldr	r2, [pc, #204]	; (8009cdc <DMA_CalcBaseAndBitshift+0x140>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d018      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a32      	ldr	r2, [pc, #200]	; (8009ce0 <DMA_CalcBaseAndBitshift+0x144>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d013      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a30      	ldr	r2, [pc, #192]	; (8009ce4 <DMA_CalcBaseAndBitshift+0x148>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d00e      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a2f      	ldr	r2, [pc, #188]	; (8009ce8 <DMA_CalcBaseAndBitshift+0x14c>)
 8009c2c:	4293      	cmp	r3, r2
 8009c2e:	d009      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	4a2d      	ldr	r2, [pc, #180]	; (8009cec <DMA_CalcBaseAndBitshift+0x150>)
 8009c36:	4293      	cmp	r3, r2
 8009c38:	d004      	beq.n	8009c44 <DMA_CalcBaseAndBitshift+0xa8>
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	4a2c      	ldr	r2, [pc, #176]	; (8009cf0 <DMA_CalcBaseAndBitshift+0x154>)
 8009c40:	4293      	cmp	r3, r2
 8009c42:	d101      	bne.n	8009c48 <DMA_CalcBaseAndBitshift+0xac>
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <DMA_CalcBaseAndBitshift+0xae>
 8009c48:	2300      	movs	r3, #0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d024      	beq.n	8009c98 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	b2db      	uxtb	r3, r3
 8009c54:	3b10      	subs	r3, #16
 8009c56:	4a27      	ldr	r2, [pc, #156]	; (8009cf4 <DMA_CalcBaseAndBitshift+0x158>)
 8009c58:	fba2 2303 	umull	r2, r3, r2, r3
 8009c5c:	091b      	lsrs	r3, r3, #4
 8009c5e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	f003 0307 	and.w	r3, r3, #7
 8009c66:	4a24      	ldr	r2, [pc, #144]	; (8009cf8 <DMA_CalcBaseAndBitshift+0x15c>)
 8009c68:	5cd3      	ldrb	r3, [r2, r3]
 8009c6a:	461a      	mov	r2, r3
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	65da      	str	r2, [r3, #92]	; 0x5c

    if (stream_number > 3U)
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2b03      	cmp	r3, #3
 8009c74:	d908      	bls.n	8009c88 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	461a      	mov	r2, r3
 8009c7c:	4b1f      	ldr	r3, [pc, #124]	; (8009cfc <DMA_CalcBaseAndBitshift+0x160>)
 8009c7e:	4013      	ands	r3, r2
 8009c80:	1d1a      	adds	r2, r3, #4
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	659a      	str	r2, [r3, #88]	; 0x58
 8009c86:	e00d      	b.n	8009ca4 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	461a      	mov	r2, r3
 8009c8e:	4b1b      	ldr	r3, [pc, #108]	; (8009cfc <DMA_CalcBaseAndBitshift+0x160>)
 8009c90:	4013      	ands	r3, r2
 8009c92:	687a      	ldr	r2, [r7, #4]
 8009c94:	6593      	str	r3, [r2, #88]	; 0x58
 8009c96:	e005      	b.n	8009ca4 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	659a      	str	r2, [r3, #88]	; 0x58
  }

  return hdma->StreamBaseAddress;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	40020010 	.word	0x40020010
 8009cb8:	40020028 	.word	0x40020028
 8009cbc:	40020040 	.word	0x40020040
 8009cc0:	40020058 	.word	0x40020058
 8009cc4:	40020070 	.word	0x40020070
 8009cc8:	40020088 	.word	0x40020088
 8009ccc:	400200a0 	.word	0x400200a0
 8009cd0:	400200b8 	.word	0x400200b8
 8009cd4:	40020410 	.word	0x40020410
 8009cd8:	40020428 	.word	0x40020428
 8009cdc:	40020440 	.word	0x40020440
 8009ce0:	40020458 	.word	0x40020458
 8009ce4:	40020470 	.word	0x40020470
 8009ce8:	40020488 	.word	0x40020488
 8009cec:	400204a0 	.word	0x400204a0
 8009cf0:	400204b8 	.word	0x400204b8
 8009cf4:	aaaaaaab 	.word	0xaaaaaaab
 8009cf8:	08012bd8 	.word	0x08012bd8
 8009cfc:	fffffc00 	.word	0xfffffc00

08009d00 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b085      	sub	sp, #20
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009d08:	2300      	movs	r3, #0
 8009d0a:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	699b      	ldr	r3, [r3, #24]
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d120      	bne.n	8009d56 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8009d14:	687b      	ldr	r3, [r7, #4]
 8009d16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d18:	2b03      	cmp	r3, #3
 8009d1a:	d858      	bhi.n	8009dce <DMA_CheckFifoParam+0xce>
 8009d1c:	a201      	add	r2, pc, #4	; (adr r2, 8009d24 <DMA_CheckFifoParam+0x24>)
 8009d1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d22:	bf00      	nop
 8009d24:	08009d35 	.word	0x08009d35
 8009d28:	08009d47 	.word	0x08009d47
 8009d2c:	08009d35 	.word	0x08009d35
 8009d30:	08009dcf 	.word	0x08009dcf
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d048      	beq.n	8009dd2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009d44:	e045      	b.n	8009dd2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d4a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009d4e:	d142      	bne.n	8009dd6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8009d50:	2301      	movs	r3, #1
 8009d52:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009d54:	e03f      	b.n	8009dd6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	699b      	ldr	r3, [r3, #24]
 8009d5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d5e:	d123      	bne.n	8009da8 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d838      	bhi.n	8009dda <DMA_CheckFifoParam+0xda>
 8009d68:	a201      	add	r2, pc, #4	; (adr r2, 8009d70 <DMA_CheckFifoParam+0x70>)
 8009d6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009d6e:	bf00      	nop
 8009d70:	08009d81 	.word	0x08009d81
 8009d74:	08009d87 	.word	0x08009d87
 8009d78:	08009d81 	.word	0x08009d81
 8009d7c:	08009d99 	.word	0x08009d99
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8009d80:	2301      	movs	r3, #1
 8009d82:	73fb      	strb	r3, [r7, #15]
        break;
 8009d84:	e030      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d8a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009d8e:	2b00      	cmp	r3, #0
 8009d90:	d025      	beq.n	8009dde <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8009d92:	2301      	movs	r3, #1
 8009d94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009d96:	e022      	b.n	8009dde <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d9c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009da0:	d11f      	bne.n	8009de2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8009da2:	2301      	movs	r3, #1
 8009da4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8009da6:	e01c      	b.n	8009de2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009dac:	2b02      	cmp	r3, #2
 8009dae:	d902      	bls.n	8009db6 <DMA_CheckFifoParam+0xb6>
 8009db0:	2b03      	cmp	r3, #3
 8009db2:	d003      	beq.n	8009dbc <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8009db4:	e018      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	73fb      	strb	r3, [r7, #15]
        break;
 8009dba:	e015      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009dc0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d00e      	beq.n	8009de6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	73fb      	strb	r3, [r7, #15]
    break;
 8009dcc:	e00b      	b.n	8009de6 <DMA_CheckFifoParam+0xe6>
        break;
 8009dce:	bf00      	nop
 8009dd0:	e00a      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
        break;
 8009dd2:	bf00      	nop
 8009dd4:	e008      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
        break;
 8009dd6:	bf00      	nop
 8009dd8:	e006      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
        break;
 8009dda:	bf00      	nop
 8009ddc:	e004      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
        break;
 8009dde:	bf00      	nop
 8009de0:	e002      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
        break;
 8009de2:	bf00      	nop
 8009de4:	e000      	b.n	8009de8 <DMA_CheckFifoParam+0xe8>
    break;
 8009de6:	bf00      	nop
    }
  }

  return status;
 8009de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3714      	adds	r7, #20
 8009dee:	46bd      	mov	sp, r7
 8009df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df4:	4770      	bx	lr
 8009df6:	bf00      	nop

08009df8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	681b      	ldr	r3, [r3, #0]
 8009e04:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a38      	ldr	r2, [pc, #224]	; (8009eec <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d022      	beq.n	8009e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a36      	ldr	r2, [pc, #216]	; (8009ef0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d01d      	beq.n	8009e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	4a35      	ldr	r2, [pc, #212]	; (8009ef4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d018      	beq.n	8009e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	4a33      	ldr	r2, [pc, #204]	; (8009ef8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8009e2a:	4293      	cmp	r3, r2
 8009e2c:	d013      	beq.n	8009e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	681b      	ldr	r3, [r3, #0]
 8009e32:	4a32      	ldr	r2, [pc, #200]	; (8009efc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8009e34:	4293      	cmp	r3, r2
 8009e36:	d00e      	beq.n	8009e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	4a30      	ldr	r2, [pc, #192]	; (8009f00 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d009      	beq.n	8009e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	4a2f      	ldr	r2, [pc, #188]	; (8009f04 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8009e48:	4293      	cmp	r3, r2
 8009e4a:	d004      	beq.n	8009e56 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a2d      	ldr	r2, [pc, #180]	; (8009f08 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d101      	bne.n	8009e5a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d01a      	beq.n	8009e96 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	b2db      	uxtb	r3, r3
 8009e66:	3b08      	subs	r3, #8
 8009e68:	4a28      	ldr	r2, [pc, #160]	; (8009f0c <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8009e6a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e6e:	091b      	lsrs	r3, r3, #4
 8009e70:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8009e72:	68fa      	ldr	r2, [r7, #12]
 8009e74:	4b26      	ldr	r3, [pc, #152]	; (8009f10 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8009e76:	4413      	add	r3, r2
 8009e78:	009b      	lsls	r3, r3, #2
 8009e7a:	461a      	mov	r2, r3
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	4a24      	ldr	r2, [pc, #144]	; (8009f14 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8009e84:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	f003 031f 	and.w	r3, r3, #31
 8009e8c:	2201      	movs	r2, #1
 8009e8e:	409a      	lsls	r2, r3
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	669a      	str	r2, [r3, #104]	; 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8009e94:	e024      	b.n	8009ee0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	b2db      	uxtb	r3, r3
 8009e9c:	3b10      	subs	r3, #16
 8009e9e:	4a1e      	ldr	r2, [pc, #120]	; (8009f18 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8009ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8009ea4:	091b      	lsrs	r3, r3, #4
 8009ea6:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8009ea8:	68bb      	ldr	r3, [r7, #8]
 8009eaa:	4a1c      	ldr	r2, [pc, #112]	; (8009f1c <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d806      	bhi.n	8009ebe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	4a1b      	ldr	r2, [pc, #108]	; (8009f20 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8009eb4:	4293      	cmp	r3, r2
 8009eb6:	d902      	bls.n	8009ebe <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	3308      	adds	r3, #8
 8009ebc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8009ebe:	68fa      	ldr	r2, [r7, #12]
 8009ec0:	4b18      	ldr	r3, [pc, #96]	; (8009f24 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8009ec2:	4413      	add	r3, r2
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	4a16      	ldr	r2, [pc, #88]	; (8009f28 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8009ed0:	665a      	str	r2, [r3, #100]	; 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	f003 031f 	and.w	r3, r3, #31
 8009ed8:	2201      	movs	r2, #1
 8009eda:	409a      	lsls	r2, r3
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	669a      	str	r2, [r3, #104]	; 0x68
}
 8009ee0:	bf00      	nop
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr
 8009eec:	58025408 	.word	0x58025408
 8009ef0:	5802541c 	.word	0x5802541c
 8009ef4:	58025430 	.word	0x58025430
 8009ef8:	58025444 	.word	0x58025444
 8009efc:	58025458 	.word	0x58025458
 8009f00:	5802546c 	.word	0x5802546c
 8009f04:	58025480 	.word	0x58025480
 8009f08:	58025494 	.word	0x58025494
 8009f0c:	cccccccd 	.word	0xcccccccd
 8009f10:	16009600 	.word	0x16009600
 8009f14:	58025880 	.word	0x58025880
 8009f18:	aaaaaaab 	.word	0xaaaaaaab
 8009f1c:	400204b8 	.word	0x400204b8
 8009f20:	4002040f 	.word	0x4002040f
 8009f24:	10008200 	.word	0x10008200
 8009f28:	40020880 	.word	0x40020880

08009f2c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8009f2c:	b480      	push	{r7}
 8009f2e:	b085      	sub	sp, #20
 8009f30:	af00      	add	r7, sp, #0
 8009f32:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	685b      	ldr	r3, [r3, #4]
 8009f38:	b2db      	uxtb	r3, r3
 8009f3a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8009f3c:	68fb      	ldr	r3, [r7, #12]
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d04a      	beq.n	8009fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8009f42:	68fb      	ldr	r3, [r7, #12]
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d847      	bhi.n	8009fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	4a25      	ldr	r2, [pc, #148]	; (8009fe4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8009f4e:	4293      	cmp	r3, r2
 8009f50:	d022      	beq.n	8009f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	4a24      	ldr	r2, [pc, #144]	; (8009fe8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d01d      	beq.n	8009f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	4a22      	ldr	r2, [pc, #136]	; (8009fec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8009f62:	4293      	cmp	r3, r2
 8009f64:	d018      	beq.n	8009f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	4a21      	ldr	r2, [pc, #132]	; (8009ff0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8009f6c:	4293      	cmp	r3, r2
 8009f6e:	d013      	beq.n	8009f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	4a1f      	ldr	r2, [pc, #124]	; (8009ff4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8009f76:	4293      	cmp	r3, r2
 8009f78:	d00e      	beq.n	8009f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	4a1e      	ldr	r2, [pc, #120]	; (8009ff8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8009f80:	4293      	cmp	r3, r2
 8009f82:	d009      	beq.n	8009f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	4a1c      	ldr	r2, [pc, #112]	; (8009ffc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8009f8a:	4293      	cmp	r3, r2
 8009f8c:	d004      	beq.n	8009f98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	4a1b      	ldr	r2, [pc, #108]	; (800a000 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8009f94:	4293      	cmp	r3, r2
 8009f96:	d101      	bne.n	8009f9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8009f98:	2301      	movs	r3, #1
 8009f9a:	e000      	b.n	8009f9e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d00a      	beq.n	8009fb8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8009fa2:	68fa      	ldr	r2, [r7, #12]
 8009fa4:	4b17      	ldr	r3, [pc, #92]	; (800a004 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8009fa6:	4413      	add	r3, r2
 8009fa8:	009b      	lsls	r3, r3, #2
 8009faa:	461a      	mov	r2, r3
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	4a15      	ldr	r2, [pc, #84]	; (800a008 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8009fb4:	671a      	str	r2, [r3, #112]	; 0x70
 8009fb6:	e009      	b.n	8009fcc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	4b14      	ldr	r3, [pc, #80]	; (800a00c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8009fbc:	4413      	add	r3, r2
 8009fbe:	009b      	lsls	r3, r3, #2
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	687b      	ldr	r3, [r7, #4]
 8009fc4:	66da      	str	r2, [r3, #108]	; 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a11      	ldr	r2, [pc, #68]	; (800a010 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8009fca:	671a      	str	r2, [r3, #112]	; 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8009fcc:	68fb      	ldr	r3, [r7, #12]
 8009fce:	3b01      	subs	r3, #1
 8009fd0:	2201      	movs	r2, #1
 8009fd2:	409a      	lsls	r2, r3
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	675a      	str	r2, [r3, #116]	; 0x74
  }
}
 8009fd8:	bf00      	nop
 8009fda:	3714      	adds	r7, #20
 8009fdc:	46bd      	mov	sp, r7
 8009fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fe2:	4770      	bx	lr
 8009fe4:	58025408 	.word	0x58025408
 8009fe8:	5802541c 	.word	0x5802541c
 8009fec:	58025430 	.word	0x58025430
 8009ff0:	58025444 	.word	0x58025444
 8009ff4:	58025458 	.word	0x58025458
 8009ff8:	5802546c 	.word	0x5802546c
 8009ffc:	58025480 	.word	0x58025480
 800a000:	58025494 	.word	0x58025494
 800a004:	1600963f 	.word	0x1600963f
 800a008:	58025940 	.word	0x58025940
 800a00c:	1000823f 	.word	0x1000823f
 800a010:	40020940 	.word	0x40020940

0800a014 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b084      	sub	sp, #16
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d101      	bne.n	800a026 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800a022:	2301      	movs	r3, #1
 800a024:	e0cf      	b.n	800a1c6 <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a02c:	2b00      	cmp	r3, #0
 800a02e:	d106      	bne.n	800a03e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	2223      	movs	r2, #35	; 0x23
 800a034:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f7fb fb11 	bl	8005660 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a03e:	4b64      	ldr	r3, [pc, #400]	; (800a1d0 <HAL_ETH_Init+0x1bc>)
 800a040:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a044:	4a62      	ldr	r2, [pc, #392]	; (800a1d0 <HAL_ETH_Init+0x1bc>)
 800a046:	f043 0302 	orr.w	r3, r3, #2
 800a04a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a04e:	4b60      	ldr	r3, [pc, #384]	; (800a1d0 <HAL_ETH_Init+0x1bc>)
 800a050:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a054:	f003 0302 	and.w	r3, r3, #2
 800a058:	60bb      	str	r3, [r7, #8]
 800a05a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	7a1b      	ldrb	r3, [r3, #8]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d103      	bne.n	800a06c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800a064:	2000      	movs	r0, #0
 800a066:	f7fd f875 	bl	8007154 <HAL_SYSCFG_ETHInterfaceSelect>
 800a06a:	e003      	b.n	800a074 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800a06c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800a070:	f7fd f870 	bl	8007154 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800a074:	4b57      	ldr	r3, [pc, #348]	; (800a1d4 <HAL_ETH_Init+0x1c0>)
 800a076:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	687a      	ldr	r2, [r7, #4]
 800a084:	6812      	ldr	r2, [r2, #0]
 800a086:	f043 0301 	orr.w	r3, r3, #1
 800a08a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a08e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a090:	f7fd f824 	bl	80070dc <HAL_GetTick>
 800a094:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a096:	e011      	b.n	800a0bc <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800a098:	f7fd f820 	bl	80070dc <HAL_GetTick>
 800a09c:	4602      	mov	r2, r0
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	1ad3      	subs	r3, r2, r3
 800a0a2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800a0a6:	d909      	bls.n	800a0bc <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	2204      	movs	r2, #4
 800a0ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	22e0      	movs	r2, #224	; 0xe0
 800a0b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e084      	b.n	800a1c6 <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	681b      	ldr	r3, [r3, #0]
 800a0c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	f003 0301 	and.w	r3, r3, #1
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d1e4      	bne.n	800a098 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800a0ce:	6878      	ldr	r0, [r7, #4]
 800a0d0:	f000 f886 	bl	800a1e0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800a0d4:	f002 fc54 	bl	800c980 <HAL_RCC_GetHCLKFreq>
 800a0d8:	4603      	mov	r3, r0
 800a0da:	4a3f      	ldr	r2, [pc, #252]	; (800a1d8 <HAL_ETH_Init+0x1c4>)
 800a0dc:	fba2 2303 	umull	r2, r3, r2, r3
 800a0e0:	0c9a      	lsrs	r2, r3, #18
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	3a01      	subs	r2, #1
 800a0e8:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800a0ec:	6878      	ldr	r0, [r7, #4]
 800a0ee:	f000 fa71 	bl	800a5d4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a0fa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800a0fe:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800a102:	687a      	ldr	r2, [r7, #4]
 800a104:	6812      	ldr	r2, [r2, #0]
 800a106:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a10a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a10e:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	695b      	ldr	r3, [r3, #20]
 800a116:	f003 0303 	and.w	r3, r3, #3
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d009      	beq.n	800a132 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	22e0      	movs	r2, #224	; 0xe0
 800a12a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800a12e:	2301      	movs	r3, #1
 800a130:	e049      	b.n	800a1c6 <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a13a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a13e:	4b27      	ldr	r3, [pc, #156]	; (800a1dc <HAL_ETH_Init+0x1c8>)
 800a140:	4013      	ands	r3, r2
 800a142:	687a      	ldr	r2, [r7, #4]
 800a144:	6952      	ldr	r2, [r2, #20]
 800a146:	0051      	lsls	r1, r2, #1
 800a148:	687a      	ldr	r2, [r7, #4]
 800a14a:	6812      	ldr	r2, [r2, #0]
 800a14c:	430b      	orrs	r3, r1
 800a14e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a152:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fad9 	bl	800a70e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800a15c:	6878      	ldr	r0, [r7, #4]
 800a15e:	f000 fb1f 	bl	800a7a0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	685b      	ldr	r3, [r3, #4]
 800a166:	3305      	adds	r3, #5
 800a168:	781b      	ldrb	r3, [r3, #0]
 800a16a:	021a      	lsls	r2, r3, #8
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	685b      	ldr	r3, [r3, #4]
 800a170:	3304      	adds	r3, #4
 800a172:	781b      	ldrb	r3, [r3, #0]
 800a174:	4619      	mov	r1, r3
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	681b      	ldr	r3, [r3, #0]
 800a17a:	430a      	orrs	r2, r1
 800a17c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	3303      	adds	r3, #3
 800a186:	781b      	ldrb	r3, [r3, #0]
 800a188:	061a      	lsls	r2, r3, #24
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	3302      	adds	r3, #2
 800a190:	781b      	ldrb	r3, [r3, #0]
 800a192:	041b      	lsls	r3, r3, #16
 800a194:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	685b      	ldr	r3, [r3, #4]
 800a19a:	3301      	adds	r3, #1
 800a19c:	781b      	ldrb	r3, [r3, #0]
 800a19e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a1a0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	781b      	ldrb	r3, [r3, #0]
 800a1a8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800a1ae:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800a1b0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2200      	movs	r2, #0
 800a1b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800a1bc:	687b      	ldr	r3, [r7, #4]
 800a1be:	2210      	movs	r2, #16
 800a1c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800a1c4:	2300      	movs	r3, #0
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3710      	adds	r7, #16
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	58024400 	.word	0x58024400
 800a1d4:	58000400 	.word	0x58000400
 800a1d8:	431bde83 	.word	0x431bde83
 800a1dc:	ffff8001 	.word	0xffff8001

0800a1e0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800a1e0:	b580      	push	{r7, lr}
 800a1e2:	b084      	sub	sp, #16
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a1f0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a1f8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800a1fa:	f002 fbc1 	bl	800c980 <HAL_RCC_GetHCLKFreq>
 800a1fe:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	4a1e      	ldr	r2, [pc, #120]	; (800a27c <HAL_ETH_SetMDIOClockRange+0x9c>)
 800a204:	4293      	cmp	r3, r2
 800a206:	d908      	bls.n	800a21a <HAL_ETH_SetMDIOClockRange+0x3a>
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	4a1d      	ldr	r2, [pc, #116]	; (800a280 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d804      	bhi.n	800a21a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800a216:	60fb      	str	r3, [r7, #12]
 800a218:	e027      	b.n	800a26a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	4a18      	ldr	r2, [pc, #96]	; (800a280 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800a21e:	4293      	cmp	r3, r2
 800a220:	d908      	bls.n	800a234 <HAL_ETH_SetMDIOClockRange+0x54>
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	4a17      	ldr	r2, [pc, #92]	; (800a284 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a226:	4293      	cmp	r3, r2
 800a228:	d204      	bcs.n	800a234 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800a22a:	68fb      	ldr	r3, [r7, #12]
 800a22c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800a230:	60fb      	str	r3, [r7, #12]
 800a232:	e01a      	b.n	800a26a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	4a13      	ldr	r2, [pc, #76]	; (800a284 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d303      	bcc.n	800a244 <HAL_ETH_SetMDIOClockRange+0x64>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	4a12      	ldr	r2, [pc, #72]	; (800a288 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d911      	bls.n	800a268 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	4a10      	ldr	r2, [pc, #64]	; (800a288 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d908      	bls.n	800a25e <HAL_ETH_SetMDIOClockRange+0x7e>
 800a24c:	68bb      	ldr	r3, [r7, #8]
 800a24e:	4a0f      	ldr	r2, [pc, #60]	; (800a28c <HAL_ETH_SetMDIOClockRange+0xac>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d804      	bhi.n	800a25e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a25a:	60fb      	str	r3, [r7, #12]
 800a25c:	e005      	b.n	800a26a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800a264:	60fb      	str	r3, [r7, #12]
 800a266:	e000      	b.n	800a26a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800a268:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	68fa      	ldr	r2, [r7, #12]
 800a270:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800a274:	bf00      	nop
 800a276:	3710      	adds	r7, #16
 800a278:	46bd      	mov	sp, r7
 800a27a:	bd80      	pop	{r7, pc}
 800a27c:	01312cff 	.word	0x01312cff
 800a280:	02160ebf 	.word	0x02160ebf
 800a284:	03938700 	.word	0x03938700
 800a288:	05f5e0ff 	.word	0x05f5e0ff
 800a28c:	08f0d17f 	.word	0x08f0d17f

0800a290 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800a290:	b480      	push	{r7}
 800a292:	b085      	sub	sp, #20
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
 800a298:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800a29a:	683b      	ldr	r3, [r7, #0]
 800a29c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800a29e:	683b      	ldr	r3, [r7, #0]
 800a2a0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800a2a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	791b      	ldrb	r3, [r3, #4]
 800a2a8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800a2aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a2ac:	683b      	ldr	r3, [r7, #0]
 800a2ae:	7b1b      	ldrb	r3, [r3, #12]
 800a2b0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800a2b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	7b5b      	ldrb	r3, [r3, #13]
 800a2b8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800a2ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a2bc:	683b      	ldr	r3, [r7, #0]
 800a2be:	7b9b      	ldrb	r3, [r3, #14]
 800a2c0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800a2c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a2c4:	683b      	ldr	r3, [r7, #0]
 800a2c6:	7bdb      	ldrb	r3, [r3, #15]
 800a2c8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800a2ca:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a2cc:	683a      	ldr	r2, [r7, #0]
 800a2ce:	7c12      	ldrb	r2, [r2, #16]
 800a2d0:	2a00      	cmp	r2, #0
 800a2d2:	d102      	bne.n	800a2da <ETH_SetMACConfig+0x4a>
 800a2d4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800a2d8:	e000      	b.n	800a2dc <ETH_SetMACConfig+0x4c>
 800a2da:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800a2dc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	7c52      	ldrb	r2, [r2, #17]
 800a2e2:	2a00      	cmp	r2, #0
 800a2e4:	d102      	bne.n	800a2ec <ETH_SetMACConfig+0x5c>
 800a2e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a2ea:	e000      	b.n	800a2ee <ETH_SetMACConfig+0x5e>
 800a2ec:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800a2ee:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800a2f0:	683b      	ldr	r3, [r7, #0]
 800a2f2:	7c9b      	ldrb	r3, [r3, #18]
 800a2f4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800a2f6:	431a      	orrs	r2, r3
               macconf->Speed |
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800a2fc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800a302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a304:	683b      	ldr	r3, [r7, #0]
 800a306:	7f1b      	ldrb	r3, [r3, #28]
 800a308:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800a30a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a30c:	683b      	ldr	r3, [r7, #0]
 800a30e:	7f5b      	ldrb	r3, [r3, #29]
 800a310:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800a312:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a314:	683a      	ldr	r2, [r7, #0]
 800a316:	7f92      	ldrb	r2, [r2, #30]
 800a318:	2a00      	cmp	r2, #0
 800a31a:	d102      	bne.n	800a322 <ETH_SetMACConfig+0x92>
 800a31c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a320:	e000      	b.n	800a324 <ETH_SetMACConfig+0x94>
 800a322:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800a324:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	7fdb      	ldrb	r3, [r3, #31]
 800a32a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800a32c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	f892 2020 	ldrb.w	r2, [r2, #32]
 800a334:	2a00      	cmp	r2, #0
 800a336:	d102      	bne.n	800a33e <ETH_SetMACConfig+0xae>
 800a338:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a33c:	e000      	b.n	800a340 <ETH_SetMACConfig+0xb0>
 800a33e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800a340:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800a342:	683b      	ldr	r3, [r7, #0]
 800a344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800a346:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a34e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800a350:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800a356:	4313      	orrs	r3, r2
 800a358:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	681b      	ldr	r3, [r3, #0]
 800a35e:	681a      	ldr	r2, [r3, #0]
 800a360:	4b56      	ldr	r3, [pc, #344]	; (800a4bc <ETH_SetMACConfig+0x22c>)
 800a362:	4013      	ands	r3, r2
 800a364:	687a      	ldr	r2, [r7, #4]
 800a366:	6812      	ldr	r2, [r2, #0]
 800a368:	68f9      	ldr	r1, [r7, #12]
 800a36a:	430b      	orrs	r3, r1
 800a36c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a36e:	683b      	ldr	r3, [r7, #0]
 800a370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a372:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a374:	683b      	ldr	r3, [r7, #0]
 800a376:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800a37a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a37c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800a384:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800a386:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800a38e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800a390:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800a392:	683a      	ldr	r2, [r7, #0]
 800a394:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800a398:	2a00      	cmp	r2, #0
 800a39a:	d102      	bne.n	800a3a2 <ETH_SetMACConfig+0x112>
 800a39c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a3a0:	e000      	b.n	800a3a4 <ETH_SetMACConfig+0x114>
 800a3a2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800a3a4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800a3a6:	683b      	ldr	r3, [r7, #0]
 800a3a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	685a      	ldr	r2, [r3, #4]
 800a3b4:	4b42      	ldr	r3, [pc, #264]	; (800a4c0 <ETH_SetMACConfig+0x230>)
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	687a      	ldr	r2, [r7, #4]
 800a3ba:	6812      	ldr	r2, [r2, #0]
 800a3bc:	68f9      	ldr	r1, [r7, #12]
 800a3be:	430b      	orrs	r3, r1
 800a3c0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a3c2:	683b      	ldr	r3, [r7, #0]
 800a3c4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800a3c8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800a3ca:	683b      	ldr	r3, [r7, #0]
 800a3cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800a3ce:	4313      	orrs	r3, r2
 800a3d0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	68da      	ldr	r2, [r3, #12]
 800a3d8:	4b3a      	ldr	r3, [pc, #232]	; (800a4c4 <ETH_SetMACConfig+0x234>)
 800a3da:	4013      	ands	r3, r2
 800a3dc:	687a      	ldr	r2, [r7, #4]
 800a3de:	6812      	ldr	r2, [r2, #0]
 800a3e0:	68f9      	ldr	r1, [r7, #12]
 800a3e2:	430b      	orrs	r3, r1
 800a3e4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a3e6:	683b      	ldr	r3, [r7, #0]
 800a3e8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800a3ec:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a3f2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800a3f4:	683a      	ldr	r2, [r7, #0]
 800a3f6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800a3fa:	2a00      	cmp	r2, #0
 800a3fc:	d101      	bne.n	800a402 <ETH_SetMACConfig+0x172>
 800a3fe:	2280      	movs	r2, #128	; 0x80
 800a400:	e000      	b.n	800a404 <ETH_SetMACConfig+0x174>
 800a402:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800a404:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a40a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800a40c:	4313      	orrs	r3, r2
 800a40e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a416:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800a41a:	4013      	ands	r3, r2
 800a41c:	687a      	ldr	r2, [r7, #4]
 800a41e:	6812      	ldr	r2, [r2, #0]
 800a420:	68f9      	ldr	r1, [r7, #12]
 800a422:	430b      	orrs	r3, r1
 800a424:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800a42c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800a434:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800a436:	4313      	orrs	r3, r2
 800a438:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a442:	f023 0103 	bic.w	r1, r3, #3
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68fa      	ldr	r2, [r7, #12]
 800a44c:	430a      	orrs	r2, r1
 800a44e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800a45a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800a45e:	683b      	ldr	r3, [r7, #0]
 800a460:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	430a      	orrs	r2, r1
 800a468:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a470:	683a      	ldr	r2, [r7, #0]
 800a472:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800a476:	2a00      	cmp	r2, #0
 800a478:	d101      	bne.n	800a47e <ETH_SetMACConfig+0x1ee>
 800a47a:	2240      	movs	r2, #64	; 0x40
 800a47c:	e000      	b.n	800a480 <ETH_SetMACConfig+0x1f0>
 800a47e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800a480:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800a488:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800a48a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800a492:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800a494:	4313      	orrs	r3, r2
 800a496:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800a4a0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	68fa      	ldr	r2, [r7, #12]
 800a4aa:	430a      	orrs	r2, r1
 800a4ac:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800a4b0:	bf00      	nop
 800a4b2:	3714      	adds	r7, #20
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ba:	4770      	bx	lr
 800a4bc:	00048083 	.word	0x00048083
 800a4c0:	c0f88000 	.word	0xc0f88000
 800a4c4:	fffffef0 	.word	0xfffffef0

0800a4c8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800a4c8:	b480      	push	{r7}
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	af00      	add	r7, sp, #0
 800a4ce:	6078      	str	r0, [r7, #4]
 800a4d0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a4da:	681a      	ldr	r2, [r3, #0]
 800a4dc:	4b38      	ldr	r3, [pc, #224]	; (800a5c0 <ETH_SetDMAConfig+0xf8>)
 800a4de:	4013      	ands	r3, r2
 800a4e0:	683a      	ldr	r2, [r7, #0]
 800a4e2:	6811      	ldr	r1, [r2, #0]
 800a4e4:	687a      	ldr	r2, [r7, #4]
 800a4e6:	6812      	ldr	r2, [r2, #0]
 800a4e8:	430b      	orrs	r3, r1
 800a4ea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a4ee:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a4f0:	683b      	ldr	r3, [r7, #0]
 800a4f2:	791b      	ldrb	r3, [r3, #4]
 800a4f4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800a4f6:	683b      	ldr	r3, [r7, #0]
 800a4f8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a4fa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	7b1b      	ldrb	r3, [r3, #12]
 800a500:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800a502:	4313      	orrs	r3, r2
 800a504:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a50e:	685a      	ldr	r2, [r3, #4]
 800a510:	4b2c      	ldr	r3, [pc, #176]	; (800a5c4 <ETH_SetDMAConfig+0xfc>)
 800a512:	4013      	ands	r3, r2
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6812      	ldr	r2, [r2, #0]
 800a518:	68f9      	ldr	r1, [r7, #12]
 800a51a:	430b      	orrs	r3, r1
 800a51c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a520:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a522:	683b      	ldr	r3, [r7, #0]
 800a524:	7b5b      	ldrb	r3, [r3, #13]
 800a526:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800a52c:	4313      	orrs	r3, r2
 800a52e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a538:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800a53c:	4b22      	ldr	r3, [pc, #136]	; (800a5c8 <ETH_SetDMAConfig+0x100>)
 800a53e:	4013      	ands	r3, r2
 800a540:	687a      	ldr	r2, [r7, #4]
 800a542:	6812      	ldr	r2, [r2, #0]
 800a544:	68f9      	ldr	r1, [r7, #12]
 800a546:	430b      	orrs	r3, r1
 800a548:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a54c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	7d1b      	ldrb	r3, [r3, #20]
 800a558:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800a55a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	7f5b      	ldrb	r3, [r3, #29]
 800a560:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800a562:	4313      	orrs	r3, r2
 800a564:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a56e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800a572:	4b16      	ldr	r3, [pc, #88]	; (800a5cc <ETH_SetDMAConfig+0x104>)
 800a574:	4013      	ands	r3, r2
 800a576:	687a      	ldr	r2, [r7, #4]
 800a578:	6812      	ldr	r2, [r2, #0]
 800a57a:	68f9      	ldr	r1, [r7, #12]
 800a57c:	430b      	orrs	r3, r1
 800a57e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a582:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a586:	683b      	ldr	r3, [r7, #0]
 800a588:	7f1b      	ldrb	r3, [r3, #28]
 800a58a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800a590:	4313      	orrs	r3, r2
 800a592:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a59c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800a5a0:	4b0b      	ldr	r3, [pc, #44]	; (800a5d0 <ETH_SetDMAConfig+0x108>)
 800a5a2:	4013      	ands	r3, r2
 800a5a4:	687a      	ldr	r2, [r7, #4]
 800a5a6:	6812      	ldr	r2, [r2, #0]
 800a5a8:	68f9      	ldr	r1, [r7, #12]
 800a5aa:	430b      	orrs	r3, r1
 800a5ac:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a5b0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800a5b4:	bf00      	nop
 800a5b6:	3714      	adds	r7, #20
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5be:	4770      	bx	lr
 800a5c0:	ffff87fd 	.word	0xffff87fd
 800a5c4:	ffff2ffe 	.word	0xffff2ffe
 800a5c8:	fffec000 	.word	0xfffec000
 800a5cc:	ffc0efef 	.word	0xffc0efef
 800a5d0:	7fc0ffff 	.word	0x7fc0ffff

0800a5d4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b0a4      	sub	sp, #144	; 0x90
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800a5dc:	2301      	movs	r3, #1
 800a5de:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800a5e6:	2300      	movs	r3, #0
 800a5e8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800a5f8:	2301      	movs	r3, #1
 800a5fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800a5fe:	2301      	movs	r3, #1
 800a600:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800a604:	2300      	movs	r3, #0
 800a606:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800a60a:	2301      	movs	r3, #1
 800a60c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800a610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800a614:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800a616:	2300      	movs	r3, #0
 800a618:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800a620:	2300      	movs	r3, #0
 800a622:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800a626:	2300      	movs	r3, #0
 800a628:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800a62c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800a630:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800a632:	2300      	movs	r3, #0
 800a634:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800a638:	2300      	movs	r3, #0
 800a63a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800a63c:	2301      	movs	r3, #1
 800a63e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800a642:	2300      	movs	r3, #0
 800a644:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800a648:	2300      	movs	r3, #0
 800a64a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800a64e:	2300      	movs	r3, #0
 800a650:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800a652:	2300      	movs	r3, #0
 800a654:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800a656:	2300      	movs	r3, #0
 800a658:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800a65a:	2300      	movs	r3, #0
 800a65c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800a660:	2300      	movs	r3, #0
 800a662:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800a666:	2301      	movs	r3, #1
 800a668:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800a66c:	2320      	movs	r3, #32
 800a66e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800a672:	2301      	movs	r3, #1
 800a674:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800a678:	2300      	movs	r3, #0
 800a67a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800a67e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800a682:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800a684:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800a688:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800a68a:	2300      	movs	r3, #0
 800a68c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800a690:	2302      	movs	r3, #2
 800a692:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800a696:	2300      	movs	r3, #0
 800a698:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800a69c:	2300      	movs	r3, #0
 800a69e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800a6ae:	2300      	movs	r3, #0
 800a6b0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800a6b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800a6bc:	4619      	mov	r1, r3
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f7ff fde6 	bl	800a290 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800a6c8:	2301      	movs	r3, #1
 800a6ca:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800a6da:	2300      	movs	r3, #0
 800a6dc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800a6de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6e2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800a6e4:	2300      	movs	r3, #0
 800a6e6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800a6e8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800a6ec:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800a6f4:	f44f 7306 	mov.w	r3, #536	; 0x218
 800a6f8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800a6fa:	f107 0308 	add.w	r3, r7, #8
 800a6fe:	4619      	mov	r1, r3
 800a700:	6878      	ldr	r0, [r7, #4]
 800a702:	f7ff fee1 	bl	800a4c8 <ETH_SetDMAConfig>
}
 800a706:	bf00      	nop
 800a708:	3790      	adds	r7, #144	; 0x90
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}

0800a70e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800a70e:	b480      	push	{r7}
 800a710:	b085      	sub	sp, #20
 800a712:	af00      	add	r7, sp, #0
 800a714:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
 800a71a:	e01d      	b.n	800a758 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	68d9      	ldr	r1, [r3, #12]
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	4613      	mov	r3, r2
 800a724:	005b      	lsls	r3, r3, #1
 800a726:	4413      	add	r3, r2
 800a728:	00db      	lsls	r3, r3, #3
 800a72a:	440b      	add	r3, r1
 800a72c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	2200      	movs	r2, #0
 800a732:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800a734:	68bb      	ldr	r3, [r7, #8]
 800a736:	2200      	movs	r2, #0
 800a738:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800a73a:	68bb      	ldr	r3, [r7, #8]
 800a73c:	2200      	movs	r2, #0
 800a73e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800a740:	68bb      	ldr	r3, [r7, #8]
 800a742:	2200      	movs	r2, #0
 800a744:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800a746:	68b9      	ldr	r1, [r7, #8]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	3206      	adds	r2, #6
 800a74e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	3301      	adds	r3, #1
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	68fb      	ldr	r3, [r7, #12]
 800a75a:	2b03      	cmp	r3, #3
 800a75c:	d9de      	bls.n	800a71c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	2200      	movs	r2, #0
 800a762:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a76c:	461a      	mov	r2, r3
 800a76e:	2303      	movs	r3, #3
 800a770:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	68da      	ldr	r2, [r3, #12]
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	681b      	ldr	r3, [r3, #0]
 800a77c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a780:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	68da      	ldr	r2, [r3, #12]
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	681b      	ldr	r3, [r3, #0]
 800a78c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a790:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800a794:	bf00      	nop
 800a796:	3714      	adds	r7, #20
 800a798:	46bd      	mov	sp, r7
 800a79a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a79e:	4770      	bx	lr

0800a7a0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800a7a0:	b480      	push	{r7}
 800a7a2:	b085      	sub	sp, #20
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a7a8:	2300      	movs	r3, #0
 800a7aa:	60fb      	str	r3, [r7, #12]
 800a7ac:	e023      	b.n	800a7f6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6919      	ldr	r1, [r3, #16]
 800a7b2:	68fa      	ldr	r2, [r7, #12]
 800a7b4:	4613      	mov	r3, r2
 800a7b6:	005b      	lsls	r3, r3, #1
 800a7b8:	4413      	add	r3, r2
 800a7ba:	00db      	lsls	r3, r3, #3
 800a7bc:	440b      	add	r3, r1
 800a7be:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800a7c0:	68bb      	ldr	r3, [r7, #8]
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800a7c6:	68bb      	ldr	r3, [r7, #8]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800a7cc:	68bb      	ldr	r3, [r7, #8]
 800a7ce:	2200      	movs	r2, #0
 800a7d0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	2200      	movs	r2, #0
 800a7d6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800a7d8:	68bb      	ldr	r3, [r7, #8]
 800a7da:	2200      	movs	r2, #0
 800a7dc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800a7de:	68bb      	ldr	r3, [r7, #8]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800a7e4:	68b9      	ldr	r1, [r7, #8]
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	68fa      	ldr	r2, [r7, #12]
 800a7ea:	3212      	adds	r2, #18
 800a7ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	3301      	adds	r3, #1
 800a7f4:	60fb      	str	r3, [r7, #12]
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	2b03      	cmp	r3, #3
 800a7fa:	d9d8      	bls.n	800a7ae <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2200      	movs	r2, #0
 800a806:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	2200      	movs	r2, #0
 800a80c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	2200      	movs	r2, #0
 800a812:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	2200      	movs	r2, #0
 800a818:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a822:	461a      	mov	r2, r3
 800a824:	2303      	movs	r3, #3
 800a826:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	691a      	ldr	r2, [r3, #16]
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a836:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	691b      	ldr	r3, [r3, #16]
 800a83e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a84a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800a84e:	bf00      	nop
 800a850:	3714      	adds	r7, #20
 800a852:	46bd      	mov	sp, r7
 800a854:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a858:	4770      	bx	lr
	...

0800a85c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a85c:	b480      	push	{r7}
 800a85e:	b089      	sub	sp, #36	; 0x24
 800a860:	af00      	add	r7, sp, #0
 800a862:	6078      	str	r0, [r7, #4]
 800a864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a866:	2300      	movs	r3, #0
 800a868:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a86a:	4b89      	ldr	r3, [pc, #548]	; (800aa90 <HAL_GPIO_Init+0x234>)
 800a86c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a86e:	e194      	b.n	800ab9a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	681a      	ldr	r2, [r3, #0]
 800a874:	2101      	movs	r1, #1
 800a876:	69fb      	ldr	r3, [r7, #28]
 800a878:	fa01 f303 	lsl.w	r3, r1, r3
 800a87c:	4013      	ands	r3, r2
 800a87e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a880:	693b      	ldr	r3, [r7, #16]
 800a882:	2b00      	cmp	r3, #0
 800a884:	f000 8186 	beq.w	800ab94 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a888:	683b      	ldr	r3, [r7, #0]
 800a88a:	685b      	ldr	r3, [r3, #4]
 800a88c:	f003 0303 	and.w	r3, r3, #3
 800a890:	2b01      	cmp	r3, #1
 800a892:	d005      	beq.n	800a8a0 <HAL_GPIO_Init+0x44>
 800a894:	683b      	ldr	r3, [r7, #0]
 800a896:	685b      	ldr	r3, [r3, #4]
 800a898:	f003 0303 	and.w	r3, r3, #3
 800a89c:	2b02      	cmp	r3, #2
 800a89e:	d130      	bne.n	800a902 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	005b      	lsls	r3, r3, #1
 800a8aa:	2203      	movs	r2, #3
 800a8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800a8b0:	43db      	mvns	r3, r3
 800a8b2:	69ba      	ldr	r2, [r7, #24]
 800a8b4:	4013      	ands	r3, r2
 800a8b6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	68da      	ldr	r2, [r3, #12]
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	005b      	lsls	r3, r3, #1
 800a8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a8c4:	69ba      	ldr	r2, [r7, #24]
 800a8c6:	4313      	orrs	r3, r2
 800a8c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	685b      	ldr	r3, [r3, #4]
 800a8d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a8d6:	2201      	movs	r2, #1
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	fa02 f303 	lsl.w	r3, r2, r3
 800a8de:	43db      	mvns	r3, r3
 800a8e0:	69ba      	ldr	r2, [r7, #24]
 800a8e2:	4013      	ands	r3, r2
 800a8e4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	685b      	ldr	r3, [r3, #4]
 800a8ea:	091b      	lsrs	r3, r3, #4
 800a8ec:	f003 0201 	and.w	r2, r3, #1
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	fa02 f303 	lsl.w	r3, r2, r3
 800a8f6:	69ba      	ldr	r2, [r7, #24]
 800a8f8:	4313      	orrs	r3, r2
 800a8fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	69ba      	ldr	r2, [r7, #24]
 800a900:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f003 0303 	and.w	r3, r3, #3
 800a90a:	2b03      	cmp	r3, #3
 800a90c:	d017      	beq.n	800a93e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	68db      	ldr	r3, [r3, #12]
 800a912:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a914:	69fb      	ldr	r3, [r7, #28]
 800a916:	005b      	lsls	r3, r3, #1
 800a918:	2203      	movs	r2, #3
 800a91a:	fa02 f303 	lsl.w	r3, r2, r3
 800a91e:	43db      	mvns	r3, r3
 800a920:	69ba      	ldr	r2, [r7, #24]
 800a922:	4013      	ands	r3, r2
 800a924:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	689a      	ldr	r2, [r3, #8]
 800a92a:	69fb      	ldr	r3, [r7, #28]
 800a92c:	005b      	lsls	r3, r3, #1
 800a92e:	fa02 f303 	lsl.w	r3, r2, r3
 800a932:	69ba      	ldr	r2, [r7, #24]
 800a934:	4313      	orrs	r3, r2
 800a936:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	69ba      	ldr	r2, [r7, #24]
 800a93c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	685b      	ldr	r3, [r3, #4]
 800a942:	f003 0303 	and.w	r3, r3, #3
 800a946:	2b02      	cmp	r3, #2
 800a948:	d123      	bne.n	800a992 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a94a:	69fb      	ldr	r3, [r7, #28]
 800a94c:	08da      	lsrs	r2, r3, #3
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	3208      	adds	r2, #8
 800a952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	f003 0307 	and.w	r3, r3, #7
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	220f      	movs	r2, #15
 800a962:	fa02 f303 	lsl.w	r3, r2, r3
 800a966:	43db      	mvns	r3, r3
 800a968:	69ba      	ldr	r2, [r7, #24]
 800a96a:	4013      	ands	r3, r2
 800a96c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	691a      	ldr	r2, [r3, #16]
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	f003 0307 	and.w	r3, r3, #7
 800a978:	009b      	lsls	r3, r3, #2
 800a97a:	fa02 f303 	lsl.w	r3, r2, r3
 800a97e:	69ba      	ldr	r2, [r7, #24]
 800a980:	4313      	orrs	r3, r2
 800a982:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a984:	69fb      	ldr	r3, [r7, #28]
 800a986:	08da      	lsrs	r2, r3, #3
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	3208      	adds	r2, #8
 800a98c:	69b9      	ldr	r1, [r7, #24]
 800a98e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a998:	69fb      	ldr	r3, [r7, #28]
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	2203      	movs	r2, #3
 800a99e:	fa02 f303 	lsl.w	r3, r2, r3
 800a9a2:	43db      	mvns	r3, r3
 800a9a4:	69ba      	ldr	r2, [r7, #24]
 800a9a6:	4013      	ands	r3, r2
 800a9a8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a9aa:	683b      	ldr	r3, [r7, #0]
 800a9ac:	685b      	ldr	r3, [r3, #4]
 800a9ae:	f003 0203 	and.w	r2, r3, #3
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	005b      	lsls	r3, r3, #1
 800a9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ba:	69ba      	ldr	r2, [r7, #24]
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	69ba      	ldr	r2, [r7, #24]
 800a9c4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a9c6:	683b      	ldr	r3, [r7, #0]
 800a9c8:	685b      	ldr	r3, [r3, #4]
 800a9ca:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f000 80e0 	beq.w	800ab94 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a9d4:	4b2f      	ldr	r3, [pc, #188]	; (800aa94 <HAL_GPIO_Init+0x238>)
 800a9d6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9da:	4a2e      	ldr	r2, [pc, #184]	; (800aa94 <HAL_GPIO_Init+0x238>)
 800a9dc:	f043 0302 	orr.w	r3, r3, #2
 800a9e0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a9e4:	4b2b      	ldr	r3, [pc, #172]	; (800aa94 <HAL_GPIO_Init+0x238>)
 800a9e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a9ea:	f003 0302 	and.w	r3, r3, #2
 800a9ee:	60fb      	str	r3, [r7, #12]
 800a9f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a9f2:	4a29      	ldr	r2, [pc, #164]	; (800aa98 <HAL_GPIO_Init+0x23c>)
 800a9f4:	69fb      	ldr	r3, [r7, #28]
 800a9f6:	089b      	lsrs	r3, r3, #2
 800a9f8:	3302      	adds	r3, #2
 800a9fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a9fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	f003 0303 	and.w	r3, r3, #3
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	220f      	movs	r2, #15
 800aa0a:	fa02 f303 	lsl.w	r3, r2, r3
 800aa0e:	43db      	mvns	r3, r3
 800aa10:	69ba      	ldr	r2, [r7, #24]
 800aa12:	4013      	ands	r3, r2
 800aa14:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	4a20      	ldr	r2, [pc, #128]	; (800aa9c <HAL_GPIO_Init+0x240>)
 800aa1a:	4293      	cmp	r3, r2
 800aa1c:	d052      	beq.n	800aac4 <HAL_GPIO_Init+0x268>
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	4a1f      	ldr	r2, [pc, #124]	; (800aaa0 <HAL_GPIO_Init+0x244>)
 800aa22:	4293      	cmp	r3, r2
 800aa24:	d031      	beq.n	800aa8a <HAL_GPIO_Init+0x22e>
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	4a1e      	ldr	r2, [pc, #120]	; (800aaa4 <HAL_GPIO_Init+0x248>)
 800aa2a:	4293      	cmp	r3, r2
 800aa2c:	d02b      	beq.n	800aa86 <HAL_GPIO_Init+0x22a>
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	4a1d      	ldr	r2, [pc, #116]	; (800aaa8 <HAL_GPIO_Init+0x24c>)
 800aa32:	4293      	cmp	r3, r2
 800aa34:	d025      	beq.n	800aa82 <HAL_GPIO_Init+0x226>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	4a1c      	ldr	r2, [pc, #112]	; (800aaac <HAL_GPIO_Init+0x250>)
 800aa3a:	4293      	cmp	r3, r2
 800aa3c:	d01f      	beq.n	800aa7e <HAL_GPIO_Init+0x222>
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	4a1b      	ldr	r2, [pc, #108]	; (800aab0 <HAL_GPIO_Init+0x254>)
 800aa42:	4293      	cmp	r3, r2
 800aa44:	d019      	beq.n	800aa7a <HAL_GPIO_Init+0x21e>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	4a1a      	ldr	r2, [pc, #104]	; (800aab4 <HAL_GPIO_Init+0x258>)
 800aa4a:	4293      	cmp	r3, r2
 800aa4c:	d013      	beq.n	800aa76 <HAL_GPIO_Init+0x21a>
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	4a19      	ldr	r2, [pc, #100]	; (800aab8 <HAL_GPIO_Init+0x25c>)
 800aa52:	4293      	cmp	r3, r2
 800aa54:	d00d      	beq.n	800aa72 <HAL_GPIO_Init+0x216>
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	4a18      	ldr	r2, [pc, #96]	; (800aabc <HAL_GPIO_Init+0x260>)
 800aa5a:	4293      	cmp	r3, r2
 800aa5c:	d007      	beq.n	800aa6e <HAL_GPIO_Init+0x212>
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	4a17      	ldr	r2, [pc, #92]	; (800aac0 <HAL_GPIO_Init+0x264>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d101      	bne.n	800aa6a <HAL_GPIO_Init+0x20e>
 800aa66:	2309      	movs	r3, #9
 800aa68:	e02d      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa6a:	230a      	movs	r3, #10
 800aa6c:	e02b      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa6e:	2308      	movs	r3, #8
 800aa70:	e029      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa72:	2307      	movs	r3, #7
 800aa74:	e027      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa76:	2306      	movs	r3, #6
 800aa78:	e025      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa7a:	2305      	movs	r3, #5
 800aa7c:	e023      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa7e:	2304      	movs	r3, #4
 800aa80:	e021      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa82:	2303      	movs	r3, #3
 800aa84:	e01f      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa86:	2302      	movs	r3, #2
 800aa88:	e01d      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	e01b      	b.n	800aac6 <HAL_GPIO_Init+0x26a>
 800aa8e:	bf00      	nop
 800aa90:	58000080 	.word	0x58000080
 800aa94:	58024400 	.word	0x58024400
 800aa98:	58000400 	.word	0x58000400
 800aa9c:	58020000 	.word	0x58020000
 800aaa0:	58020400 	.word	0x58020400
 800aaa4:	58020800 	.word	0x58020800
 800aaa8:	58020c00 	.word	0x58020c00
 800aaac:	58021000 	.word	0x58021000
 800aab0:	58021400 	.word	0x58021400
 800aab4:	58021800 	.word	0x58021800
 800aab8:	58021c00 	.word	0x58021c00
 800aabc:	58022000 	.word	0x58022000
 800aac0:	58022400 	.word	0x58022400
 800aac4:	2300      	movs	r3, #0
 800aac6:	69fa      	ldr	r2, [r7, #28]
 800aac8:	f002 0203 	and.w	r2, r2, #3
 800aacc:	0092      	lsls	r2, r2, #2
 800aace:	4093      	lsls	r3, r2
 800aad0:	69ba      	ldr	r2, [r7, #24]
 800aad2:	4313      	orrs	r3, r2
 800aad4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aad6:	4938      	ldr	r1, [pc, #224]	; (800abb8 <HAL_GPIO_Init+0x35c>)
 800aad8:	69fb      	ldr	r3, [r7, #28]
 800aada:	089b      	lsrs	r3, r3, #2
 800aadc:	3302      	adds	r3, #2
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	43db      	mvns	r3, r3
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	685b      	ldr	r3, [r3, #4]
 800aafa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d003      	beq.n	800ab0a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ab02:	69ba      	ldr	r2, [r7, #24]
 800ab04:	693b      	ldr	r3, [r7, #16]
 800ab06:	4313      	orrs	r3, r2
 800ab08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ab0a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab0e:	69bb      	ldr	r3, [r7, #24]
 800ab10:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ab12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800ab16:	685b      	ldr	r3, [r3, #4]
 800ab18:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab1a:	693b      	ldr	r3, [r7, #16]
 800ab1c:	43db      	mvns	r3, r3
 800ab1e:	69ba      	ldr	r2, [r7, #24]
 800ab20:	4013      	ands	r3, r2
 800ab22:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ab24:	683b      	ldr	r3, [r7, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d003      	beq.n	800ab38 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ab30:	69ba      	ldr	r2, [r7, #24]
 800ab32:	693b      	ldr	r3, [r7, #16]
 800ab34:	4313      	orrs	r3, r2
 800ab36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ab38:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800ab3c:	69bb      	ldr	r3, [r7, #24]
 800ab3e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ab40:	697b      	ldr	r3, [r7, #20]
 800ab42:	685b      	ldr	r3, [r3, #4]
 800ab44:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab46:	693b      	ldr	r3, [r7, #16]
 800ab48:	43db      	mvns	r3, r3
 800ab4a:	69ba      	ldr	r2, [r7, #24]
 800ab4c:	4013      	ands	r3, r2
 800ab4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	685b      	ldr	r3, [r3, #4]
 800ab54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d003      	beq.n	800ab64 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800ab5c:	69ba      	ldr	r2, [r7, #24]
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	4313      	orrs	r3, r2
 800ab62:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ab64:	697b      	ldr	r3, [r7, #20]
 800ab66:	69ba      	ldr	r2, [r7, #24]
 800ab68:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ab70:	693b      	ldr	r3, [r7, #16]
 800ab72:	43db      	mvns	r3, r3
 800ab74:	69ba      	ldr	r2, [r7, #24]
 800ab76:	4013      	ands	r3, r2
 800ab78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ab7a:	683b      	ldr	r3, [r7, #0]
 800ab7c:	685b      	ldr	r3, [r3, #4]
 800ab7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d003      	beq.n	800ab8e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800ab86:	69ba      	ldr	r2, [r7, #24]
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	4313      	orrs	r3, r2
 800ab8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	69ba      	ldr	r2, [r7, #24]
 800ab92:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800ab94:	69fb      	ldr	r3, [r7, #28]
 800ab96:	3301      	adds	r3, #1
 800ab98:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800ab9a:	683b      	ldr	r3, [r7, #0]
 800ab9c:	681a      	ldr	r2, [r3, #0]
 800ab9e:	69fb      	ldr	r3, [r7, #28]
 800aba0:	fa22 f303 	lsr.w	r3, r2, r3
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	f47f ae63 	bne.w	800a870 <HAL_GPIO_Init+0x14>
  }
}
 800abaa:	bf00      	nop
 800abac:	bf00      	nop
 800abae:	3724      	adds	r7, #36	; 0x24
 800abb0:	46bd      	mov	sp, r7
 800abb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb6:	4770      	bx	lr
 800abb8:	58000400 	.word	0x58000400

0800abbc <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800abbc:	b480      	push	{r7}
 800abbe:	b083      	sub	sp, #12
 800abc0:	af00      	add	r7, sp, #0
 800abc2:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800abc4:	4a08      	ldr	r2, [pc, #32]	; (800abe8 <HAL_HSEM_FastTake+0x2c>)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	3320      	adds	r3, #32
 800abca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800abce:	4a07      	ldr	r2, [pc, #28]	; (800abec <HAL_HSEM_FastTake+0x30>)
 800abd0:	4293      	cmp	r3, r2
 800abd2:	d101      	bne.n	800abd8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800abd4:	2300      	movs	r3, #0
 800abd6:	e000      	b.n	800abda <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800abd8:	2301      	movs	r3, #1
}
 800abda:	4618      	mov	r0, r3
 800abdc:	370c      	adds	r7, #12
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	58026400 	.word	0x58026400
 800abec:	80000300 	.word	0x80000300

0800abf0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800abf0:	b480      	push	{r7}
 800abf2:	b083      	sub	sp, #12
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
 800abf8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800abfa:	4906      	ldr	r1, [pc, #24]	; (800ac14 <HAL_HSEM_Release+0x24>)
 800abfc:	683b      	ldr	r3, [r7, #0]
 800abfe:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800ac08:	bf00      	nop
 800ac0a:	370c      	adds	r7, #12
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac12:	4770      	bx	lr
 800ac14:	58026400 	.word	0x58026400

0800ac18 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
 800ac1e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d101      	bne.n	800ac2a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
 800ac28:	e07f      	b.n	800ad2a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ac30:	b2db      	uxtb	r3, r3
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d106      	bne.n	800ac44 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2200      	movs	r2, #0
 800ac3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800ac3e:	6878      	ldr	r0, [r7, #4]
 800ac40:	f7fa fe82 	bl	8005948 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	2224      	movs	r2, #36	; 0x24
 800ac48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	681b      	ldr	r3, [r3, #0]
 800ac50:	681a      	ldr	r2, [r3, #0]
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f022 0201 	bic.w	r2, r2, #1
 800ac5a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	685a      	ldr	r2, [r3, #4]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800ac68:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	689a      	ldr	r2, [r3, #8]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800ac78:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	68db      	ldr	r3, [r3, #12]
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d107      	bne.n	800ac92 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	689a      	ldr	r2, [r3, #8]
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800ac8e:	609a      	str	r2, [r3, #8]
 800ac90:	e006      	b.n	800aca0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	689a      	ldr	r2, [r3, #8]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800ac9e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800aca0:	687b      	ldr	r3, [r7, #4]
 800aca2:	68db      	ldr	r3, [r3, #12]
 800aca4:	2b02      	cmp	r3, #2
 800aca6:	d104      	bne.n	800acb2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acb0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	6859      	ldr	r1, [r3, #4]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681a      	ldr	r2, [r3, #0]
 800acbc:	4b1d      	ldr	r3, [pc, #116]	; (800ad34 <HAL_I2C_Init+0x11c>)
 800acbe:	430b      	orrs	r3, r1
 800acc0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	68da      	ldr	r2, [r3, #12]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800acd0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	691a      	ldr	r2, [r3, #16]
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	430a      	orrs	r2, r1
 800acea:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	69d9      	ldr	r1, [r3, #28]
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	6a1a      	ldr	r2, [r3, #32]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	430a      	orrs	r2, r1
 800acfa:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	681a      	ldr	r2, [r3, #0]
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f042 0201 	orr.w	r2, r2, #1
 800ad0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	2200      	movs	r2, #0
 800ad10:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	2220      	movs	r2, #32
 800ad16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2200      	movs	r2, #0
 800ad1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2200      	movs	r2, #0
 800ad24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800ad28:	2300      	movs	r3, #0
}
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	3708      	adds	r7, #8
 800ad2e:	46bd      	mov	sp, r7
 800ad30:	bd80      	pop	{r7, pc}
 800ad32:	bf00      	nop
 800ad34:	02008000 	.word	0x02008000

0800ad38 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b088      	sub	sp, #32
 800ad3c:	af02      	add	r7, sp, #8
 800ad3e:	60f8      	str	r0, [r7, #12]
 800ad40:	607a      	str	r2, [r7, #4]
 800ad42:	461a      	mov	r2, r3
 800ad44:	460b      	mov	r3, r1
 800ad46:	817b      	strh	r3, [r7, #10]
 800ad48:	4613      	mov	r3, r2
 800ad4a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ad4c:	68fb      	ldr	r3, [r7, #12]
 800ad4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800ad52:	b2db      	uxtb	r3, r3
 800ad54:	2b20      	cmp	r3, #32
 800ad56:	f040 80da 	bne.w	800af0e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d101      	bne.n	800ad68 <HAL_I2C_Master_Transmit+0x30>
 800ad64:	2302      	movs	r3, #2
 800ad66:	e0d3      	b.n	800af10 <HAL_I2C_Master_Transmit+0x1d8>
 800ad68:	68fb      	ldr	r3, [r7, #12]
 800ad6a:	2201      	movs	r2, #1
 800ad6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800ad70:	f7fc f9b4 	bl	80070dc <HAL_GetTick>
 800ad74:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	9300      	str	r3, [sp, #0]
 800ad7a:	2319      	movs	r3, #25
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f000 fa00 	bl	800b188 <I2C_WaitOnFlagUntilTimeout>
 800ad88:	4603      	mov	r3, r0
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d001      	beq.n	800ad92 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800ad8e:	2301      	movs	r3, #1
 800ad90:	e0be      	b.n	800af10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	2221      	movs	r2, #33	; 0x21
 800ad96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	2210      	movs	r2, #16
 800ad9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	2200      	movs	r2, #0
 800ada6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	687a      	ldr	r2, [r7, #4]
 800adac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800adae:	68fb      	ldr	r3, [r7, #12]
 800adb0:	893a      	ldrh	r2, [r7, #8]
 800adb2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	2200      	movs	r2, #0
 800adb8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800adbe:	b29b      	uxth	r3, r3
 800adc0:	2bff      	cmp	r3, #255	; 0xff
 800adc2:	d90e      	bls.n	800ade2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800adc4:	68fb      	ldr	r3, [r7, #12]
 800adc6:	22ff      	movs	r2, #255	; 0xff
 800adc8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adce:	b2da      	uxtb	r2, r3
 800add0:	8979      	ldrh	r1, [r7, #10]
 800add2:	4b51      	ldr	r3, [pc, #324]	; (800af18 <HAL_I2C_Master_Transmit+0x1e0>)
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800adda:	68f8      	ldr	r0, [r7, #12]
 800addc:	f000 fbf6 	bl	800b5cc <I2C_TransferConfig>
 800ade0:	e06c      	b.n	800aebc <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800ade2:	68fb      	ldr	r3, [r7, #12]
 800ade4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ade6:	b29a      	uxth	r2, r3
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800adec:	68fb      	ldr	r3, [r7, #12]
 800adee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800adf0:	b2da      	uxtb	r2, r3
 800adf2:	8979      	ldrh	r1, [r7, #10]
 800adf4:	4b48      	ldr	r3, [pc, #288]	; (800af18 <HAL_I2C_Master_Transmit+0x1e0>)
 800adf6:	9300      	str	r3, [sp, #0]
 800adf8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800adfc:	68f8      	ldr	r0, [r7, #12]
 800adfe:	f000 fbe5 	bl	800b5cc <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800ae02:	e05b      	b.n	800aebc <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800ae04:	697a      	ldr	r2, [r7, #20]
 800ae06:	6a39      	ldr	r1, [r7, #32]
 800ae08:	68f8      	ldr	r0, [r7, #12]
 800ae0a:	f000 f9fd 	bl	800b208 <I2C_WaitOnTXISFlagUntilTimeout>
 800ae0e:	4603      	mov	r3, r0
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d001      	beq.n	800ae18 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800ae14:	2301      	movs	r3, #1
 800ae16:	e07b      	b.n	800af10 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae18:	68fb      	ldr	r3, [r7, #12]
 800ae1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae1c:	781a      	ldrb	r2, [r3, #0]
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	1c5a      	adds	r2, r3, #1
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800ae2e:	68fb      	ldr	r3, [r7, #12]
 800ae30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae32:	b29b      	uxth	r3, r3
 800ae34:	3b01      	subs	r3, #1
 800ae36:	b29a      	uxth	r2, r3
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae40:	3b01      	subs	r3, #1
 800ae42:	b29a      	uxth	r2, r3
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae4c:	b29b      	uxth	r3, r3
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d034      	beq.n	800aebc <HAL_I2C_Master_Transmit+0x184>
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d130      	bne.n	800aebc <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800ae5a:	697b      	ldr	r3, [r7, #20]
 800ae5c:	9300      	str	r3, [sp, #0]
 800ae5e:	6a3b      	ldr	r3, [r7, #32]
 800ae60:	2200      	movs	r2, #0
 800ae62:	2180      	movs	r1, #128	; 0x80
 800ae64:	68f8      	ldr	r0, [r7, #12]
 800ae66:	f000 f98f 	bl	800b188 <I2C_WaitOnFlagUntilTimeout>
 800ae6a:	4603      	mov	r3, r0
 800ae6c:	2b00      	cmp	r3, #0
 800ae6e:	d001      	beq.n	800ae74 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800ae70:	2301      	movs	r3, #1
 800ae72:	e04d      	b.n	800af10 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae78:	b29b      	uxth	r3, r3
 800ae7a:	2bff      	cmp	r3, #255	; 0xff
 800ae7c:	d90e      	bls.n	800ae9c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	22ff      	movs	r2, #255	; 0xff
 800ae82:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800ae88:	b2da      	uxtb	r2, r3
 800ae8a:	8979      	ldrh	r1, [r7, #10]
 800ae8c:	2300      	movs	r3, #0
 800ae8e:	9300      	str	r3, [sp, #0]
 800ae90:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800ae94:	68f8      	ldr	r0, [r7, #12]
 800ae96:	f000 fb99 	bl	800b5cc <I2C_TransferConfig>
 800ae9a:	e00f      	b.n	800aebc <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aea0:	b29a      	uxth	r2, r3
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800aeaa:	b2da      	uxtb	r2, r3
 800aeac:	8979      	ldrh	r1, [r7, #10]
 800aeae:	2300      	movs	r3, #0
 800aeb0:	9300      	str	r3, [sp, #0]
 800aeb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800aeb6:	68f8      	ldr	r0, [r7, #12]
 800aeb8:	f000 fb88 	bl	800b5cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aec0:	b29b      	uxth	r3, r3
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	d19e      	bne.n	800ae04 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800aec6:	697a      	ldr	r2, [r7, #20]
 800aec8:	6a39      	ldr	r1, [r7, #32]
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f000 f9dc 	bl	800b288 <I2C_WaitOnSTOPFlagUntilTimeout>
 800aed0:	4603      	mov	r3, r0
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d001      	beq.n	800aeda <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800aed6:	2301      	movs	r3, #1
 800aed8:	e01a      	b.n	800af10 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	2220      	movs	r2, #32
 800aee0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800aee2:	68fb      	ldr	r3, [r7, #12]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	6859      	ldr	r1, [r3, #4]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681a      	ldr	r2, [r3, #0]
 800aeec:	4b0b      	ldr	r3, [pc, #44]	; (800af1c <HAL_I2C_Master_Transmit+0x1e4>)
 800aeee:	400b      	ands	r3, r1
 800aef0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800aef2:	68fb      	ldr	r3, [r7, #12]
 800aef4:	2220      	movs	r2, #32
 800aef6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	2200      	movs	r2, #0
 800aefe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	2200      	movs	r2, #0
 800af06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800af0a:	2300      	movs	r3, #0
 800af0c:	e000      	b.n	800af10 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800af0e:	2302      	movs	r3, #2
  }
}
 800af10:	4618      	mov	r0, r3
 800af12:	3718      	adds	r7, #24
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	80002000 	.word	0x80002000
 800af1c:	fe00e800 	.word	0xfe00e800

0800af20 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800af20:	b580      	push	{r7, lr}
 800af22:	b088      	sub	sp, #32
 800af24:	af02      	add	r7, sp, #8
 800af26:	60f8      	str	r0, [r7, #12]
 800af28:	607a      	str	r2, [r7, #4]
 800af2a:	461a      	mov	r2, r3
 800af2c:	460b      	mov	r3, r1
 800af2e:	817b      	strh	r3, [r7, #10]
 800af30:	4613      	mov	r3, r2
 800af32:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2b20      	cmp	r3, #32
 800af3e:	f040 80db 	bne.w	800b0f8 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d101      	bne.n	800af50 <HAL_I2C_Master_Receive+0x30>
 800af4c:	2302      	movs	r3, #2
 800af4e:	e0d4      	b.n	800b0fa <HAL_I2C_Master_Receive+0x1da>
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	2201      	movs	r2, #1
 800af54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800af58:	f7fc f8c0 	bl	80070dc <HAL_GetTick>
 800af5c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800af5e:	697b      	ldr	r3, [r7, #20]
 800af60:	9300      	str	r3, [sp, #0]
 800af62:	2319      	movs	r3, #25
 800af64:	2201      	movs	r2, #1
 800af66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f000 f90c 	bl	800b188 <I2C_WaitOnFlagUntilTimeout>
 800af70:	4603      	mov	r3, r0
 800af72:	2b00      	cmp	r3, #0
 800af74:	d001      	beq.n	800af7a <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800af76:	2301      	movs	r3, #1
 800af78:	e0bf      	b.n	800b0fa <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	2222      	movs	r2, #34	; 0x22
 800af7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800af82:	68fb      	ldr	r3, [r7, #12]
 800af84:	2210      	movs	r2, #16
 800af86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	2200      	movs	r2, #0
 800af8e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	687a      	ldr	r2, [r7, #4]
 800af94:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	893a      	ldrh	r2, [r7, #8]
 800af9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	2200      	movs	r2, #0
 800afa0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800afa2:	68fb      	ldr	r3, [r7, #12]
 800afa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	2bff      	cmp	r3, #255	; 0xff
 800afaa:	d90e      	bls.n	800afca <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800afac:	68fb      	ldr	r3, [r7, #12]
 800afae:	22ff      	movs	r2, #255	; 0xff
 800afb0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afb6:	b2da      	uxtb	r2, r3
 800afb8:	8979      	ldrh	r1, [r7, #10]
 800afba:	4b52      	ldr	r3, [pc, #328]	; (800b104 <HAL_I2C_Master_Receive+0x1e4>)
 800afbc:	9300      	str	r3, [sp, #0]
 800afbe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800afc2:	68f8      	ldr	r0, [r7, #12]
 800afc4:	f000 fb02 	bl	800b5cc <I2C_TransferConfig>
 800afc8:	e06d      	b.n	800b0a6 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800afca:	68fb      	ldr	r3, [r7, #12]
 800afcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800afce:	b29a      	uxth	r2, r3
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	8979      	ldrh	r1, [r7, #10]
 800afdc:	4b49      	ldr	r3, [pc, #292]	; (800b104 <HAL_I2C_Master_Receive+0x1e4>)
 800afde:	9300      	str	r3, [sp, #0]
 800afe0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800afe4:	68f8      	ldr	r0, [r7, #12]
 800afe6:	f000 faf1 	bl	800b5cc <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800afea:	e05c      	b.n	800b0a6 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800afec:	697a      	ldr	r2, [r7, #20]
 800afee:	6a39      	ldr	r1, [r7, #32]
 800aff0:	68f8      	ldr	r0, [r7, #12]
 800aff2:	f000 f985 	bl	800b300 <I2C_WaitOnRXNEFlagUntilTimeout>
 800aff6:	4603      	mov	r3, r0
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d001      	beq.n	800b000 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 800affc:	2301      	movs	r3, #1
 800affe:	e07c      	b.n	800b0fa <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b006:	68fb      	ldr	r3, [r7, #12]
 800b008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b00a:	b2d2      	uxtb	r2, r2
 800b00c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b012:	1c5a      	adds	r2, r3, #1
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b01c:	3b01      	subs	r3, #1
 800b01e:	b29a      	uxth	r2, r3
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b028:	b29b      	uxth	r3, r3
 800b02a:	3b01      	subs	r3, #1
 800b02c:	b29a      	uxth	r2, r3
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b036:	b29b      	uxth	r3, r3
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d034      	beq.n	800b0a6 <HAL_I2C_Master_Receive+0x186>
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b040:	2b00      	cmp	r3, #0
 800b042:	d130      	bne.n	800b0a6 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b044:	697b      	ldr	r3, [r7, #20]
 800b046:	9300      	str	r3, [sp, #0]
 800b048:	6a3b      	ldr	r3, [r7, #32]
 800b04a:	2200      	movs	r2, #0
 800b04c:	2180      	movs	r1, #128	; 0x80
 800b04e:	68f8      	ldr	r0, [r7, #12]
 800b050:	f000 f89a 	bl	800b188 <I2C_WaitOnFlagUntilTimeout>
 800b054:	4603      	mov	r3, r0
 800b056:	2b00      	cmp	r3, #0
 800b058:	d001      	beq.n	800b05e <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800b05a:	2301      	movs	r3, #1
 800b05c:	e04d      	b.n	800b0fa <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b062:	b29b      	uxth	r3, r3
 800b064:	2bff      	cmp	r3, #255	; 0xff
 800b066:	d90e      	bls.n	800b086 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b068:	68fb      	ldr	r3, [r7, #12]
 800b06a:	22ff      	movs	r2, #255	; 0xff
 800b06c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b072:	b2da      	uxtb	r2, r3
 800b074:	8979      	ldrh	r1, [r7, #10]
 800b076:	2300      	movs	r3, #0
 800b078:	9300      	str	r3, [sp, #0]
 800b07a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f000 faa4 	bl	800b5cc <I2C_TransferConfig>
 800b084:	e00f      	b.n	800b0a6 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b08a:	b29a      	uxth	r2, r3
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b094:	b2da      	uxtb	r2, r3
 800b096:	8979      	ldrh	r1, [r7, #10]
 800b098:	2300      	movs	r3, #0
 800b09a:	9300      	str	r3, [sp, #0]
 800b09c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800b0a0:	68f8      	ldr	r0, [r7, #12]
 800b0a2:	f000 fa93 	bl	800b5cc <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d19d      	bne.n	800afec <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b0b0:	697a      	ldr	r2, [r7, #20]
 800b0b2:	6a39      	ldr	r1, [r7, #32]
 800b0b4:	68f8      	ldr	r0, [r7, #12]
 800b0b6:	f000 f8e7 	bl	800b288 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d001      	beq.n	800b0c4 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800b0c0:	2301      	movs	r3, #1
 800b0c2:	e01a      	b.n	800b0fa <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	2220      	movs	r2, #32
 800b0ca:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6859      	ldr	r1, [r3, #4]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	4b0c      	ldr	r3, [pc, #48]	; (800b108 <HAL_I2C_Master_Receive+0x1e8>)
 800b0d8:	400b      	ands	r3, r1
 800b0da:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b0dc:	68fb      	ldr	r3, [r7, #12]
 800b0de:	2220      	movs	r2, #32
 800b0e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b0e4:	68fb      	ldr	r3, [r7, #12]
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b0ec:	68fb      	ldr	r3, [r7, #12]
 800b0ee:	2200      	movs	r2, #0
 800b0f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b0f4:	2300      	movs	r3, #0
 800b0f6:	e000      	b.n	800b0fa <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800b0f8:	2302      	movs	r3, #2
  }
}
 800b0fa:	4618      	mov	r0, r3
 800b0fc:	3718      	adds	r7, #24
 800b0fe:	46bd      	mov	sp, r7
 800b100:	bd80      	pop	{r7, pc}
 800b102:	bf00      	nop
 800b104:	80002400 	.word	0x80002400
 800b108:	fe00e800 	.word	0xfe00e800

0800b10c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 800b10c:	b480      	push	{r7}
 800b10e:	b083      	sub	sp, #12
 800b110:	af00      	add	r7, sp, #0
 800b112:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b11a:	b2db      	uxtb	r3, r3
}
 800b11c:	4618      	mov	r0, r3
 800b11e:	370c      	adds	r7, #12
 800b120:	46bd      	mov	sp, r7
 800b122:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b126:	4770      	bx	lr

0800b128 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(I2C_HandleTypeDef *hi2c)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
}
 800b134:	4618      	mov	r0, r3
 800b136:	370c      	adds	r7, #12
 800b138:	46bd      	mov	sp, r7
 800b13a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b13e:	4770      	bx	lr

0800b140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b140:	b480      	push	{r7}
 800b142:	b083      	sub	sp, #12
 800b144:	af00      	add	r7, sp, #0
 800b146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	699b      	ldr	r3, [r3, #24]
 800b14e:	f003 0302 	and.w	r3, r3, #2
 800b152:	2b02      	cmp	r3, #2
 800b154:	d103      	bne.n	800b15e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	2200      	movs	r2, #0
 800b15c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	699b      	ldr	r3, [r3, #24]
 800b164:	f003 0301 	and.w	r3, r3, #1
 800b168:	2b01      	cmp	r3, #1
 800b16a:	d007      	beq.n	800b17c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	699a      	ldr	r2, [r3, #24]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	f042 0201 	orr.w	r2, r2, #1
 800b17a:	619a      	str	r2, [r3, #24]
  }
}
 800b17c:	bf00      	nop
 800b17e:	370c      	adds	r7, #12
 800b180:	46bd      	mov	sp, r7
 800b182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b186:	4770      	bx	lr

0800b188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b188:	b580      	push	{r7, lr}
 800b18a:	b084      	sub	sp, #16
 800b18c:	af00      	add	r7, sp, #0
 800b18e:	60f8      	str	r0, [r7, #12]
 800b190:	60b9      	str	r1, [r7, #8]
 800b192:	603b      	str	r3, [r7, #0]
 800b194:	4613      	mov	r3, r2
 800b196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b198:	e022      	b.n	800b1e0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b19a:	683b      	ldr	r3, [r7, #0]
 800b19c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b1a0:	d01e      	beq.n	800b1e0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b1a2:	f7fb ff9b 	bl	80070dc <HAL_GetTick>
 800b1a6:	4602      	mov	r2, r0
 800b1a8:	69bb      	ldr	r3, [r7, #24]
 800b1aa:	1ad3      	subs	r3, r2, r3
 800b1ac:	683a      	ldr	r2, [r7, #0]
 800b1ae:	429a      	cmp	r2, r3
 800b1b0:	d302      	bcc.n	800b1b8 <I2C_WaitOnFlagUntilTimeout+0x30>
 800b1b2:	683b      	ldr	r3, [r7, #0]
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	d113      	bne.n	800b1e0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b1bc:	f043 0220 	orr.w	r2, r3, #32
 800b1c0:	68fb      	ldr	r3, [r7, #12]
 800b1c2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	2220      	movs	r2, #32
 800b1c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	2200      	movs	r2, #0
 800b1d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800b1dc:	2301      	movs	r3, #1
 800b1de:	e00f      	b.n	800b200 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b1e0:	68fb      	ldr	r3, [r7, #12]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	699a      	ldr	r2, [r3, #24]
 800b1e6:	68bb      	ldr	r3, [r7, #8]
 800b1e8:	4013      	ands	r3, r2
 800b1ea:	68ba      	ldr	r2, [r7, #8]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	bf0c      	ite	eq
 800b1f0:	2301      	moveq	r3, #1
 800b1f2:	2300      	movne	r3, #0
 800b1f4:	b2db      	uxtb	r3, r3
 800b1f6:	461a      	mov	r2, r3
 800b1f8:	79fb      	ldrb	r3, [r7, #7]
 800b1fa:	429a      	cmp	r2, r3
 800b1fc:	d0cd      	beq.n	800b19a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b1fe:	2300      	movs	r3, #0
}
 800b200:	4618      	mov	r0, r3
 800b202:	3710      	adds	r7, #16
 800b204:	46bd      	mov	sp, r7
 800b206:	bd80      	pop	{r7, pc}

0800b208 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b208:	b580      	push	{r7, lr}
 800b20a:	b084      	sub	sp, #16
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	60f8      	str	r0, [r7, #12]
 800b210:	60b9      	str	r1, [r7, #8]
 800b212:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b214:	e02c      	b.n	800b270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b216:	687a      	ldr	r2, [r7, #4]
 800b218:	68b9      	ldr	r1, [r7, #8]
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 f8ea 	bl	800b3f4 <I2C_IsErrorOccurred>
 800b220:	4603      	mov	r3, r0
 800b222:	2b00      	cmp	r3, #0
 800b224:	d001      	beq.n	800b22a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b226:	2301      	movs	r3, #1
 800b228:	e02a      	b.n	800b280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b230:	d01e      	beq.n	800b270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b232:	f7fb ff53 	bl	80070dc <HAL_GetTick>
 800b236:	4602      	mov	r2, r0
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	1ad3      	subs	r3, r2, r3
 800b23c:	68ba      	ldr	r2, [r7, #8]
 800b23e:	429a      	cmp	r2, r3
 800b240:	d302      	bcc.n	800b248 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	2b00      	cmp	r3, #0
 800b246:	d113      	bne.n	800b270 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b24c:	f043 0220 	orr.w	r2, r3, #32
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2220      	movs	r2, #32
 800b258:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b25c:	68fb      	ldr	r3, [r7, #12]
 800b25e:	2200      	movs	r2, #0
 800b260:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	2200      	movs	r2, #0
 800b268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b26c:	2301      	movs	r3, #1
 800b26e:	e007      	b.n	800b280 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	681b      	ldr	r3, [r3, #0]
 800b274:	699b      	ldr	r3, [r3, #24]
 800b276:	f003 0302 	and.w	r3, r3, #2
 800b27a:	2b02      	cmp	r3, #2
 800b27c:	d1cb      	bne.n	800b216 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b27e:	2300      	movs	r3, #0
}
 800b280:	4618      	mov	r0, r3
 800b282:	3710      	adds	r7, #16
 800b284:	46bd      	mov	sp, r7
 800b286:	bd80      	pop	{r7, pc}

0800b288 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	60f8      	str	r0, [r7, #12]
 800b290:	60b9      	str	r1, [r7, #8]
 800b292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b294:	e028      	b.n	800b2e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b296:	687a      	ldr	r2, [r7, #4]
 800b298:	68b9      	ldr	r1, [r7, #8]
 800b29a:	68f8      	ldr	r0, [r7, #12]
 800b29c:	f000 f8aa 	bl	800b3f4 <I2C_IsErrorOccurred>
 800b2a0:	4603      	mov	r3, r0
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d001      	beq.n	800b2aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b2a6:	2301      	movs	r3, #1
 800b2a8:	e026      	b.n	800b2f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b2aa:	f7fb ff17 	bl	80070dc <HAL_GetTick>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	1ad3      	subs	r3, r2, r3
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	429a      	cmp	r2, r3
 800b2b8:	d302      	bcc.n	800b2c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b2ba:	68bb      	ldr	r3, [r7, #8]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d113      	bne.n	800b2e8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2c4:	f043 0220 	orr.w	r2, r3, #32
 800b2c8:	68fb      	ldr	r3, [r7, #12]
 800b2ca:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b2cc:	68fb      	ldr	r3, [r7, #12]
 800b2ce:	2220      	movs	r2, #32
 800b2d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b2d4:	68fb      	ldr	r3, [r7, #12]
 800b2d6:	2200      	movs	r2, #0
 800b2d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b2dc:	68fb      	ldr	r3, [r7, #12]
 800b2de:	2200      	movs	r2, #0
 800b2e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	e007      	b.n	800b2f8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	f003 0320 	and.w	r3, r3, #32
 800b2f2:	2b20      	cmp	r3, #32
 800b2f4:	d1cf      	bne.n	800b296 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b2f6:	2300      	movs	r3, #0
}
 800b2f8:	4618      	mov	r0, r3
 800b2fa:	3710      	adds	r7, #16
 800b2fc:	46bd      	mov	sp, r7
 800b2fe:	bd80      	pop	{r7, pc}

0800b300 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b300:	b580      	push	{r7, lr}
 800b302:	b084      	sub	sp, #16
 800b304:	af00      	add	r7, sp, #0
 800b306:	60f8      	str	r0, [r7, #12]
 800b308:	60b9      	str	r1, [r7, #8]
 800b30a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b30c:	e064      	b.n	800b3d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b30e:	687a      	ldr	r2, [r7, #4]
 800b310:	68b9      	ldr	r1, [r7, #8]
 800b312:	68f8      	ldr	r0, [r7, #12]
 800b314:	f000 f86e 	bl	800b3f4 <I2C_IsErrorOccurred>
 800b318:	4603      	mov	r3, r0
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	d001      	beq.n	800b322 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b31e:	2301      	movs	r3, #1
 800b320:	e062      	b.n	800b3e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	699b      	ldr	r3, [r3, #24]
 800b328:	f003 0320 	and.w	r3, r3, #32
 800b32c:	2b20      	cmp	r3, #32
 800b32e:	d138      	bne.n	800b3a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	699b      	ldr	r3, [r3, #24]
 800b336:	f003 0304 	and.w	r3, r3, #4
 800b33a:	2b04      	cmp	r3, #4
 800b33c:	d105      	bne.n	800b34a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800b342:	2b00      	cmp	r3, #0
 800b344:	d001      	beq.n	800b34a <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800b346:	2300      	movs	r3, #0
 800b348:	e04e      	b.n	800b3e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b34a:	68fb      	ldr	r3, [r7, #12]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	699b      	ldr	r3, [r3, #24]
 800b350:	f003 0310 	and.w	r3, r3, #16
 800b354:	2b10      	cmp	r3, #16
 800b356:	d107      	bne.n	800b368 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b358:	68fb      	ldr	r3, [r7, #12]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	2210      	movs	r2, #16
 800b35e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2204      	movs	r2, #4
 800b364:	645a      	str	r2, [r3, #68]	; 0x44
 800b366:	e002      	b.n	800b36e <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	2220      	movs	r2, #32
 800b374:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6859      	ldr	r1, [r3, #4]
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	681a      	ldr	r2, [r3, #0]
 800b380:	4b1b      	ldr	r3, [pc, #108]	; (800b3f0 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800b382:	400b      	ands	r3, r1
 800b384:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2220      	movs	r2, #32
 800b38a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	2200      	movs	r2, #0
 800b392:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	2200      	movs	r2, #0
 800b39a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800b39e:	2301      	movs	r3, #1
 800b3a0:	e022      	b.n	800b3e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b3a2:	f7fb fe9b 	bl	80070dc <HAL_GetTick>
 800b3a6:	4602      	mov	r2, r0
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	1ad3      	subs	r3, r2, r3
 800b3ac:	68ba      	ldr	r2, [r7, #8]
 800b3ae:	429a      	cmp	r2, r3
 800b3b0:	d302      	bcc.n	800b3b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800b3b2:	68bb      	ldr	r3, [r7, #8]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10f      	bne.n	800b3d8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b3bc:	f043 0220 	orr.w	r2, r3, #32
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	2220      	movs	r2, #32
 800b3c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	2200      	movs	r2, #0
 800b3d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800b3d4:	2301      	movs	r3, #1
 800b3d6:	e007      	b.n	800b3e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800b3d8:	68fb      	ldr	r3, [r7, #12]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	699b      	ldr	r3, [r3, #24]
 800b3de:	f003 0304 	and.w	r3, r3, #4
 800b3e2:	2b04      	cmp	r3, #4
 800b3e4:	d193      	bne.n	800b30e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800b3e6:	2300      	movs	r3, #0
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3710      	adds	r7, #16
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}
 800b3f0:	fe00e800 	.word	0xfe00e800

0800b3f4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b08a      	sub	sp, #40	; 0x28
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	60b9      	str	r1, [r7, #8]
 800b3fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b400:	2300      	movs	r3, #0
 800b402:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	699b      	ldr	r3, [r3, #24]
 800b40c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b40e:	2300      	movs	r3, #0
 800b410:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b416:	69bb      	ldr	r3, [r7, #24]
 800b418:	f003 0310 	and.w	r3, r3, #16
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d075      	beq.n	800b50c <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	2210      	movs	r2, #16
 800b426:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b428:	e056      	b.n	800b4d8 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b42a:	68bb      	ldr	r3, [r7, #8]
 800b42c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b430:	d052      	beq.n	800b4d8 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b432:	f7fb fe53 	bl	80070dc <HAL_GetTick>
 800b436:	4602      	mov	r2, r0
 800b438:	69fb      	ldr	r3, [r7, #28]
 800b43a:	1ad3      	subs	r3, r2, r3
 800b43c:	68ba      	ldr	r2, [r7, #8]
 800b43e:	429a      	cmp	r2, r3
 800b440:	d302      	bcc.n	800b448 <I2C_IsErrorOccurred+0x54>
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d147      	bne.n	800b4d8 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	685b      	ldr	r3, [r3, #4]
 800b44e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b452:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b454:	68fb      	ldr	r3, [r7, #12]
 800b456:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800b45a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	699b      	ldr	r3, [r3, #24]
 800b462:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b466:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b46a:	d12e      	bne.n	800b4ca <I2C_IsErrorOccurred+0xd6>
 800b46c:	697b      	ldr	r3, [r7, #20]
 800b46e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b472:	d02a      	beq.n	800b4ca <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 800b474:	7cfb      	ldrb	r3, [r7, #19]
 800b476:	2b20      	cmp	r3, #32
 800b478:	d027      	beq.n	800b4ca <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	685a      	ldr	r2, [r3, #4]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	681b      	ldr	r3, [r3, #0]
 800b484:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b488:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b48a:	f7fb fe27 	bl	80070dc <HAL_GetTick>
 800b48e:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b490:	e01b      	b.n	800b4ca <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b492:	f7fb fe23 	bl	80070dc <HAL_GetTick>
 800b496:	4602      	mov	r2, r0
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	1ad3      	subs	r3, r2, r3
 800b49c:	2b19      	cmp	r3, #25
 800b49e:	d914      	bls.n	800b4ca <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b4a0:	68fb      	ldr	r3, [r7, #12]
 800b4a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b4a4:	f043 0220 	orr.w	r2, r3, #32
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	2220      	movs	r2, #32
 800b4b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2200      	movs	r2, #0
 800b4b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	699b      	ldr	r3, [r3, #24]
 800b4d0:	f003 0320 	and.w	r3, r3, #32
 800b4d4:	2b20      	cmp	r3, #32
 800b4d6:	d1dc      	bne.n	800b492 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b4d8:	68fb      	ldr	r3, [r7, #12]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	699b      	ldr	r3, [r3, #24]
 800b4de:	f003 0320 	and.w	r3, r3, #32
 800b4e2:	2b20      	cmp	r3, #32
 800b4e4:	d003      	beq.n	800b4ee <I2C_IsErrorOccurred+0xfa>
 800b4e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	d09d      	beq.n	800b42a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b4ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d103      	bne.n	800b4fe <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2220      	movs	r2, #32
 800b4fc:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b4fe:	6a3b      	ldr	r3, [r7, #32]
 800b500:	f043 0304 	orr.w	r3, r3, #4
 800b504:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b506:	2301      	movs	r3, #1
 800b508:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	699b      	ldr	r3, [r3, #24]
 800b512:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800b514:	69bb      	ldr	r3, [r7, #24]
 800b516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b51a:	2b00      	cmp	r3, #0
 800b51c:	d00b      	beq.n	800b536 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800b51e:	6a3b      	ldr	r3, [r7, #32]
 800b520:	f043 0301 	orr.w	r3, r3, #1
 800b524:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b52e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b530:	2301      	movs	r3, #1
 800b532:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800b536:	69bb      	ldr	r3, [r7, #24]
 800b538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800b53c:	2b00      	cmp	r3, #0
 800b53e:	d00b      	beq.n	800b558 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800b540:	6a3b      	ldr	r3, [r7, #32]
 800b542:	f043 0308 	orr.w	r3, r3, #8
 800b546:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800b550:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b552:	2301      	movs	r3, #1
 800b554:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800b558:	69bb      	ldr	r3, [r7, #24]
 800b55a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b55e:	2b00      	cmp	r3, #0
 800b560:	d00b      	beq.n	800b57a <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800b562:	6a3b      	ldr	r3, [r7, #32]
 800b564:	f043 0302 	orr.w	r3, r3, #2
 800b568:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	681b      	ldr	r3, [r3, #0]
 800b56e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b572:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800b574:	2301      	movs	r3, #1
 800b576:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800b57a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d01c      	beq.n	800b5bc <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b582:	68f8      	ldr	r0, [r7, #12]
 800b584:	f7ff fddc 	bl	800b140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	6859      	ldr	r1, [r3, #4]
 800b58e:	68fb      	ldr	r3, [r7, #12]
 800b590:	681a      	ldr	r2, [r3, #0]
 800b592:	4b0d      	ldr	r3, [pc, #52]	; (800b5c8 <I2C_IsErrorOccurred+0x1d4>)
 800b594:	400b      	ands	r3, r1
 800b596:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	431a      	orrs	r2, r3
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2220      	movs	r2, #32
 800b5a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800b5ac:	68fb      	ldr	r3, [r7, #12]
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 800b5bc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800b5c0:	4618      	mov	r0, r3
 800b5c2:	3728      	adds	r7, #40	; 0x28
 800b5c4:	46bd      	mov	sp, r7
 800b5c6:	bd80      	pop	{r7, pc}
 800b5c8:	fe00e800 	.word	0xfe00e800

0800b5cc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b5cc:	b480      	push	{r7}
 800b5ce:	b087      	sub	sp, #28
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	60f8      	str	r0, [r7, #12]
 800b5d4:	607b      	str	r3, [r7, #4]
 800b5d6:	460b      	mov	r3, r1
 800b5d8:	817b      	strh	r3, [r7, #10]
 800b5da:	4613      	mov	r3, r2
 800b5dc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b5de:	897b      	ldrh	r3, [r7, #10]
 800b5e0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b5e4:	7a7b      	ldrb	r3, [r7, #9]
 800b5e6:	041b      	lsls	r3, r3, #16
 800b5e8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b5ec:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b5f2:	6a3b      	ldr	r3, [r7, #32]
 800b5f4:	4313      	orrs	r3, r2
 800b5f6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5fa:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	685a      	ldr	r2, [r3, #4]
 800b602:	6a3b      	ldr	r3, [r7, #32]
 800b604:	0d5b      	lsrs	r3, r3, #21
 800b606:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800b60a:	4b08      	ldr	r3, [pc, #32]	; (800b62c <I2C_TransferConfig+0x60>)
 800b60c:	430b      	orrs	r3, r1
 800b60e:	43db      	mvns	r3, r3
 800b610:	ea02 0103 	and.w	r1, r2, r3
 800b614:	68fb      	ldr	r3, [r7, #12]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	697a      	ldr	r2, [r7, #20]
 800b61a:	430a      	orrs	r2, r1
 800b61c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b61e:	bf00      	nop
 800b620:	371c      	adds	r7, #28
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr
 800b62a:	bf00      	nop
 800b62c:	03ff63ff 	.word	0x03ff63ff

0800b630 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b630:	b480      	push	{r7}
 800b632:	b083      	sub	sp, #12
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
 800b638:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b640:	b2db      	uxtb	r3, r3
 800b642:	2b20      	cmp	r3, #32
 800b644:	d138      	bne.n	800b6b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b64c:	2b01      	cmp	r3, #1
 800b64e:	d101      	bne.n	800b654 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b650:	2302      	movs	r3, #2
 800b652:	e032      	b.n	800b6ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2201      	movs	r2, #1
 800b658:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2224      	movs	r2, #36	; 0x24
 800b660:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	681a      	ldr	r2, [r3, #0]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 0201 	bic.w	r2, r2, #1
 800b672:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800b682:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	6819      	ldr	r1, [r3, #0]
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	683a      	ldr	r2, [r7, #0]
 800b690:	430a      	orrs	r2, r1
 800b692:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	681a      	ldr	r2, [r3, #0]
 800b69a:	687b      	ldr	r3, [r7, #4]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	f042 0201 	orr.w	r2, r2, #1
 800b6a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2220      	movs	r2, #32
 800b6a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2200      	movs	r2, #0
 800b6b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b6b4:	2300      	movs	r3, #0
 800b6b6:	e000      	b.n	800b6ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b6b8:	2302      	movs	r3, #2
  }
}
 800b6ba:	4618      	mov	r0, r3
 800b6bc:	370c      	adds	r7, #12
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6c4:	4770      	bx	lr

0800b6c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b6c6:	b480      	push	{r7}
 800b6c8:	b085      	sub	sp, #20
 800b6ca:	af00      	add	r7, sp, #0
 800b6cc:	6078      	str	r0, [r7, #4]
 800b6ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800b6d6:	b2db      	uxtb	r3, r3
 800b6d8:	2b20      	cmp	r3, #32
 800b6da:	d139      	bne.n	800b750 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800b6e2:	2b01      	cmp	r3, #1
 800b6e4:	d101      	bne.n	800b6ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b6e6:	2302      	movs	r3, #2
 800b6e8:	e033      	b.n	800b752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	2201      	movs	r2, #1
 800b6ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	2224      	movs	r2, #36	; 0x24
 800b6f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	681a      	ldr	r2, [r3, #0]
 800b700:	687b      	ldr	r3, [r7, #4]
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	f022 0201 	bic.w	r2, r2, #1
 800b708:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800b718:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b71a:	683b      	ldr	r3, [r7, #0]
 800b71c:	021b      	lsls	r3, r3, #8
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	4313      	orrs	r3, r2
 800b722:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	681b      	ldr	r3, [r3, #0]
 800b728:	68fa      	ldr	r2, [r7, #12]
 800b72a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	681b      	ldr	r3, [r3, #0]
 800b730:	681a      	ldr	r2, [r3, #0]
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	f042 0201 	orr.w	r2, r2, #1
 800b73a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	2220      	movs	r2, #32
 800b740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800b74c:	2300      	movs	r3, #0
 800b74e:	e000      	b.n	800b752 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b750:	2302      	movs	r3, #2
  }
}
 800b752:	4618      	mov	r0, r3
 800b754:	3714      	adds	r7, #20
 800b756:	46bd      	mov	sp, r7
 800b758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b75c:	4770      	bx	lr

0800b75e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b75e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b760:	b08f      	sub	sp, #60	; 0x3c
 800b762:	af0a      	add	r7, sp, #40	; 0x28
 800b764:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2b00      	cmp	r3, #0
 800b76a:	d101      	bne.n	800b770 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b76c:	2301      	movs	r3, #1
 800b76e:	e116      	b.n	800b99e <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800b77c:	b2db      	uxtb	r3, r3
 800b77e:	2b00      	cmp	r3, #0
 800b780:	d106      	bne.n	800b790 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2200      	movs	r2, #0
 800b786:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b78a:	6878      	ldr	r0, [r7, #4]
 800b78c:	f7fb fb6c 	bl	8006e68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2203      	movs	r2, #3
 800b794:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b79c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d102      	bne.n	800b7aa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4618      	mov	r0, r3
 800b7b0:	f005 f9d8 	bl	8010b64 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	603b      	str	r3, [r7, #0]
 800b7ba:	687e      	ldr	r6, [r7, #4]
 800b7bc:	466d      	mov	r5, sp
 800b7be:	f106 0410 	add.w	r4, r6, #16
 800b7c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b7c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b7c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b7ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b7ce:	e885 0003 	stmia.w	r5, {r0, r1}
 800b7d2:	1d33      	adds	r3, r6, #4
 800b7d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b7d6:	6838      	ldr	r0, [r7, #0]
 800b7d8:	f005 f956 	bl	8010a88 <USB_CoreInit>
 800b7dc:	4603      	mov	r3, r0
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d005      	beq.n	800b7ee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	2202      	movs	r2, #2
 800b7e6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b7ea:	2301      	movs	r3, #1
 800b7ec:	e0d7      	b.n	800b99e <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	2100      	movs	r1, #0
 800b7f4:	4618      	mov	r0, r3
 800b7f6:	f005 f9c6 	bl	8010b86 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	73fb      	strb	r3, [r7, #15]
 800b7fe:	e04a      	b.n	800b896 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b800:	7bfa      	ldrb	r2, [r7, #15]
 800b802:	6879      	ldr	r1, [r7, #4]
 800b804:	4613      	mov	r3, r2
 800b806:	00db      	lsls	r3, r3, #3
 800b808:	4413      	add	r3, r2
 800b80a:	009b      	lsls	r3, r3, #2
 800b80c:	440b      	add	r3, r1
 800b80e:	333d      	adds	r3, #61	; 0x3d
 800b810:	2201      	movs	r2, #1
 800b812:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b814:	7bfa      	ldrb	r2, [r7, #15]
 800b816:	6879      	ldr	r1, [r7, #4]
 800b818:	4613      	mov	r3, r2
 800b81a:	00db      	lsls	r3, r3, #3
 800b81c:	4413      	add	r3, r2
 800b81e:	009b      	lsls	r3, r3, #2
 800b820:	440b      	add	r3, r1
 800b822:	333c      	adds	r3, #60	; 0x3c
 800b824:	7bfa      	ldrb	r2, [r7, #15]
 800b826:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800b828:	7bfa      	ldrb	r2, [r7, #15]
 800b82a:	7bfb      	ldrb	r3, [r7, #15]
 800b82c:	b298      	uxth	r0, r3
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	4613      	mov	r3, r2
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	4413      	add	r3, r2
 800b836:	009b      	lsls	r3, r3, #2
 800b838:	440b      	add	r3, r1
 800b83a:	3344      	adds	r3, #68	; 0x44
 800b83c:	4602      	mov	r2, r0
 800b83e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b840:	7bfa      	ldrb	r2, [r7, #15]
 800b842:	6879      	ldr	r1, [r7, #4]
 800b844:	4613      	mov	r3, r2
 800b846:	00db      	lsls	r3, r3, #3
 800b848:	4413      	add	r3, r2
 800b84a:	009b      	lsls	r3, r3, #2
 800b84c:	440b      	add	r3, r1
 800b84e:	3340      	adds	r3, #64	; 0x40
 800b850:	2200      	movs	r2, #0
 800b852:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b854:	7bfa      	ldrb	r2, [r7, #15]
 800b856:	6879      	ldr	r1, [r7, #4]
 800b858:	4613      	mov	r3, r2
 800b85a:	00db      	lsls	r3, r3, #3
 800b85c:	4413      	add	r3, r2
 800b85e:	009b      	lsls	r3, r3, #2
 800b860:	440b      	add	r3, r1
 800b862:	3348      	adds	r3, #72	; 0x48
 800b864:	2200      	movs	r2, #0
 800b866:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b868:	7bfa      	ldrb	r2, [r7, #15]
 800b86a:	6879      	ldr	r1, [r7, #4]
 800b86c:	4613      	mov	r3, r2
 800b86e:	00db      	lsls	r3, r3, #3
 800b870:	4413      	add	r3, r2
 800b872:	009b      	lsls	r3, r3, #2
 800b874:	440b      	add	r3, r1
 800b876:	334c      	adds	r3, #76	; 0x4c
 800b878:	2200      	movs	r2, #0
 800b87a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b87c:	7bfa      	ldrb	r2, [r7, #15]
 800b87e:	6879      	ldr	r1, [r7, #4]
 800b880:	4613      	mov	r3, r2
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	4413      	add	r3, r2
 800b886:	009b      	lsls	r3, r3, #2
 800b888:	440b      	add	r3, r1
 800b88a:	3354      	adds	r3, #84	; 0x54
 800b88c:	2200      	movs	r2, #0
 800b88e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b890:	7bfb      	ldrb	r3, [r7, #15]
 800b892:	3301      	adds	r3, #1
 800b894:	73fb      	strb	r3, [r7, #15]
 800b896:	7bfa      	ldrb	r2, [r7, #15]
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	685b      	ldr	r3, [r3, #4]
 800b89c:	429a      	cmp	r2, r3
 800b89e:	d3af      	bcc.n	800b800 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]
 800b8a4:	e044      	b.n	800b930 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b8a6:	7bfa      	ldrb	r2, [r7, #15]
 800b8a8:	6879      	ldr	r1, [r7, #4]
 800b8aa:	4613      	mov	r3, r2
 800b8ac:	00db      	lsls	r3, r3, #3
 800b8ae:	4413      	add	r3, r2
 800b8b0:	009b      	lsls	r3, r3, #2
 800b8b2:	440b      	add	r3, r1
 800b8b4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b8bc:	7bfa      	ldrb	r2, [r7, #15]
 800b8be:	6879      	ldr	r1, [r7, #4]
 800b8c0:	4613      	mov	r3, r2
 800b8c2:	00db      	lsls	r3, r3, #3
 800b8c4:	4413      	add	r3, r2
 800b8c6:	009b      	lsls	r3, r3, #2
 800b8c8:	440b      	add	r3, r1
 800b8ca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800b8ce:	7bfa      	ldrb	r2, [r7, #15]
 800b8d0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b8d2:	7bfa      	ldrb	r2, [r7, #15]
 800b8d4:	6879      	ldr	r1, [r7, #4]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	00db      	lsls	r3, r3, #3
 800b8da:	4413      	add	r3, r2
 800b8dc:	009b      	lsls	r3, r3, #2
 800b8de:	440b      	add	r3, r1
 800b8e0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b8e4:	2200      	movs	r2, #0
 800b8e6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b8e8:	7bfa      	ldrb	r2, [r7, #15]
 800b8ea:	6879      	ldr	r1, [r7, #4]
 800b8ec:	4613      	mov	r3, r2
 800b8ee:	00db      	lsls	r3, r3, #3
 800b8f0:	4413      	add	r3, r2
 800b8f2:	009b      	lsls	r3, r3, #2
 800b8f4:	440b      	add	r3, r1
 800b8f6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800b8fa:	2200      	movs	r2, #0
 800b8fc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b8fe:	7bfa      	ldrb	r2, [r7, #15]
 800b900:	6879      	ldr	r1, [r7, #4]
 800b902:	4613      	mov	r3, r2
 800b904:	00db      	lsls	r3, r3, #3
 800b906:	4413      	add	r3, r2
 800b908:	009b      	lsls	r3, r3, #2
 800b90a:	440b      	add	r3, r1
 800b90c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b910:	2200      	movs	r2, #0
 800b912:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b914:	7bfa      	ldrb	r2, [r7, #15]
 800b916:	6879      	ldr	r1, [r7, #4]
 800b918:	4613      	mov	r3, r2
 800b91a:	00db      	lsls	r3, r3, #3
 800b91c:	4413      	add	r3, r2
 800b91e:	009b      	lsls	r3, r3, #2
 800b920:	440b      	add	r3, r1
 800b922:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800b926:	2200      	movs	r2, #0
 800b928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b92a:	7bfb      	ldrb	r3, [r7, #15]
 800b92c:	3301      	adds	r3, #1
 800b92e:	73fb      	strb	r3, [r7, #15]
 800b930:	7bfa      	ldrb	r2, [r7, #15]
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	685b      	ldr	r3, [r3, #4]
 800b936:	429a      	cmp	r2, r3
 800b938:	d3b5      	bcc.n	800b8a6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	681b      	ldr	r3, [r3, #0]
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	687e      	ldr	r6, [r7, #4]
 800b942:	466d      	mov	r5, sp
 800b944:	f106 0410 	add.w	r4, r6, #16
 800b948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b94a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b94c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b94e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800b950:	e894 0003 	ldmia.w	r4, {r0, r1}
 800b954:	e885 0003 	stmia.w	r5, {r0, r1}
 800b958:	1d33      	adds	r3, r6, #4
 800b95a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b95c:	6838      	ldr	r0, [r7, #0]
 800b95e:	f005 f95f 	bl	8010c20 <USB_DevInit>
 800b962:	4603      	mov	r3, r0
 800b964:	2b00      	cmp	r3, #0
 800b966:	d005      	beq.n	800b974 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	2202      	movs	r2, #2
 800b96c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800b970:	2301      	movs	r3, #1
 800b972:	e014      	b.n	800b99e <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	2200      	movs	r2, #0
 800b978:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	2201      	movs	r2, #1
 800b980:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b988:	2b01      	cmp	r3, #1
 800b98a:	d102      	bne.n	800b992 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b98c:	6878      	ldr	r0, [r7, #4]
 800b98e:	f000 f80b 	bl	800b9a8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	4618      	mov	r0, r3
 800b998:	f005 fb1d 	bl	8010fd6 <USB_DevDisconnect>

  return HAL_OK;
 800b99c:	2300      	movs	r3, #0
}
 800b99e:	4618      	mov	r0, r3
 800b9a0:	3714      	adds	r7, #20
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800b9a8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b9a8:	b480      	push	{r7}
 800b9aa:	b085      	sub	sp, #20
 800b9ac:	af00      	add	r7, sp, #0
 800b9ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2201      	movs	r2, #1
 800b9ba:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	2200      	movs	r2, #0
 800b9c2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	699b      	ldr	r3, [r3, #24]
 800b9ca:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800b9d6:	4b05      	ldr	r3, [pc, #20]	; (800b9ec <HAL_PCDEx_ActivateLPM+0x44>)
 800b9d8:	4313      	orrs	r3, r2
 800b9da:	68fa      	ldr	r2, [r7, #12]
 800b9dc:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800b9de:	2300      	movs	r3, #0
}
 800b9e0:	4618      	mov	r0, r3
 800b9e2:	3714      	adds	r7, #20
 800b9e4:	46bd      	mov	sp, r7
 800b9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9ea:	4770      	bx	lr
 800b9ec:	10000003 	.word	0x10000003

0800b9f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800b9f0:	b580      	push	{r7, lr}
 800b9f2:	b084      	sub	sp, #16
 800b9f4:	af00      	add	r7, sp, #0
 800b9f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800b9f8:	4b29      	ldr	r3, [pc, #164]	; (800baa0 <HAL_PWREx_ConfigSupply+0xb0>)
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	f003 0307 	and.w	r3, r3, #7
 800ba00:	2b06      	cmp	r3, #6
 800ba02:	d00a      	beq.n	800ba1a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800ba04:	4b26      	ldr	r3, [pc, #152]	; (800baa0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ba06:	68db      	ldr	r3, [r3, #12]
 800ba08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba0c:	687a      	ldr	r2, [r7, #4]
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d001      	beq.n	800ba16 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800ba12:	2301      	movs	r3, #1
 800ba14:	e040      	b.n	800ba98 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800ba16:	2300      	movs	r3, #0
 800ba18:	e03e      	b.n	800ba98 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800ba1a:	4b21      	ldr	r3, [pc, #132]	; (800baa0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800ba22:	491f      	ldr	r1, [pc, #124]	; (800baa0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ba24:	687b      	ldr	r3, [r7, #4]
 800ba26:	4313      	orrs	r3, r2
 800ba28:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800ba2a:	f7fb fb57 	bl	80070dc <HAL_GetTick>
 800ba2e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ba30:	e009      	b.n	800ba46 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ba32:	f7fb fb53 	bl	80070dc <HAL_GetTick>
 800ba36:	4602      	mov	r2, r0
 800ba38:	68fb      	ldr	r3, [r7, #12]
 800ba3a:	1ad3      	subs	r3, r2, r3
 800ba3c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba40:	d901      	bls.n	800ba46 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800ba42:	2301      	movs	r3, #1
 800ba44:	e028      	b.n	800ba98 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800ba46:	4b16      	ldr	r3, [pc, #88]	; (800baa0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ba4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ba52:	d1ee      	bne.n	800ba32 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	2b1e      	cmp	r3, #30
 800ba58:	d008      	beq.n	800ba6c <HAL_PWREx_ConfigSupply+0x7c>
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	2b2e      	cmp	r3, #46	; 0x2e
 800ba5e:	d005      	beq.n	800ba6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 800ba60:	687b      	ldr	r3, [r7, #4]
 800ba62:	2b1d      	cmp	r3, #29
 800ba64:	d002      	beq.n	800ba6c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	2b2d      	cmp	r3, #45	; 0x2d
 800ba6a:	d114      	bne.n	800ba96 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800ba6c:	f7fb fb36 	bl	80070dc <HAL_GetTick>
 800ba70:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ba72:	e009      	b.n	800ba88 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800ba74:	f7fb fb32 	bl	80070dc <HAL_GetTick>
 800ba78:	4602      	mov	r2, r0
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	1ad3      	subs	r3, r2, r3
 800ba7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800ba82:	d901      	bls.n	800ba88 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800ba84:	2301      	movs	r3, #1
 800ba86:	e007      	b.n	800ba98 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800ba88:	4b05      	ldr	r3, [pc, #20]	; (800baa0 <HAL_PWREx_ConfigSupply+0xb0>)
 800ba8a:	68db      	ldr	r3, [r3, #12]
 800ba8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800ba90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ba94:	d1ee      	bne.n	800ba74 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800ba96:	2300      	movs	r3, #0
}
 800ba98:	4618      	mov	r0, r3
 800ba9a:	3710      	adds	r7, #16
 800ba9c:	46bd      	mov	sp, r7
 800ba9e:	bd80      	pop	{r7, pc}
 800baa0:	58024800 	.word	0x58024800

0800baa4 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800baa4:	b480      	push	{r7}
 800baa6:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800baa8:	4b05      	ldr	r3, [pc, #20]	; (800bac0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800baaa:	68db      	ldr	r3, [r3, #12]
 800baac:	4a04      	ldr	r2, [pc, #16]	; (800bac0 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800baae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800bab2:	60d3      	str	r3, [r2, #12]
}
 800bab4:	bf00      	nop
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	58024800 	.word	0x58024800

0800bac4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b08c      	sub	sp, #48	; 0x30
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	2b00      	cmp	r3, #0
 800bad0:	d102      	bne.n	800bad8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bad2:	2301      	movs	r3, #1
 800bad4:	f000 bc1d 	b.w	800c312 <HAL_RCC_OscConfig+0x84e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	681b      	ldr	r3, [r3, #0]
 800badc:	f003 0301 	and.w	r3, r3, #1
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	f000 8087 	beq.w	800bbf4 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bae6:	4b99      	ldr	r3, [pc, #612]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bae8:	691b      	ldr	r3, [r3, #16]
 800baea:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800baee:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800baf0:	4b96      	ldr	r3, [pc, #600]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800baf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800baf4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800baf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf8:	2b10      	cmp	r3, #16
 800bafa:	d007      	beq.n	800bb0c <HAL_RCC_OscConfig+0x48>
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	2b18      	cmp	r3, #24
 800bb00:	d110      	bne.n	800bb24 <HAL_RCC_OscConfig+0x60>
 800bb02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bb04:	f003 0303 	and.w	r3, r3, #3
 800bb08:	2b02      	cmp	r3, #2
 800bb0a:	d10b      	bne.n	800bb24 <HAL_RCC_OscConfig+0x60>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bb0c:	4b8f      	ldr	r3, [pc, #572]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bb14:	2b00      	cmp	r3, #0
 800bb16:	d06c      	beq.n	800bbf2 <HAL_RCC_OscConfig+0x12e>
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	685b      	ldr	r3, [r3, #4]
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d168      	bne.n	800bbf2 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 800bb20:	2301      	movs	r3, #1
 800bb22:	e3f6      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	685b      	ldr	r3, [r3, #4]
 800bb28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bb2c:	d106      	bne.n	800bb3c <HAL_RCC_OscConfig+0x78>
 800bb2e:	4b87      	ldr	r3, [pc, #540]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a86      	ldr	r2, [pc, #536]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb38:	6013      	str	r3, [r2, #0]
 800bb3a:	e02e      	b.n	800bb9a <HAL_RCC_OscConfig+0xd6>
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	685b      	ldr	r3, [r3, #4]
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d10c      	bne.n	800bb5e <HAL_RCC_OscConfig+0x9a>
 800bb44:	4b81      	ldr	r3, [pc, #516]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	4a80      	ldr	r2, [pc, #512]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb4e:	6013      	str	r3, [r2, #0]
 800bb50:	4b7e      	ldr	r3, [pc, #504]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb52:	681b      	ldr	r3, [r3, #0]
 800bb54:	4a7d      	ldr	r2, [pc, #500]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb5a:	6013      	str	r3, [r2, #0]
 800bb5c:	e01d      	b.n	800bb9a <HAL_RCC_OscConfig+0xd6>
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	685b      	ldr	r3, [r3, #4]
 800bb62:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800bb66:	d10c      	bne.n	800bb82 <HAL_RCC_OscConfig+0xbe>
 800bb68:	4b78      	ldr	r3, [pc, #480]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	4a77      	ldr	r2, [pc, #476]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb6e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800bb72:	6013      	str	r3, [r2, #0]
 800bb74:	4b75      	ldr	r3, [pc, #468]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a74      	ldr	r2, [pc, #464]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bb7e:	6013      	str	r3, [r2, #0]
 800bb80:	e00b      	b.n	800bb9a <HAL_RCC_OscConfig+0xd6>
 800bb82:	4b72      	ldr	r3, [pc, #456]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	4a71      	ldr	r2, [pc, #452]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb88:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800bb8c:	6013      	str	r3, [r2, #0]
 800bb8e:	4b6f      	ldr	r3, [pc, #444]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	4a6e      	ldr	r2, [pc, #440]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bb94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800bb98:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	685b      	ldr	r3, [r3, #4]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d013      	beq.n	800bbca <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bba2:	f7fb fa9b 	bl	80070dc <HAL_GetTick>
 800bba6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bba8:	e008      	b.n	800bbbc <HAL_RCC_OscConfig+0xf8>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bbaa:	f7fb fa97 	bl	80070dc <HAL_GetTick>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbb2:	1ad3      	subs	r3, r2, r3
 800bbb4:	2b64      	cmp	r3, #100	; 0x64
 800bbb6:	d901      	bls.n	800bbbc <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 800bbb8:	2303      	movs	r3, #3
 800bbba:	e3aa      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bbbc:	4b63      	ldr	r3, [pc, #396]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bbbe:	681b      	ldr	r3, [r3, #0]
 800bbc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbc4:	2b00      	cmp	r3, #0
 800bbc6:	d0f0      	beq.n	800bbaa <HAL_RCC_OscConfig+0xe6>
 800bbc8:	e014      	b.n	800bbf4 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bbca:	f7fb fa87 	bl	80070dc <HAL_GetTick>
 800bbce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bbd0:	e008      	b.n	800bbe4 <HAL_RCC_OscConfig+0x120>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800bbd2:	f7fb fa83 	bl	80070dc <HAL_GetTick>
 800bbd6:	4602      	mov	r2, r0
 800bbd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bbda:	1ad3      	subs	r3, r2, r3
 800bbdc:	2b64      	cmp	r3, #100	; 0x64
 800bbde:	d901      	bls.n	800bbe4 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 800bbe0:	2303      	movs	r3, #3
 800bbe2:	e396      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bbe4:	4b59      	ldr	r3, [pc, #356]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	d1f0      	bne.n	800bbd2 <HAL_RCC_OscConfig+0x10e>
 800bbf0:	e000      	b.n	800bbf4 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bbf2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f003 0302 	and.w	r3, r3, #2
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f000 80cb 	beq.w	800bd98 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc02:	4b52      	ldr	r3, [pc, #328]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc04:	691b      	ldr	r3, [r3, #16]
 800bc06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bc0a:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc0c:	4b4f      	ldr	r3, [pc, #316]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc0e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bc10:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bc12:	6a3b      	ldr	r3, [r7, #32]
 800bc14:	2b00      	cmp	r3, #0
 800bc16:	d007      	beq.n	800bc28 <HAL_RCC_OscConfig+0x164>
 800bc18:	6a3b      	ldr	r3, [r7, #32]
 800bc1a:	2b18      	cmp	r3, #24
 800bc1c:	d156      	bne.n	800bccc <HAL_RCC_OscConfig+0x208>
 800bc1e:	69fb      	ldr	r3, [r7, #28]
 800bc20:	f003 0303 	and.w	r3, r3, #3
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d151      	bne.n	800bccc <HAL_RCC_OscConfig+0x208>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc28:	4b48      	ldr	r3, [pc, #288]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d005      	beq.n	800bc40 <HAL_RCC_OscConfig+0x17c>
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	68db      	ldr	r3, [r3, #12]
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	d101      	bne.n	800bc40 <HAL_RCC_OscConfig+0x17c>
      {
        return HAL_ERROR;
 800bc3c:	2301      	movs	r3, #1
 800bc3e:	e368      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
          /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bc40:	4b42      	ldr	r3, [pc, #264]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	f023 0219 	bic.w	r2, r3, #25
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	68db      	ldr	r3, [r3, #12]
 800bc4c:	493f      	ldr	r1, [pc, #252]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc4e:	4313      	orrs	r3, r2
 800bc50:	600b      	str	r3, [r1, #0]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800bc52:	f7fb fa43 	bl	80070dc <HAL_GetTick>
 800bc56:	6278      	str	r0, [r7, #36]	; 0x24

          /* Wait till HSI is ready */
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc58:	e008      	b.n	800bc6c <HAL_RCC_OscConfig+0x1a8>
          {
            if((uint32_t) (HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bc5a:	f7fb fa3f 	bl	80070dc <HAL_GetTick>
 800bc5e:	4602      	mov	r2, r0
 800bc60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc62:	1ad3      	subs	r3, r2, r3
 800bc64:	2b02      	cmp	r3, #2
 800bc66:	d901      	bls.n	800bc6c <HAL_RCC_OscConfig+0x1a8>
            {
              return HAL_TIMEOUT;
 800bc68:	2303      	movs	r3, #3
 800bc6a:	e352      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
          while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bc6c:	4b37      	ldr	r3, [pc, #220]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc6e:	681b      	ldr	r3, [r3, #0]
 800bc70:	f003 0304 	and.w	r3, r3, #4
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d0f0      	beq.n	800bc5a <HAL_RCC_OscConfig+0x196>
            }
          }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bc78:	f7fb fa60 	bl	800713c <HAL_GetREVID>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	f241 0203 	movw	r2, #4099	; 0x1003
 800bc82:	4293      	cmp	r3, r2
 800bc84:	d817      	bhi.n	800bcb6 <HAL_RCC_OscConfig+0x1f2>
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	691b      	ldr	r3, [r3, #16]
 800bc8a:	2b40      	cmp	r3, #64	; 0x40
 800bc8c:	d108      	bne.n	800bca0 <HAL_RCC_OscConfig+0x1dc>
 800bc8e:	4b2f      	ldr	r3, [pc, #188]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc90:	685b      	ldr	r3, [r3, #4]
 800bc92:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bc96:	4a2d      	ldr	r2, [pc, #180]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bc98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bc9c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bc9e:	e07b      	b.n	800bd98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bca0:	4b2a      	ldr	r3, [pc, #168]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bca2:	685b      	ldr	r3, [r3, #4]
 800bca4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	691b      	ldr	r3, [r3, #16]
 800bcac:	031b      	lsls	r3, r3, #12
 800bcae:	4927      	ldr	r1, [pc, #156]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bcb0:	4313      	orrs	r3, r2
 800bcb2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bcb4:	e070      	b.n	800bd98 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bcb6:	4b25      	ldr	r3, [pc, #148]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	691b      	ldr	r3, [r3, #16]
 800bcc2:	061b      	lsls	r3, r3, #24
 800bcc4:	4921      	ldr	r1, [pc, #132]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bcc6:	4313      	orrs	r3, r2
 800bcc8:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bcca:	e065      	b.n	800bd98 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	d048      	beq.n	800bd66 <HAL_RCC_OscConfig+0x2a2>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bcd4:	4b1d      	ldr	r3, [pc, #116]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	f023 0219 	bic.w	r2, r3, #25
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	68db      	ldr	r3, [r3, #12]
 800bce0:	491a      	ldr	r1, [pc, #104]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bce2:	4313      	orrs	r3, r2
 800bce4:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bce6:	f7fb f9f9 	bl	80070dc <HAL_GetTick>
 800bcea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bcec:	e008      	b.n	800bd00 <HAL_RCC_OscConfig+0x23c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bcee:	f7fb f9f5 	bl	80070dc <HAL_GetTick>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf6:	1ad3      	subs	r3, r2, r3
 800bcf8:	2b02      	cmp	r3, #2
 800bcfa:	d901      	bls.n	800bd00 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_TIMEOUT;
 800bcfc:	2303      	movs	r3, #3
 800bcfe:	e308      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bd00:	4b12      	ldr	r3, [pc, #72]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bd02:	681b      	ldr	r3, [r3, #0]
 800bd04:	f003 0304 	and.w	r3, r3, #4
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	d0f0      	beq.n	800bcee <HAL_RCC_OscConfig+0x22a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bd0c:	f7fb fa16 	bl	800713c <HAL_GetREVID>
 800bd10:	4603      	mov	r3, r0
 800bd12:	f241 0203 	movw	r2, #4099	; 0x1003
 800bd16:	4293      	cmp	r3, r2
 800bd18:	d81a      	bhi.n	800bd50 <HAL_RCC_OscConfig+0x28c>
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	691b      	ldr	r3, [r3, #16]
 800bd1e:	2b40      	cmp	r3, #64	; 0x40
 800bd20:	d108      	bne.n	800bd34 <HAL_RCC_OscConfig+0x270>
 800bd22:	4b0a      	ldr	r3, [pc, #40]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bd24:	685b      	ldr	r3, [r3, #4]
 800bd26:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800bd2a:	4a08      	ldr	r2, [pc, #32]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bd2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd30:	6053      	str	r3, [r2, #4]
 800bd32:	e031      	b.n	800bd98 <HAL_RCC_OscConfig+0x2d4>
 800bd34:	4b05      	ldr	r3, [pc, #20]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bd36:	685b      	ldr	r3, [r3, #4]
 800bd38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	691b      	ldr	r3, [r3, #16]
 800bd40:	031b      	lsls	r3, r3, #12
 800bd42:	4902      	ldr	r1, [pc, #8]	; (800bd4c <HAL_RCC_OscConfig+0x288>)
 800bd44:	4313      	orrs	r3, r2
 800bd46:	604b      	str	r3, [r1, #4]
 800bd48:	e026      	b.n	800bd98 <HAL_RCC_OscConfig+0x2d4>
 800bd4a:	bf00      	nop
 800bd4c:	58024400 	.word	0x58024400
 800bd50:	4b9a      	ldr	r3, [pc, #616]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bd52:	685b      	ldr	r3, [r3, #4]
 800bd54:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	691b      	ldr	r3, [r3, #16]
 800bd5c:	061b      	lsls	r3, r3, #24
 800bd5e:	4997      	ldr	r1, [pc, #604]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bd60:	4313      	orrs	r3, r2
 800bd62:	604b      	str	r3, [r1, #4]
 800bd64:	e018      	b.n	800bd98 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bd66:	4b95      	ldr	r3, [pc, #596]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	4a94      	ldr	r2, [pc, #592]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bd6c:	f023 0301 	bic.w	r3, r3, #1
 800bd70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd72:	f7fb f9b3 	bl	80070dc <HAL_GetTick>
 800bd76:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bd78:	e008      	b.n	800bd8c <HAL_RCC_OscConfig+0x2c8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bd7a:	f7fb f9af 	bl	80070dc <HAL_GetTick>
 800bd7e:	4602      	mov	r2, r0
 800bd80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd82:	1ad3      	subs	r3, r2, r3
 800bd84:	2b02      	cmp	r3, #2
 800bd86:	d901      	bls.n	800bd8c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bd88:	2303      	movs	r3, #3
 800bd8a:	e2c2      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bd8c:	4b8b      	ldr	r3, [pc, #556]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bd8e:	681b      	ldr	r3, [r3, #0]
 800bd90:	f003 0304 	and.w	r3, r3, #4
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d1f0      	bne.n	800bd7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	f003 0310 	and.w	r3, r3, #16
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	f000 80a9 	beq.w	800bef8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bda6:	4b85      	ldr	r3, [pc, #532]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bda8:	691b      	ldr	r3, [r3, #16]
 800bdaa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800bdae:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bdb0:	4b82      	ldr	r3, [pc, #520]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bdb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bdb4:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	2b08      	cmp	r3, #8
 800bdba:	d007      	beq.n	800bdcc <HAL_RCC_OscConfig+0x308>
 800bdbc:	69bb      	ldr	r3, [r7, #24]
 800bdbe:	2b18      	cmp	r3, #24
 800bdc0:	d13a      	bne.n	800be38 <HAL_RCC_OscConfig+0x374>
 800bdc2:	697b      	ldr	r3, [r7, #20]
 800bdc4:	f003 0303 	and.w	r3, r3, #3
 800bdc8:	2b01      	cmp	r3, #1
 800bdca:	d135      	bne.n	800be38 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bdcc:	4b7b      	ldr	r3, [pc, #492]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d005      	beq.n	800bde4 <HAL_RCC_OscConfig+0x320>
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	69db      	ldr	r3, [r3, #28]
 800bddc:	2b80      	cmp	r3, #128	; 0x80
 800bdde:	d001      	beq.n	800bde4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bde0:	2301      	movs	r3, #1
 800bde2:	e296      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bde4:	f7fb f9aa 	bl	800713c <HAL_GetREVID>
 800bde8:	4603      	mov	r3, r0
 800bdea:	f241 0203 	movw	r2, #4099	; 0x1003
 800bdee:	4293      	cmp	r3, r2
 800bdf0:	d817      	bhi.n	800be22 <HAL_RCC_OscConfig+0x35e>
 800bdf2:	687b      	ldr	r3, [r7, #4]
 800bdf4:	6a1b      	ldr	r3, [r3, #32]
 800bdf6:	2b20      	cmp	r3, #32
 800bdf8:	d108      	bne.n	800be0c <HAL_RCC_OscConfig+0x348>
 800bdfa:	4b70      	ldr	r3, [pc, #448]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bdfc:	685b      	ldr	r3, [r3, #4]
 800bdfe:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800be02:	4a6e      	ldr	r2, [pc, #440]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be08:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800be0a:	e075      	b.n	800bef8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be0c:	4b6b      	ldr	r3, [pc, #428]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be0e:	685b      	ldr	r3, [r3, #4]
 800be10:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	6a1b      	ldr	r3, [r3, #32]
 800be18:	069b      	lsls	r3, r3, #26
 800be1a:	4968      	ldr	r1, [pc, #416]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be1c:	4313      	orrs	r3, r2
 800be1e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800be20:	e06a      	b.n	800bef8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be22:	4b66      	ldr	r3, [pc, #408]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	6a1b      	ldr	r3, [r3, #32]
 800be2e:	061b      	lsls	r3, r3, #24
 800be30:	4962      	ldr	r1, [pc, #392]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be32:	4313      	orrs	r3, r2
 800be34:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800be36:	e05f      	b.n	800bef8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 800be38:	687b      	ldr	r3, [r7, #4]
 800be3a:	69db      	ldr	r3, [r3, #28]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d042      	beq.n	800bec6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800be40:	4b5e      	ldr	r3, [pc, #376]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be42:	681b      	ldr	r3, [r3, #0]
 800be44:	4a5d      	ldr	r2, [pc, #372]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be46:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be4c:	f7fb f946 	bl	80070dc <HAL_GetTick>
 800be50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be52:	e008      	b.n	800be66 <HAL_RCC_OscConfig+0x3a2>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800be54:	f7fb f942 	bl	80070dc <HAL_GetTick>
 800be58:	4602      	mov	r2, r0
 800be5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be5c:	1ad3      	subs	r3, r2, r3
 800be5e:	2b02      	cmp	r3, #2
 800be60:	d901      	bls.n	800be66 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800be62:	2303      	movs	r3, #3
 800be64:	e255      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800be66:	4b55      	ldr	r3, [pc, #340]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d0f0      	beq.n	800be54 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800be72:	f7fb f963 	bl	800713c <HAL_GetREVID>
 800be76:	4603      	mov	r3, r0
 800be78:	f241 0203 	movw	r2, #4099	; 0x1003
 800be7c:	4293      	cmp	r3, r2
 800be7e:	d817      	bhi.n	800beb0 <HAL_RCC_OscConfig+0x3ec>
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	6a1b      	ldr	r3, [r3, #32]
 800be84:	2b20      	cmp	r3, #32
 800be86:	d108      	bne.n	800be9a <HAL_RCC_OscConfig+0x3d6>
 800be88:	4b4c      	ldr	r3, [pc, #304]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be8a:	685b      	ldr	r3, [r3, #4]
 800be8c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800be90:	4a4a      	ldr	r2, [pc, #296]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800be96:	6053      	str	r3, [r2, #4]
 800be98:	e02e      	b.n	800bef8 <HAL_RCC_OscConfig+0x434>
 800be9a:	4b48      	ldr	r3, [pc, #288]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800be9c:	685b      	ldr	r3, [r3, #4]
 800be9e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	6a1b      	ldr	r3, [r3, #32]
 800bea6:	069b      	lsls	r3, r3, #26
 800bea8:	4944      	ldr	r1, [pc, #272]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800beaa:	4313      	orrs	r3, r2
 800beac:	604b      	str	r3, [r1, #4]
 800beae:	e023      	b.n	800bef8 <HAL_RCC_OscConfig+0x434>
 800beb0:	4b42      	ldr	r3, [pc, #264]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800beb2:	68db      	ldr	r3, [r3, #12]
 800beb4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a1b      	ldr	r3, [r3, #32]
 800bebc:	061b      	lsls	r3, r3, #24
 800bebe:	493f      	ldr	r1, [pc, #252]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bec0:	4313      	orrs	r3, r2
 800bec2:	60cb      	str	r3, [r1, #12]
 800bec4:	e018      	b.n	800bef8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800bec6:	4b3d      	ldr	r3, [pc, #244]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	4a3c      	ldr	r2, [pc, #240]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800becc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bed2:	f7fb f903 	bl	80070dc <HAL_GetTick>
 800bed6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800bed8:	e008      	b.n	800beec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800beda:	f7fb f8ff 	bl	80070dc <HAL_GetTick>
 800bede:	4602      	mov	r2, r0
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d901      	bls.n	800beec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e212      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800beec:	4b33      	ldr	r3, [pc, #204]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d1f0      	bne.n	800beda <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	681b      	ldr	r3, [r3, #0]
 800befc:	f003 0308 	and.w	r3, r3, #8
 800bf00:	2b00      	cmp	r3, #0
 800bf02:	d036      	beq.n	800bf72 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	695b      	ldr	r3, [r3, #20]
 800bf08:	2b00      	cmp	r3, #0
 800bf0a:	d019      	beq.n	800bf40 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bf0c:	4b2b      	ldr	r3, [pc, #172]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf10:	4a2a      	ldr	r2, [pc, #168]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf12:	f043 0301 	orr.w	r3, r3, #1
 800bf16:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf18:	f7fb f8e0 	bl	80070dc <HAL_GetTick>
 800bf1c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bf1e:	e008      	b.n	800bf32 <HAL_RCC_OscConfig+0x46e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bf20:	f7fb f8dc 	bl	80070dc <HAL_GetTick>
 800bf24:	4602      	mov	r2, r0
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	2b02      	cmp	r3, #2
 800bf2c:	d901      	bls.n	800bf32 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800bf2e:	2303      	movs	r3, #3
 800bf30:	e1ef      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bf32:	4b22      	ldr	r3, [pc, #136]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf36:	f003 0302 	and.w	r3, r3, #2
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d0f0      	beq.n	800bf20 <HAL_RCC_OscConfig+0x45c>
 800bf3e:	e018      	b.n	800bf72 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bf40:	4b1e      	ldr	r3, [pc, #120]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf44:	4a1d      	ldr	r2, [pc, #116]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf46:	f023 0301 	bic.w	r3, r3, #1
 800bf4a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800bf4c:	f7fb f8c6 	bl	80070dc <HAL_GetTick>
 800bf50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bf52:	e008      	b.n	800bf66 <HAL_RCC_OscConfig+0x4a2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bf54:	f7fb f8c2 	bl	80070dc <HAL_GetTick>
 800bf58:	4602      	mov	r2, r0
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf5c:	1ad3      	subs	r3, r2, r3
 800bf5e:	2b02      	cmp	r3, #2
 800bf60:	d901      	bls.n	800bf66 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800bf62:	2303      	movs	r3, #3
 800bf64:	e1d5      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bf66:	4b15      	ldr	r3, [pc, #84]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bf6a:	f003 0302 	and.w	r3, r3, #2
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d1f0      	bne.n	800bf54 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800bf72:	687b      	ldr	r3, [r7, #4]
 800bf74:	681b      	ldr	r3, [r3, #0]
 800bf76:	f003 0320 	and.w	r3, r3, #32
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	d039      	beq.n	800bff2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	699b      	ldr	r3, [r3, #24]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d01c      	beq.n	800bfc0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800bf86:	4b0d      	ldr	r3, [pc, #52]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a0c      	ldr	r2, [pc, #48]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bf8c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bf90:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bf92:	f7fb f8a3 	bl	80070dc <HAL_GetTick>
 800bf96:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bf98:	e008      	b.n	800bfac <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800bf9a:	f7fb f89f 	bl	80070dc <HAL_GetTick>
 800bf9e:	4602      	mov	r2, r0
 800bfa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	2b02      	cmp	r3, #2
 800bfa6:	d901      	bls.n	800bfac <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800bfa8:	2303      	movs	r3, #3
 800bfaa:	e1b2      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800bfac:	4b03      	ldr	r3, [pc, #12]	; (800bfbc <HAL_RCC_OscConfig+0x4f8>)
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d0f0      	beq.n	800bf9a <HAL_RCC_OscConfig+0x4d6>
 800bfb8:	e01b      	b.n	800bff2 <HAL_RCC_OscConfig+0x52e>
 800bfba:	bf00      	nop
 800bfbc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800bfc0:	4b9b      	ldr	r3, [pc, #620]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	4a9a      	ldr	r2, [pc, #616]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800bfc6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bfca:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800bfcc:	f7fb f886 	bl	80070dc <HAL_GetTick>
 800bfd0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bfd2:	e008      	b.n	800bfe6 <HAL_RCC_OscConfig+0x522>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800bfd4:	f7fb f882 	bl	80070dc <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	2b02      	cmp	r3, #2
 800bfe0:	d901      	bls.n	800bfe6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800bfe2:	2303      	movs	r3, #3
 800bfe4:	e195      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bfe6:	4b92      	ldr	r3, [pc, #584]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800bfe8:	681b      	ldr	r3, [r3, #0]
 800bfea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800bfee:	2b00      	cmp	r3, #0
 800bff0:	d1f0      	bne.n	800bfd4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0304 	and.w	r3, r3, #4
 800bffa:	2b00      	cmp	r3, #0
 800bffc:	f000 8081 	beq.w	800c102 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c000:	4b8c      	ldr	r3, [pc, #560]	; (800c234 <HAL_RCC_OscConfig+0x770>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	4a8b      	ldr	r2, [pc, #556]	; (800c234 <HAL_RCC_OscConfig+0x770>)
 800c006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c00a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c00c:	f7fb f866 	bl	80070dc <HAL_GetTick>
 800c010:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c012:	e008      	b.n	800c026 <HAL_RCC_OscConfig+0x562>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800c014:	f7fb f862 	bl	80070dc <HAL_GetTick>
 800c018:	4602      	mov	r2, r0
 800c01a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01c:	1ad3      	subs	r3, r2, r3
 800c01e:	2b64      	cmp	r3, #100	; 0x64
 800c020:	d901      	bls.n	800c026 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c022:	2303      	movs	r3, #3
 800c024:	e175      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c026:	4b83      	ldr	r3, [pc, #524]	; (800c234 <HAL_RCC_OscConfig+0x770>)
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d0f0      	beq.n	800c014 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	689b      	ldr	r3, [r3, #8]
 800c036:	2b01      	cmp	r3, #1
 800c038:	d106      	bne.n	800c048 <HAL_RCC_OscConfig+0x584>
 800c03a:	4b7d      	ldr	r3, [pc, #500]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c03c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c03e:	4a7c      	ldr	r2, [pc, #496]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c040:	f043 0301 	orr.w	r3, r3, #1
 800c044:	6713      	str	r3, [r2, #112]	; 0x70
 800c046:	e02d      	b.n	800c0a4 <HAL_RCC_OscConfig+0x5e0>
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	689b      	ldr	r3, [r3, #8]
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <HAL_RCC_OscConfig+0x5a6>
 800c050:	4b77      	ldr	r3, [pc, #476]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c054:	4a76      	ldr	r2, [pc, #472]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c056:	f023 0301 	bic.w	r3, r3, #1
 800c05a:	6713      	str	r3, [r2, #112]	; 0x70
 800c05c:	4b74      	ldr	r3, [pc, #464]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c05e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c060:	4a73      	ldr	r2, [pc, #460]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c062:	f023 0304 	bic.w	r3, r3, #4
 800c066:	6713      	str	r3, [r2, #112]	; 0x70
 800c068:	e01c      	b.n	800c0a4 <HAL_RCC_OscConfig+0x5e0>
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	689b      	ldr	r3, [r3, #8]
 800c06e:	2b05      	cmp	r3, #5
 800c070:	d10c      	bne.n	800c08c <HAL_RCC_OscConfig+0x5c8>
 800c072:	4b6f      	ldr	r3, [pc, #444]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c076:	4a6e      	ldr	r2, [pc, #440]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c078:	f043 0304 	orr.w	r3, r3, #4
 800c07c:	6713      	str	r3, [r2, #112]	; 0x70
 800c07e:	4b6c      	ldr	r3, [pc, #432]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c080:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c082:	4a6b      	ldr	r2, [pc, #428]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c084:	f043 0301 	orr.w	r3, r3, #1
 800c088:	6713      	str	r3, [r2, #112]	; 0x70
 800c08a:	e00b      	b.n	800c0a4 <HAL_RCC_OscConfig+0x5e0>
 800c08c:	4b68      	ldr	r3, [pc, #416]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c08e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c090:	4a67      	ldr	r2, [pc, #412]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c092:	f023 0301 	bic.w	r3, r3, #1
 800c096:	6713      	str	r3, [r2, #112]	; 0x70
 800c098:	4b65      	ldr	r3, [pc, #404]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c09a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c09c:	4a64      	ldr	r2, [pc, #400]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c09e:	f023 0304 	bic.w	r3, r3, #4
 800c0a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	689b      	ldr	r3, [r3, #8]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d015      	beq.n	800c0d8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0ac:	f7fb f816 	bl	80070dc <HAL_GetTick>
 800c0b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0b2:	e00a      	b.n	800c0ca <HAL_RCC_OscConfig+0x606>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0b4:	f7fb f812 	bl	80070dc <HAL_GetTick>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0bc:	1ad3      	subs	r3, r2, r3
 800c0be:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0c2:	4293      	cmp	r3, r2
 800c0c4:	d901      	bls.n	800c0ca <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c0c6:	2303      	movs	r3, #3
 800c0c8:	e123      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c0ca:	4b59      	ldr	r3, [pc, #356]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c0cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0ce:	f003 0302 	and.w	r3, r3, #2
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d0ee      	beq.n	800c0b4 <HAL_RCC_OscConfig+0x5f0>
 800c0d6:	e014      	b.n	800c102 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0d8:	f7fb f800 	bl	80070dc <HAL_GetTick>
 800c0dc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c0de:	e00a      	b.n	800c0f6 <HAL_RCC_OscConfig+0x632>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c0e0:	f7fa fffc 	bl	80070dc <HAL_GetTick>
 800c0e4:	4602      	mov	r2, r0
 800c0e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e8:	1ad3      	subs	r3, r2, r3
 800c0ea:	f241 3288 	movw	r2, #5000	; 0x1388
 800c0ee:	4293      	cmp	r3, r2
 800c0f0:	d901      	bls.n	800c0f6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e10d      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c0f6:	4b4e      	ldr	r3, [pc, #312]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c0f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0fa:	f003 0302 	and.w	r3, r3, #2
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1ee      	bne.n	800c0e0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c106:	2b00      	cmp	r3, #0
 800c108:	f000 8102 	beq.w	800c310 <HAL_RCC_OscConfig+0x84c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c10c:	4b48      	ldr	r3, [pc, #288]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c10e:	691b      	ldr	r3, [r3, #16]
 800c110:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c114:	2b18      	cmp	r3, #24
 800c116:	f000 80bd 	beq.w	800c294 <HAL_RCC_OscConfig+0x7d0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11e:	2b02      	cmp	r3, #2
 800c120:	f040 809e 	bne.w	800c260 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c124:	4b42      	ldr	r3, [pc, #264]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c126:	681b      	ldr	r3, [r3, #0]
 800c128:	4a41      	ldr	r2, [pc, #260]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c12a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c12e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c130:	f7fa ffd4 	bl	80070dc <HAL_GetTick>
 800c134:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c136:	e008      	b.n	800c14a <HAL_RCC_OscConfig+0x686>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c138:	f7fa ffd0 	bl	80070dc <HAL_GetTick>
 800c13c:	4602      	mov	r2, r0
 800c13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	2b02      	cmp	r3, #2
 800c144:	d901      	bls.n	800c14a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c146:	2303      	movs	r3, #3
 800c148:	e0e3      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c14a:	4b39      	ldr	r3, [pc, #228]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c14c:	681b      	ldr	r3, [r3, #0]
 800c14e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c152:	2b00      	cmp	r3, #0
 800c154:	d1f0      	bne.n	800c138 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c156:	4b36      	ldr	r3, [pc, #216]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c158:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c15a:	4b37      	ldr	r3, [pc, #220]	; (800c238 <HAL_RCC_OscConfig+0x774>)
 800c15c:	4013      	ands	r3, r2
 800c15e:	687a      	ldr	r2, [r7, #4]
 800c160:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c166:	0112      	lsls	r2, r2, #4
 800c168:	430a      	orrs	r2, r1
 800c16a:	4931      	ldr	r1, [pc, #196]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c16c:	4313      	orrs	r3, r2
 800c16e:	628b      	str	r3, [r1, #40]	; 0x28
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c174:	3b01      	subs	r3, #1
 800c176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c17e:	3b01      	subs	r3, #1
 800c180:	025b      	lsls	r3, r3, #9
 800c182:	b29b      	uxth	r3, r3
 800c184:	431a      	orrs	r2, r3
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c18a:	3b01      	subs	r3, #1
 800c18c:	041b      	lsls	r3, r3, #16
 800c18e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c192:	431a      	orrs	r2, r3
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c198:	3b01      	subs	r3, #1
 800c19a:	061b      	lsls	r3, r3, #24
 800c19c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1a0:	4923      	ldr	r1, [pc, #140]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1a2:	4313      	orrs	r3, r2
 800c1a4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800c1a6:	4b22      	ldr	r3, [pc, #136]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1aa:	4a21      	ldr	r2, [pc, #132]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1ac:	f023 0301 	bic.w	r3, r3, #1
 800c1b0:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c1b2:	4b1f      	ldr	r3, [pc, #124]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c1b6:	4b21      	ldr	r3, [pc, #132]	; (800c23c <HAL_RCC_OscConfig+0x778>)
 800c1b8:	4013      	ands	r3, r2
 800c1ba:	687a      	ldr	r2, [r7, #4]
 800c1bc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c1be:	00d2      	lsls	r2, r2, #3
 800c1c0:	491b      	ldr	r1, [pc, #108]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1c2:	4313      	orrs	r3, r2
 800c1c4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c1c6:	4b1a      	ldr	r3, [pc, #104]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ca:	f023 020c 	bic.w	r2, r3, #12
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1d2:	4917      	ldr	r1, [pc, #92]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1d4:	4313      	orrs	r3, r2
 800c1d6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c1d8:	4b15      	ldr	r3, [pc, #84]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1dc:	f023 0202 	bic.w	r2, r3, #2
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c1e4:	4912      	ldr	r1, [pc, #72]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1e6:	4313      	orrs	r3, r2
 800c1e8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c1ea:	4b11      	ldr	r3, [pc, #68]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ee:	4a10      	ldr	r2, [pc, #64]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1f4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c1f6:	4b0e      	ldr	r3, [pc, #56]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1fa:	4a0d      	ldr	r2, [pc, #52]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c1fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c200:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c202:	4b0b      	ldr	r3, [pc, #44]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c206:	4a0a      	ldr	r2, [pc, #40]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c208:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c20c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 800c20e:	4b08      	ldr	r3, [pc, #32]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c212:	4a07      	ldr	r2, [pc, #28]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c214:	f043 0301 	orr.w	r3, r3, #1
 800c218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c21a:	4b05      	ldr	r3, [pc, #20]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	4a04      	ldr	r2, [pc, #16]	; (800c230 <HAL_RCC_OscConfig+0x76c>)
 800c220:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c224:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c226:	f7fa ff59 	bl	80070dc <HAL_GetTick>
 800c22a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c22c:	e011      	b.n	800c252 <HAL_RCC_OscConfig+0x78e>
 800c22e:	bf00      	nop
 800c230:	58024400 	.word	0x58024400
 800c234:	58024800 	.word	0x58024800
 800c238:	fffffc0c 	.word	0xfffffc0c
 800c23c:	ffff0007 	.word	0xffff0007
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c240:	f7fa ff4c 	bl	80070dc <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b02      	cmp	r3, #2
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e05f      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c252:	4b32      	ldr	r3, [pc, #200]	; (800c31c <HAL_RCC_OscConfig+0x858>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d0f0      	beq.n	800c240 <HAL_RCC_OscConfig+0x77c>
 800c25e:	e057      	b.n	800c310 <HAL_RCC_OscConfig+0x84c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c260:	4b2e      	ldr	r3, [pc, #184]	; (800c31c <HAL_RCC_OscConfig+0x858>)
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a2d      	ldr	r2, [pc, #180]	; (800c31c <HAL_RCC_OscConfig+0x858>)
 800c266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c26a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c26c:	f7fa ff36 	bl	80070dc <HAL_GetTick>
 800c270:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c272:	e008      	b.n	800c286 <HAL_RCC_OscConfig+0x7c2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c274:	f7fa ff32 	bl	80070dc <HAL_GetTick>
 800c278:	4602      	mov	r2, r0
 800c27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27c:	1ad3      	subs	r3, r2, r3
 800c27e:	2b02      	cmp	r3, #2
 800c280:	d901      	bls.n	800c286 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e045      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c286:	4b25      	ldr	r3, [pc, #148]	; (800c31c <HAL_RCC_OscConfig+0x858>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1f0      	bne.n	800c274 <HAL_RCC_OscConfig+0x7b0>
 800c292:	e03d      	b.n	800c310 <HAL_RCC_OscConfig+0x84c>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c294:	4b21      	ldr	r3, [pc, #132]	; (800c31c <HAL_RCC_OscConfig+0x858>)
 800c296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c298:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c29a:	4b20      	ldr	r3, [pc, #128]	; (800c31c <HAL_RCC_OscConfig+0x858>)
 800c29c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c29e:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a4:	2b01      	cmp	r3, #1
 800c2a6:	d031      	beq.n	800c30c <HAL_RCC_OscConfig+0x848>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2a8:	693b      	ldr	r3, [r7, #16]
 800c2aa:	f003 0203 	and.w	r2, r3, #3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c2b2:	429a      	cmp	r2, r3
 800c2b4:	d12a      	bne.n	800c30c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	091b      	lsrs	r3, r3, #4
 800c2ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c2c2:	429a      	cmp	r2, r3
 800c2c4:	d122      	bne.n	800c30c <HAL_RCC_OscConfig+0x848>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c2cc:	687b      	ldr	r3, [r7, #4]
 800c2ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c2d0:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c2d2:	429a      	cmp	r2, r3
 800c2d4:	d11a      	bne.n	800c30c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c2d6:	68fb      	ldr	r3, [r7, #12]
 800c2d8:	0a5b      	lsrs	r3, r3, #9
 800c2da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c2e2:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c2e4:	429a      	cmp	r2, r3
 800c2e6:	d111      	bne.n	800c30c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	0c1b      	lsrs	r3, r3, #16
 800c2ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c2f4:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d108      	bne.n	800c30c <HAL_RCC_OscConfig+0x848>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	0e1b      	lsrs	r3, r3, #24
 800c2fe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c306:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c308:	429a      	cmp	r2, r3
 800c30a:	d001      	beq.n	800c310 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c30c:	2301      	movs	r3, #1
 800c30e:	e000      	b.n	800c312 <HAL_RCC_OscConfig+0x84e>
      }
    }
  }
  return HAL_OK;
 800c310:	2300      	movs	r3, #0
}
 800c312:	4618      	mov	r0, r3
 800c314:	3730      	adds	r7, #48	; 0x30
 800c316:	46bd      	mov	sp, r7
 800c318:	bd80      	pop	{r7, pc}
 800c31a:	bf00      	nop
 800c31c:	58024400 	.word	0x58024400

0800c320 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d101      	bne.n	800c334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c330:	2301      	movs	r3, #1
 800c332:	e19c      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c334:	4b8a      	ldr	r3, [pc, #552]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 030f 	and.w	r3, r3, #15
 800c33c:	683a      	ldr	r2, [r7, #0]
 800c33e:	429a      	cmp	r2, r3
 800c340:	d910      	bls.n	800c364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c342:	4b87      	ldr	r3, [pc, #540]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	f023 020f 	bic.w	r2, r3, #15
 800c34a:	4985      	ldr	r1, [pc, #532]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	4313      	orrs	r3, r2
 800c350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c352:	4b83      	ldr	r3, [pc, #524]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	f003 030f 	and.w	r3, r3, #15
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	429a      	cmp	r2, r3
 800c35e:	d001      	beq.n	800c364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c360:	2301      	movs	r3, #1
 800c362:	e184      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c364:	687b      	ldr	r3, [r7, #4]
 800c366:	681b      	ldr	r3, [r3, #0]
 800c368:	f003 0304 	and.w	r3, r3, #4
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d010      	beq.n	800c392 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	691a      	ldr	r2, [r3, #16]
 800c374:	4b7b      	ldr	r3, [pc, #492]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c376:	699b      	ldr	r3, [r3, #24]
 800c378:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d908      	bls.n	800c392 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c380:	4b78      	ldr	r3, [pc, #480]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c382:	699b      	ldr	r3, [r3, #24]
 800c384:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	691b      	ldr	r3, [r3, #16]
 800c38c:	4975      	ldr	r1, [pc, #468]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c38e:	4313      	orrs	r3, r2
 800c390:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	f003 0308 	and.w	r3, r3, #8
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d010      	beq.n	800c3c0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	695a      	ldr	r2, [r3, #20]
 800c3a2:	4b70      	ldr	r3, [pc, #448]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c3a4:	69db      	ldr	r3, [r3, #28]
 800c3a6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c3aa:	429a      	cmp	r2, r3
 800c3ac:	d908      	bls.n	800c3c0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c3ae:	4b6d      	ldr	r3, [pc, #436]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c3b0:	69db      	ldr	r3, [r3, #28]
 800c3b2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	695b      	ldr	r3, [r3, #20]
 800c3ba:	496a      	ldr	r1, [pc, #424]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c3bc:	4313      	orrs	r3, r2
 800c3be:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	f003 0310 	and.w	r3, r3, #16
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d010      	beq.n	800c3ee <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	699a      	ldr	r2, [r3, #24]
 800c3d0:	4b64      	ldr	r3, [pc, #400]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c3d2:	69db      	ldr	r3, [r3, #28]
 800c3d4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c3d8:	429a      	cmp	r2, r3
 800c3da:	d908      	bls.n	800c3ee <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c3dc:	4b61      	ldr	r3, [pc, #388]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c3de:	69db      	ldr	r3, [r3, #28]
 800c3e0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	699b      	ldr	r3, [r3, #24]
 800c3e8:	495e      	ldr	r1, [pc, #376]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c3ea:	4313      	orrs	r3, r2
 800c3ec:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	f003 0320 	and.w	r3, r3, #32
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d010      	beq.n	800c41c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c3fa:	687b      	ldr	r3, [r7, #4]
 800c3fc:	69da      	ldr	r2, [r3, #28]
 800c3fe:	4b59      	ldr	r3, [pc, #356]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c400:	6a1b      	ldr	r3, [r3, #32]
 800c402:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c406:	429a      	cmp	r2, r3
 800c408:	d908      	bls.n	800c41c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c40a:	4b56      	ldr	r3, [pc, #344]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c40c:	6a1b      	ldr	r3, [r3, #32]
 800c40e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	69db      	ldr	r3, [r3, #28]
 800c416:	4953      	ldr	r1, [pc, #332]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c418:	4313      	orrs	r3, r2
 800c41a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c41c:	687b      	ldr	r3, [r7, #4]
 800c41e:	681b      	ldr	r3, [r3, #0]
 800c420:	f003 0302 	and.w	r3, r3, #2
 800c424:	2b00      	cmp	r3, #0
 800c426:	d010      	beq.n	800c44a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	4b4d      	ldr	r3, [pc, #308]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c42e:	699b      	ldr	r3, [r3, #24]
 800c430:	f003 030f 	and.w	r3, r3, #15
 800c434:	429a      	cmp	r2, r3
 800c436:	d908      	bls.n	800c44a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c438:	4b4a      	ldr	r3, [pc, #296]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c43a:	699b      	ldr	r3, [r3, #24]
 800c43c:	f023 020f 	bic.w	r2, r3, #15
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	68db      	ldr	r3, [r3, #12]
 800c444:	4947      	ldr	r1, [pc, #284]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c446:	4313      	orrs	r3, r2
 800c448:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	681b      	ldr	r3, [r3, #0]
 800c44e:	f003 0301 	and.w	r3, r3, #1
 800c452:	2b00      	cmp	r3, #0
 800c454:	d055      	beq.n	800c502 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c456:	4b43      	ldr	r3, [pc, #268]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c458:	699b      	ldr	r3, [r3, #24]
 800c45a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800c45e:	687b      	ldr	r3, [r7, #4]
 800c460:	689b      	ldr	r3, [r3, #8]
 800c462:	4940      	ldr	r1, [pc, #256]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c464:	4313      	orrs	r3, r2
 800c466:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	685b      	ldr	r3, [r3, #4]
 800c46c:	2b02      	cmp	r3, #2
 800c46e:	d107      	bne.n	800c480 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c470:	4b3c      	ldr	r3, [pc, #240]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c472:	681b      	ldr	r3, [r3, #0]
 800c474:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c478:	2b00      	cmp	r3, #0
 800c47a:	d121      	bne.n	800c4c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c47c:	2301      	movs	r3, #1
 800c47e:	e0f6      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	685b      	ldr	r3, [r3, #4]
 800c484:	2b03      	cmp	r3, #3
 800c486:	d107      	bne.n	800c498 <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c488:	4b36      	ldr	r3, [pc, #216]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c490:	2b00      	cmp	r3, #0
 800c492:	d115      	bne.n	800c4c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c494:	2301      	movs	r3, #1
 800c496:	e0ea      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	685b      	ldr	r3, [r3, #4]
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d107      	bne.n	800c4b0 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4a0:	4b30      	ldr	r3, [pc, #192]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4a8:	2b00      	cmp	r3, #0
 800c4aa:	d109      	bne.n	800c4c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c4ac:	2301      	movs	r3, #1
 800c4ae:	e0de      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4b0:	4b2c      	ldr	r3, [pc, #176]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f003 0304 	and.w	r3, r3, #4
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d101      	bne.n	800c4c0 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 800c4bc:	2301      	movs	r3, #1
 800c4be:	e0d6      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c4c0:	4b28      	ldr	r3, [pc, #160]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c4c2:	691b      	ldr	r3, [r3, #16]
 800c4c4:	f023 0207 	bic.w	r2, r3, #7
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	685b      	ldr	r3, [r3, #4]
 800c4cc:	4925      	ldr	r1, [pc, #148]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c4d2:	f7fa fe03 	bl	80070dc <HAL_GetTick>
 800c4d6:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4d8:	e00a      	b.n	800c4f0 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c4da:	f7fa fdff 	bl	80070dc <HAL_GetTick>
 800c4de:	4602      	mov	r2, r0
 800c4e0:	697b      	ldr	r3, [r7, #20]
 800c4e2:	1ad3      	subs	r3, r2, r3
 800c4e4:	f241 3288 	movw	r2, #5000	; 0x1388
 800c4e8:	4293      	cmp	r3, r2
 800c4ea:	d901      	bls.n	800c4f0 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800c4ec:	2303      	movs	r3, #3
 800c4ee:	e0be      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c4f0:	4b1c      	ldr	r3, [pc, #112]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c4f2:	691b      	ldr	r3, [r3, #16]
 800c4f4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	685b      	ldr	r3, [r3, #4]
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	429a      	cmp	r2, r3
 800c500:	d1eb      	bne.n	800c4da <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	f003 0302 	and.w	r3, r3, #2
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d010      	beq.n	800c530 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	68da      	ldr	r2, [r3, #12]
 800c512:	4b14      	ldr	r3, [pc, #80]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c514:	699b      	ldr	r3, [r3, #24]
 800c516:	f003 030f 	and.w	r3, r3, #15
 800c51a:	429a      	cmp	r2, r3
 800c51c:	d208      	bcs.n	800c530 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c51e:	4b11      	ldr	r3, [pc, #68]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c520:	699b      	ldr	r3, [r3, #24]
 800c522:	f023 020f 	bic.w	r2, r3, #15
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	68db      	ldr	r3, [r3, #12]
 800c52a:	490e      	ldr	r1, [pc, #56]	; (800c564 <HAL_RCC_ClockConfig+0x244>)
 800c52c:	4313      	orrs	r3, r2
 800c52e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c530:	4b0b      	ldr	r3, [pc, #44]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	f003 030f 	and.w	r3, r3, #15
 800c538:	683a      	ldr	r2, [r7, #0]
 800c53a:	429a      	cmp	r2, r3
 800c53c:	d214      	bcs.n	800c568 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c53e:	4b08      	ldr	r3, [pc, #32]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f023 020f 	bic.w	r2, r3, #15
 800c546:	4906      	ldr	r1, [pc, #24]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c548:	683b      	ldr	r3, [r7, #0]
 800c54a:	4313      	orrs	r3, r2
 800c54c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c54e:	4b04      	ldr	r3, [pc, #16]	; (800c560 <HAL_RCC_ClockConfig+0x240>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f003 030f 	and.w	r3, r3, #15
 800c556:	683a      	ldr	r2, [r7, #0]
 800c558:	429a      	cmp	r2, r3
 800c55a:	d005      	beq.n	800c568 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c55c:	2301      	movs	r3, #1
 800c55e:	e086      	b.n	800c66e <HAL_RCC_ClockConfig+0x34e>
 800c560:	52002000 	.word	0x52002000
 800c564:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f003 0304 	and.w	r3, r3, #4
 800c570:	2b00      	cmp	r3, #0
 800c572:	d010      	beq.n	800c596 <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	691a      	ldr	r2, [r3, #16]
 800c578:	4b3f      	ldr	r3, [pc, #252]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c57a:	699b      	ldr	r3, [r3, #24]
 800c57c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c580:	429a      	cmp	r2, r3
 800c582:	d208      	bcs.n	800c596 <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c584:	4b3c      	ldr	r3, [pc, #240]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c586:	699b      	ldr	r3, [r3, #24]
 800c588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	691b      	ldr	r3, [r3, #16]
 800c590:	4939      	ldr	r1, [pc, #228]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c592:	4313      	orrs	r3, r2
 800c594:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	681b      	ldr	r3, [r3, #0]
 800c59a:	f003 0308 	and.w	r3, r3, #8
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d010      	beq.n	800c5c4 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	695a      	ldr	r2, [r3, #20]
 800c5a6:	4b34      	ldr	r3, [pc, #208]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c5a8:	69db      	ldr	r3, [r3, #28]
 800c5aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c5ae:	429a      	cmp	r2, r3
 800c5b0:	d208      	bcs.n	800c5c4 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c5b2:	4b31      	ldr	r3, [pc, #196]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c5b4:	69db      	ldr	r3, [r3, #28]
 800c5b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	695b      	ldr	r3, [r3, #20]
 800c5be:	492e      	ldr	r1, [pc, #184]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c5c0:	4313      	orrs	r3, r2
 800c5c2:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	f003 0310 	and.w	r3, r3, #16
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d010      	beq.n	800c5f2 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	699a      	ldr	r2, [r3, #24]
 800c5d4:	4b28      	ldr	r3, [pc, #160]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c5d6:	69db      	ldr	r3, [r3, #28]
 800c5d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c5dc:	429a      	cmp	r2, r3
 800c5de:	d208      	bcs.n	800c5f2 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c5e0:	4b25      	ldr	r3, [pc, #148]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c5e2:	69db      	ldr	r3, [r3, #28]
 800c5e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800c5e8:	687b      	ldr	r3, [r7, #4]
 800c5ea:	699b      	ldr	r3, [r3, #24]
 800c5ec:	4922      	ldr	r1, [pc, #136]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c5ee:	4313      	orrs	r3, r2
 800c5f0:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f003 0320 	and.w	r3, r3, #32
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d010      	beq.n	800c620 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	69da      	ldr	r2, [r3, #28]
 800c602:	4b1d      	ldr	r3, [pc, #116]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c604:	6a1b      	ldr	r3, [r3, #32]
 800c606:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800c60a:	429a      	cmp	r2, r3
 800c60c:	d208      	bcs.n	800c620 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800c60e:	4b1a      	ldr	r3, [pc, #104]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c610:	6a1b      	ldr	r3, [r3, #32]
 800c612:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800c616:	687b      	ldr	r3, [r7, #4]
 800c618:	69db      	ldr	r3, [r3, #28]
 800c61a:	4917      	ldr	r1, [pc, #92]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c61c:	4313      	orrs	r3, r2
 800c61e:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c620:	f000 f834 	bl	800c68c <HAL_RCC_GetSysClockFreq>
 800c624:	4602      	mov	r2, r0
 800c626:	4b14      	ldr	r3, [pc, #80]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c628:	699b      	ldr	r3, [r3, #24]
 800c62a:	0a1b      	lsrs	r3, r3, #8
 800c62c:	f003 030f 	and.w	r3, r3, #15
 800c630:	4912      	ldr	r1, [pc, #72]	; (800c67c <HAL_RCC_ClockConfig+0x35c>)
 800c632:	5ccb      	ldrb	r3, [r1, r3]
 800c634:	f003 031f 	and.w	r3, r3, #31
 800c638:	fa22 f303 	lsr.w	r3, r2, r3
 800c63c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c63e:	4b0e      	ldr	r3, [pc, #56]	; (800c678 <HAL_RCC_ClockConfig+0x358>)
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	f003 030f 	and.w	r3, r3, #15
 800c646:	4a0d      	ldr	r2, [pc, #52]	; (800c67c <HAL_RCC_ClockConfig+0x35c>)
 800c648:	5cd3      	ldrb	r3, [r2, r3]
 800c64a:	f003 031f 	and.w	r3, r3, #31
 800c64e:	693a      	ldr	r2, [r7, #16]
 800c650:	fa22 f303 	lsr.w	r3, r2, r3
 800c654:	4a0a      	ldr	r2, [pc, #40]	; (800c680 <HAL_RCC_ClockConfig+0x360>)
 800c656:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c658:	4a0a      	ldr	r2, [pc, #40]	; (800c684 <HAL_RCC_ClockConfig+0x364>)
 800c65a:	693b      	ldr	r3, [r7, #16]
 800c65c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 800c65e:	4b0a      	ldr	r3, [pc, #40]	; (800c688 <HAL_RCC_ClockConfig+0x368>)
 800c660:	681b      	ldr	r3, [r3, #0]
 800c662:	4618      	mov	r0, r3
 800c664:	f7fa fcf0 	bl	8007048 <HAL_InitTick>
 800c668:	4603      	mov	r3, r0
 800c66a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800c66e:	4618      	mov	r0, r3
 800c670:	3718      	adds	r7, #24
 800c672:	46bd      	mov	sp, r7
 800c674:	bd80      	pop	{r7, pc}
 800c676:	bf00      	nop
 800c678:	58024400 	.word	0x58024400
 800c67c:	08012bc8 	.word	0x08012bc8
 800c680:	24000004 	.word	0x24000004
 800c684:	24000000 	.word	0x24000000
 800c688:	24000020 	.word	0x24000020

0800c68c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b089      	sub	sp, #36	; 0x24
 800c690:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c692:	4bb3      	ldr	r3, [pc, #716]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c694:	691b      	ldr	r3, [r3, #16]
 800c696:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c69a:	2b18      	cmp	r3, #24
 800c69c:	f200 8155 	bhi.w	800c94a <HAL_RCC_GetSysClockFreq+0x2be>
 800c6a0:	a201      	add	r2, pc, #4	; (adr r2, 800c6a8 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c6a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6a6:	bf00      	nop
 800c6a8:	0800c70d 	.word	0x0800c70d
 800c6ac:	0800c94b 	.word	0x0800c94b
 800c6b0:	0800c94b 	.word	0x0800c94b
 800c6b4:	0800c94b 	.word	0x0800c94b
 800c6b8:	0800c94b 	.word	0x0800c94b
 800c6bc:	0800c94b 	.word	0x0800c94b
 800c6c0:	0800c94b 	.word	0x0800c94b
 800c6c4:	0800c94b 	.word	0x0800c94b
 800c6c8:	0800c733 	.word	0x0800c733
 800c6cc:	0800c94b 	.word	0x0800c94b
 800c6d0:	0800c94b 	.word	0x0800c94b
 800c6d4:	0800c94b 	.word	0x0800c94b
 800c6d8:	0800c94b 	.word	0x0800c94b
 800c6dc:	0800c94b 	.word	0x0800c94b
 800c6e0:	0800c94b 	.word	0x0800c94b
 800c6e4:	0800c94b 	.word	0x0800c94b
 800c6e8:	0800c739 	.word	0x0800c739
 800c6ec:	0800c94b 	.word	0x0800c94b
 800c6f0:	0800c94b 	.word	0x0800c94b
 800c6f4:	0800c94b 	.word	0x0800c94b
 800c6f8:	0800c94b 	.word	0x0800c94b
 800c6fc:	0800c94b 	.word	0x0800c94b
 800c700:	0800c94b 	.word	0x0800c94b
 800c704:	0800c94b 	.word	0x0800c94b
 800c708:	0800c73f 	.word	0x0800c73f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c70c:	4b94      	ldr	r3, [pc, #592]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 0320 	and.w	r3, r3, #32
 800c714:	2b00      	cmp	r3, #0
 800c716:	d009      	beq.n	800c72c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c718:	4b91      	ldr	r3, [pc, #580]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	08db      	lsrs	r3, r3, #3
 800c71e:	f003 0303 	and.w	r3, r3, #3
 800c722:	4a90      	ldr	r2, [pc, #576]	; (800c964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c724:	fa22 f303 	lsr.w	r3, r2, r3
 800c728:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 800c72a:	e111      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c72c:	4b8d      	ldr	r3, [pc, #564]	; (800c964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c72e:	61bb      	str	r3, [r7, #24]
    break;
 800c730:	e10e      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 800c732:	4b8d      	ldr	r3, [pc, #564]	; (800c968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c734:	61bb      	str	r3, [r7, #24]
    break;
 800c736:	e10b      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 800c738:	4b8c      	ldr	r3, [pc, #560]	; (800c96c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c73a:	61bb      	str	r3, [r7, #24]
    break;
 800c73c:	e108      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c73e:	4b88      	ldr	r3, [pc, #544]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c742:	f003 0303 	and.w	r3, r3, #3
 800c746:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 800c748:	4b85      	ldr	r3, [pc, #532]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c74a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c74c:	091b      	lsrs	r3, r3, #4
 800c74e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c752:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c754:	4b82      	ldr	r3, [pc, #520]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c758:	f003 0301 	and.w	r3, r3, #1
 800c75c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 800c75e:	4b80      	ldr	r3, [pc, #512]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c762:	08db      	lsrs	r3, r3, #3
 800c764:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c768:	68fa      	ldr	r2, [r7, #12]
 800c76a:	fb02 f303 	mul.w	r3, r2, r3
 800c76e:	ee07 3a90 	vmov	s15, r3
 800c772:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c776:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 800c77a:	693b      	ldr	r3, [r7, #16]
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	f000 80e1 	beq.w	800c944 <HAL_RCC_GetSysClockFreq+0x2b8>
 800c782:	697b      	ldr	r3, [r7, #20]
 800c784:	2b02      	cmp	r3, #2
 800c786:	f000 8083 	beq.w	800c890 <HAL_RCC_GetSysClockFreq+0x204>
 800c78a:	697b      	ldr	r3, [r7, #20]
 800c78c:	2b02      	cmp	r3, #2
 800c78e:	f200 80a1 	bhi.w	800c8d4 <HAL_RCC_GetSysClockFreq+0x248>
 800c792:	697b      	ldr	r3, [r7, #20]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d003      	beq.n	800c7a0 <HAL_RCC_GetSysClockFreq+0x114>
 800c798:	697b      	ldr	r3, [r7, #20]
 800c79a:	2b01      	cmp	r3, #1
 800c79c:	d056      	beq.n	800c84c <HAL_RCC_GetSysClockFreq+0x1c0>
 800c79e:	e099      	b.n	800c8d4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c7a0:	4b6f      	ldr	r3, [pc, #444]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	f003 0320 	and.w	r3, r3, #32
 800c7a8:	2b00      	cmp	r3, #0
 800c7aa:	d02d      	beq.n	800c808 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800c7ac:	4b6c      	ldr	r3, [pc, #432]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	08db      	lsrs	r3, r3, #3
 800c7b2:	f003 0303 	and.w	r3, r3, #3
 800c7b6:	4a6b      	ldr	r2, [pc, #428]	; (800c964 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c7b8:	fa22 f303 	lsr.w	r3, r2, r3
 800c7bc:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	ee07 3a90 	vmov	s15, r3
 800c7c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	ee07 3a90 	vmov	s15, r3
 800c7ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c7d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c7d6:	4b62      	ldr	r3, [pc, #392]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c7d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c7de:	ee07 3a90 	vmov	s15, r3
 800c7e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c7e6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c7ea:	eddf 5a61 	vldr	s11, [pc, #388]	; 800c970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c7ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c7f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c7f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c7fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c7fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c802:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 800c806:	e087      	b.n	800c918 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c808:	693b      	ldr	r3, [r7, #16]
 800c80a:	ee07 3a90 	vmov	s15, r3
 800c80e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c812:	eddf 6a58 	vldr	s13, [pc, #352]	; 800c974 <HAL_RCC_GetSysClockFreq+0x2e8>
 800c816:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c81a:	4b51      	ldr	r3, [pc, #324]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c81c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c81e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c822:	ee07 3a90 	vmov	s15, r3
 800c826:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c82a:	ed97 6a02 	vldr	s12, [r7, #8]
 800c82e:	eddf 5a50 	vldr	s11, [pc, #320]	; 800c970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c832:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c836:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c83a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c83e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c842:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c846:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c84a:	e065      	b.n	800c918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c84c:	693b      	ldr	r3, [r7, #16]
 800c84e:	ee07 3a90 	vmov	s15, r3
 800c852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c856:	eddf 6a48 	vldr	s13, [pc, #288]	; 800c978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c85a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c85e:	4b40      	ldr	r3, [pc, #256]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c866:	ee07 3a90 	vmov	s15, r3
 800c86a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c86e:	ed97 6a02 	vldr	s12, [r7, #8]
 800c872:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800c970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c87a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c87e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c886:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c88a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c88e:	e043      	b.n	800c918 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c890:	693b      	ldr	r3, [r7, #16]
 800c892:	ee07 3a90 	vmov	s15, r3
 800c896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c89a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800c97c <HAL_RCC_GetSysClockFreq+0x2f0>
 800c89e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8a2:	4b2f      	ldr	r3, [pc, #188]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8aa:	ee07 3a90 	vmov	s15, r3
 800c8ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8b2:	ed97 6a02 	vldr	s12, [r7, #8]
 800c8b6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800c970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c8ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c8be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c8c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c8c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c8ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c8ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c8d2:	e021      	b.n	800c918 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	ee07 3a90 	vmov	s15, r3
 800c8da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c8de:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c978 <HAL_RCC_GetSysClockFreq+0x2ec>
 800c8e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c8e6:	4b1e      	ldr	r3, [pc, #120]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c8ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c8ee:	ee07 3a90 	vmov	s15, r3
 800c8f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c8f6:	ed97 6a02 	vldr	s12, [r7, #8]
 800c8fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800c970 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c8fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c90a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c912:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800c916:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 800c918:	4b11      	ldr	r3, [pc, #68]	; (800c960 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c91a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c91c:	0a5b      	lsrs	r3, r3, #9
 800c91e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c922:	3301      	adds	r3, #1
 800c924:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	ee07 3a90 	vmov	s15, r3
 800c92c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800c930:	edd7 6a07 	vldr	s13, [r7, #28]
 800c934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800c938:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800c93c:	ee17 3a90 	vmov	r3, s15
 800c940:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 800c942:	e005      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 800c944:	2300      	movs	r3, #0
 800c946:	61bb      	str	r3, [r7, #24]
    break;
 800c948:	e002      	b.n	800c950 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 800c94a:	4b07      	ldr	r3, [pc, #28]	; (800c968 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c94c:	61bb      	str	r3, [r7, #24]
    break;
 800c94e:	bf00      	nop
  }

  return sysclockfreq;
 800c950:	69bb      	ldr	r3, [r7, #24]
}
 800c952:	4618      	mov	r0, r3
 800c954:	3724      	adds	r7, #36	; 0x24
 800c956:	46bd      	mov	sp, r7
 800c958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c95c:	4770      	bx	lr
 800c95e:	bf00      	nop
 800c960:	58024400 	.word	0x58024400
 800c964:	03d09000 	.word	0x03d09000
 800c968:	003d0900 	.word	0x003d0900
 800c96c:	007a1200 	.word	0x007a1200
 800c970:	46000000 	.word	0x46000000
 800c974:	4c742400 	.word	0x4c742400
 800c978:	4a742400 	.word	0x4a742400
 800c97c:	4af42400 	.word	0x4af42400

0800c980 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c980:	b580      	push	{r7, lr}
 800c982:	b082      	sub	sp, #8
 800c984:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800c986:	f7ff fe81 	bl	800c68c <HAL_RCC_GetSysClockFreq>
 800c98a:	4602      	mov	r2, r0
 800c98c:	4b10      	ldr	r3, [pc, #64]	; (800c9d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c98e:	699b      	ldr	r3, [r3, #24]
 800c990:	0a1b      	lsrs	r3, r3, #8
 800c992:	f003 030f 	and.w	r3, r3, #15
 800c996:	490f      	ldr	r1, [pc, #60]	; (800c9d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c998:	5ccb      	ldrb	r3, [r1, r3]
 800c99a:	f003 031f 	and.w	r3, r3, #31
 800c99e:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c9a4:	4b0a      	ldr	r3, [pc, #40]	; (800c9d0 <HAL_RCC_GetHCLKFreq+0x50>)
 800c9a6:	699b      	ldr	r3, [r3, #24]
 800c9a8:	f003 030f 	and.w	r3, r3, #15
 800c9ac:	4a09      	ldr	r2, [pc, #36]	; (800c9d4 <HAL_RCC_GetHCLKFreq+0x54>)
 800c9ae:	5cd3      	ldrb	r3, [r2, r3]
 800c9b0:	f003 031f 	and.w	r3, r3, #31
 800c9b4:	687a      	ldr	r2, [r7, #4]
 800c9b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c9ba:	4a07      	ldr	r2, [pc, #28]	; (800c9d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c9bc:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c9be:	4a07      	ldr	r2, [pc, #28]	; (800c9dc <HAL_RCC_GetHCLKFreq+0x5c>)
 800c9c0:	687b      	ldr	r3, [r7, #4]
 800c9c2:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800c9c4:	4b04      	ldr	r3, [pc, #16]	; (800c9d8 <HAL_RCC_GetHCLKFreq+0x58>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
}
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3708      	adds	r7, #8
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	58024400 	.word	0x58024400
 800c9d4:	08012bc8 	.word	0x08012bc8
 800c9d8:	24000004 	.word	0x24000004
 800c9dc:	24000000 	.word	0x24000000

0800c9e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800c9e4:	f7ff ffcc 	bl	800c980 <HAL_RCC_GetHCLKFreq>
 800c9e8:	4602      	mov	r2, r0
 800c9ea:	4b06      	ldr	r3, [pc, #24]	; (800ca04 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	091b      	lsrs	r3, r3, #4
 800c9f0:	f003 0307 	and.w	r3, r3, #7
 800c9f4:	4904      	ldr	r1, [pc, #16]	; (800ca08 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c9f6:	5ccb      	ldrb	r3, [r1, r3]
 800c9f8:	f003 031f 	and.w	r3, r3, #31
 800c9fc:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ca00:	4618      	mov	r0, r3
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	58024400 	.word	0x58024400
 800ca08:	08012bc8 	.word	0x08012bc8

0800ca0c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800ca10:	f7ff ffb6 	bl	800c980 <HAL_RCC_GetHCLKFreq>
 800ca14:	4602      	mov	r2, r0
 800ca16:	4b06      	ldr	r3, [pc, #24]	; (800ca30 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ca18:	69db      	ldr	r3, [r3, #28]
 800ca1a:	0a1b      	lsrs	r3, r3, #8
 800ca1c:	f003 0307 	and.w	r3, r3, #7
 800ca20:	4904      	ldr	r1, [pc, #16]	; (800ca34 <HAL_RCC_GetPCLK2Freq+0x28>)
 800ca22:	5ccb      	ldrb	r3, [r1, r3]
 800ca24:	f003 031f 	and.w	r3, r3, #31
 800ca28:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800ca2c:	4618      	mov	r0, r3
 800ca2e:	bd80      	pop	{r7, pc}
 800ca30:	58024400 	.word	0x58024400
 800ca34:	08012bc8 	.word	0x08012bc8

0800ca38 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ca38:	b580      	push	{r7, lr}
 800ca3a:	b086      	sub	sp, #24
 800ca3c:	af00      	add	r7, sp, #0
 800ca3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ca40:	2300      	movs	r3, #0
 800ca42:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ca44:	2300      	movs	r3, #0
 800ca46:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	681b      	ldr	r3, [r3, #0]
 800ca4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d03f      	beq.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ca58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca5c:	d02a      	beq.n	800cab4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800ca5e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ca62:	d824      	bhi.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ca64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca68:	d018      	beq.n	800ca9c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ca6a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ca6e:	d81e      	bhi.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x76>
 800ca70:	2b00      	cmp	r3, #0
 800ca72:	d003      	beq.n	800ca7c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800ca74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ca78:	d007      	beq.n	800ca8a <HAL_RCCEx_PeriphCLKConfig+0x52>
 800ca7a:	e018      	b.n	800caae <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ca7c:	4ba3      	ldr	r3, [pc, #652]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca80:	4aa2      	ldr	r2, [pc, #648]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ca82:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ca86:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ca88:	e015      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	3304      	adds	r3, #4
 800ca8e:	2102      	movs	r1, #2
 800ca90:	4618      	mov	r0, r3
 800ca92:	f001 f9d5 	bl	800de40 <RCCEx_PLL2_Config>
 800ca96:	4603      	mov	r3, r0
 800ca98:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800ca9a:	e00c      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	3324      	adds	r3, #36	; 0x24
 800caa0:	2102      	movs	r1, #2
 800caa2:	4618      	mov	r0, r3
 800caa4:	f001 fa7e 	bl	800dfa4 <RCCEx_PLL3_Config>
 800caa8:	4603      	mov	r3, r0
 800caaa:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 800caac:	e003      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800caae:	2301      	movs	r3, #1
 800cab0:	75fb      	strb	r3, [r7, #23]
      break;
 800cab2:	e000      	b.n	800cab6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 800cab4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cab6:	7dfb      	ldrb	r3, [r7, #23]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d109      	bne.n	800cad0 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800cabc:	4b93      	ldr	r3, [pc, #588]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cabe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cac0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cac8:	4990      	ldr	r1, [pc, #576]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800caca:	4313      	orrs	r3, r2
 800cacc:	650b      	str	r3, [r1, #80]	; 0x50
 800cace:	e001      	b.n	800cad4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cad0:	7dfb      	ldrb	r3, [r7, #23]
 800cad2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d03d      	beq.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cae4:	2b04      	cmp	r3, #4
 800cae6:	d826      	bhi.n	800cb36 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 800cae8:	a201      	add	r2, pc, #4	; (adr r2, 800caf0 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 800caea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800caee:	bf00      	nop
 800caf0:	0800cb05 	.word	0x0800cb05
 800caf4:	0800cb13 	.word	0x0800cb13
 800caf8:	0800cb25 	.word	0x0800cb25
 800cafc:	0800cb3d 	.word	0x0800cb3d
 800cb00:	0800cb3d 	.word	0x0800cb3d
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb04:	4b81      	ldr	r3, [pc, #516]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb08:	4a80      	ldr	r2, [pc, #512]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb0e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cb10:	e015      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	3304      	adds	r3, #4
 800cb16:	2100      	movs	r1, #0
 800cb18:	4618      	mov	r0, r3
 800cb1a:	f001 f991 	bl	800de40 <RCCEx_PLL2_Config>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cb22:	e00c      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	3324      	adds	r3, #36	; 0x24
 800cb28:	2100      	movs	r1, #0
 800cb2a:	4618      	mov	r0, r3
 800cb2c:	f001 fa3a 	bl	800dfa4 <RCCEx_PLL3_Config>
 800cb30:	4603      	mov	r3, r0
 800cb32:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cb34:	e003      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cb36:	2301      	movs	r3, #1
 800cb38:	75fb      	strb	r3, [r7, #23]
      break;
 800cb3a:	e000      	b.n	800cb3e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 800cb3c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cb3e:	7dfb      	ldrb	r3, [r7, #23]
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d109      	bne.n	800cb58 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cb44:	4b71      	ldr	r3, [pc, #452]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb48:	f023 0207 	bic.w	r2, r3, #7
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb50:	496e      	ldr	r1, [pc, #440]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb52:	4313      	orrs	r3, r2
 800cb54:	650b      	str	r3, [r1, #80]	; 0x50
 800cb56:	e001      	b.n	800cb5c <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cb58:	7dfb      	ldrb	r3, [r7, #23]
 800cb5a:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d042      	beq.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb70:	d02b      	beq.n	800cbca <HAL_RCCEx_PeriphCLKConfig+0x192>
 800cb72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb76:	d825      	bhi.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800cb78:	2bc0      	cmp	r3, #192	; 0xc0
 800cb7a:	d028      	beq.n	800cbce <HAL_RCCEx_PeriphCLKConfig+0x196>
 800cb7c:	2bc0      	cmp	r3, #192	; 0xc0
 800cb7e:	d821      	bhi.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800cb80:	2b80      	cmp	r3, #128	; 0x80
 800cb82:	d016      	beq.n	800cbb2 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 800cb84:	2b80      	cmp	r3, #128	; 0x80
 800cb86:	d81d      	bhi.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d002      	beq.n	800cb92 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 800cb8c:	2b40      	cmp	r3, #64	; 0x40
 800cb8e:	d007      	beq.n	800cba0 <HAL_RCCEx_PeriphCLKConfig+0x168>
 800cb90:	e018      	b.n	800cbc4 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cb92:	4b5e      	ldr	r3, [pc, #376]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb96:	4a5d      	ldr	r2, [pc, #372]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cb98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cb9c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800cb9e:	e017      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	3304      	adds	r3, #4
 800cba4:	2100      	movs	r1, #0
 800cba6:	4618      	mov	r0, r3
 800cba8:	f001 f94a 	bl	800de40 <RCCEx_PLL2_Config>
 800cbac:	4603      	mov	r3, r0
 800cbae:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800cbb0:	e00e      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	3324      	adds	r3, #36	; 0x24
 800cbb6:	2100      	movs	r1, #0
 800cbb8:	4618      	mov	r0, r3
 800cbba:	f001 f9f3 	bl	800dfa4 <RCCEx_PLL3_Config>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 800cbc2:	e005      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cbc4:	2301      	movs	r3, #1
 800cbc6:	75fb      	strb	r3, [r7, #23]
      break;
 800cbc8:	e002      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800cbca:	bf00      	nop
 800cbcc:	e000      	b.n	800cbd0 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800cbce:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cbd0:	7dfb      	ldrb	r3, [r7, #23]
 800cbd2:	2b00      	cmp	r3, #0
 800cbd4:	d109      	bne.n	800cbea <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800cbd6:	4b4d      	ldr	r3, [pc, #308]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cbd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cbda:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cbe2:	494a      	ldr	r1, [pc, #296]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cbe4:	4313      	orrs	r3, r2
 800cbe6:	650b      	str	r3, [r1, #80]	; 0x50
 800cbe8:	e001      	b.n	800cbee <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d049      	beq.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cc00:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc04:	d030      	beq.n	800cc68 <HAL_RCCEx_PeriphCLKConfig+0x230>
 800cc06:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc0a:	d82a      	bhi.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cc0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cc10:	d02c      	beq.n	800cc6c <HAL_RCCEx_PeriphCLKConfig+0x234>
 800cc12:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800cc16:	d824      	bhi.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cc18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc1c:	d018      	beq.n	800cc50 <HAL_RCCEx_PeriphCLKConfig+0x218>
 800cc1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800cc22:	d81e      	bhi.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	d003      	beq.n	800cc30 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800cc28:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800cc2c:	d007      	beq.n	800cc3e <HAL_RCCEx_PeriphCLKConfig+0x206>
 800cc2e:	e018      	b.n	800cc62 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc30:	4b36      	ldr	r3, [pc, #216]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cc32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc34:	4a35      	ldr	r2, [pc, #212]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cc36:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cc3a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cc3c:	e017      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	3304      	adds	r3, #4
 800cc42:	2100      	movs	r1, #0
 800cc44:	4618      	mov	r0, r3
 800cc46:	f001 f8fb 	bl	800de40 <RCCEx_PLL2_Config>
 800cc4a:	4603      	mov	r3, r0
 800cc4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800cc4e:	e00e      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	3324      	adds	r3, #36	; 0x24
 800cc54:	2100      	movs	r1, #0
 800cc56:	4618      	mov	r0, r3
 800cc58:	f001 f9a4 	bl	800dfa4 <RCCEx_PLL3_Config>
 800cc5c:	4603      	mov	r3, r0
 800cc5e:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cc60:	e005      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cc62:	2301      	movs	r3, #1
 800cc64:	75fb      	strb	r3, [r7, #23]
      break;
 800cc66:	e002      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800cc68:	bf00      	nop
 800cc6a:	e000      	b.n	800cc6e <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 800cc6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cc6e:	7dfb      	ldrb	r3, [r7, #23]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d10a      	bne.n	800cc8a <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cc74:	4b25      	ldr	r3, [pc, #148]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cc76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cc78:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800cc82:	4922      	ldr	r1, [pc, #136]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800cc84:	4313      	orrs	r3, r2
 800cc86:	658b      	str	r3, [r1, #88]	; 0x58
 800cc88:	e001      	b.n	800cc8e <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cc8a:	7dfb      	ldrb	r3, [r7, #23]
 800cc8c:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d04b      	beq.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800cc9a:	687b      	ldr	r3, [r7, #4]
 800cc9c:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cca0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800cca4:	d030      	beq.n	800cd08 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800cca6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800ccaa:	d82a      	bhi.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ccac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccb0:	d02e      	beq.n	800cd10 <HAL_RCCEx_PeriphCLKConfig+0x2d8>
 800ccb2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800ccb6:	d824      	bhi.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ccb8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccbc:	d018      	beq.n	800ccf0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 800ccbe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ccc2:	d81e      	bhi.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d003      	beq.n	800ccd0 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800ccc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800cccc:	d007      	beq.n	800ccde <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 800ccce:	e018      	b.n	800cd02 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ccd0:	4b0e      	ldr	r3, [pc, #56]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ccd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccd4:	4a0d      	ldr	r2, [pc, #52]	; (800cd0c <HAL_RCCEx_PeriphCLKConfig+0x2d4>)
 800ccd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ccda:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800ccdc:	e019      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3304      	adds	r3, #4
 800cce2:	2100      	movs	r1, #0
 800cce4:	4618      	mov	r0, r3
 800cce6:	f001 f8ab 	bl	800de40 <RCCEx_PLL2_Config>
 800ccea:	4603      	mov	r3, r0
 800ccec:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 800ccee:	e010      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x2da>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	3324      	adds	r3, #36	; 0x24
 800ccf4:	2100      	movs	r1, #0
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f001 f954 	bl	800dfa4 <RCCEx_PLL3_Config>
 800ccfc:	4603      	mov	r3, r0
 800ccfe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 800cd00:	e007      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 800cd02:	2301      	movs	r3, #1
 800cd04:	75fb      	strb	r3, [r7, #23]
      break;
 800cd06:	e004      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
      break;
 800cd08:	bf00      	nop
 800cd0a:	e002      	b.n	800cd12 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 800cd0c:	58024400 	.word	0x58024400
      break;
 800cd10:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd12:	7dfb      	ldrb	r3, [r7, #23]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d10a      	bne.n	800cd2e <HAL_RCCEx_PeriphCLKConfig+0x2f6>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cd18:	4b99      	ldr	r3, [pc, #612]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cd1c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800cd26:	4996      	ldr	r1, [pc, #600]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd28:	4313      	orrs	r3, r2
 800cd2a:	658b      	str	r3, [r1, #88]	; 0x58
 800cd2c:	e001      	b.n	800cd32 <HAL_RCCEx_PeriphCLKConfig+0x2fa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd2e:	7dfb      	ldrb	r3, [r7, #23]
 800cd30:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	d032      	beq.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    switch(PeriphClkInit->QspiClockSelection)
 800cd3e:	687b      	ldr	r3, [r7, #4]
 800cd40:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd42:	2b30      	cmp	r3, #48	; 0x30
 800cd44:	d01c      	beq.n	800cd80 <HAL_RCCEx_PeriphCLKConfig+0x348>
 800cd46:	2b30      	cmp	r3, #48	; 0x30
 800cd48:	d817      	bhi.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cd4a:	2b20      	cmp	r3, #32
 800cd4c:	d00c      	beq.n	800cd68 <HAL_RCCEx_PeriphCLKConfig+0x330>
 800cd4e:	2b20      	cmp	r3, #32
 800cd50:	d813      	bhi.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x342>
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d016      	beq.n	800cd84 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800cd56:	2b10      	cmp	r3, #16
 800cd58:	d10f      	bne.n	800cd7a <HAL_RCCEx_PeriphCLKConfig+0x342>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd5a:	4b89      	ldr	r3, [pc, #548]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd5e:	4a88      	ldr	r2, [pc, #544]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cd64:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800cd66:	e00e      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x34e>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	3304      	adds	r3, #4
 800cd6c:	2102      	movs	r1, #2
 800cd6e:	4618      	mov	r0, r3
 800cd70:	f001 f866 	bl	800de40 <RCCEx_PLL2_Config>
 800cd74:	4603      	mov	r3, r0
 800cd76:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800cd78:	e005      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800cd7a:	2301      	movs	r3, #1
 800cd7c:	75fb      	strb	r3, [r7, #23]
      break;
 800cd7e:	e002      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800cd80:	bf00      	nop
 800cd82:	e000      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x34e>
      break;
 800cd84:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cd86:	7dfb      	ldrb	r3, [r7, #23]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d109      	bne.n	800cda0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800cd8c:	4b7c      	ldr	r3, [pc, #496]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cd90:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800cd98:	4979      	ldr	r1, [pc, #484]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cd9a:	4313      	orrs	r3, r2
 800cd9c:	64cb      	str	r3, [r1, #76]	; 0x4c
 800cd9e:	e001      	b.n	800cda4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cda0:	7dfb      	ldrb	r3, [r7, #23]
 800cda2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cdac:	2b00      	cmp	r3, #0
 800cdae:	d047      	beq.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800cdb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdb8:	d030      	beq.n	800ce1c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800cdba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cdbe:	d82a      	bhi.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cdc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdc4:	d02c      	beq.n	800ce20 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800cdc6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800cdca:	d824      	bhi.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cdcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdd0:	d018      	beq.n	800ce04 <HAL_RCCEx_PeriphCLKConfig+0x3cc>
 800cdd2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cdd6:	d81e      	bhi.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d003      	beq.n	800cde4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
 800cddc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cde0:	d007      	beq.n	800cdf2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
 800cde2:	e018      	b.n	800ce16 <HAL_RCCEx_PeriphCLKConfig+0x3de>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cde4:	4b66      	ldr	r3, [pc, #408]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cde6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cde8:	4a65      	ldr	r2, [pc, #404]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cdea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cdee:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800cdf0:	e017      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	2100      	movs	r1, #0
 800cdf8:	4618      	mov	r0, r3
 800cdfa:	f001 f821 	bl	800de40 <RCCEx_PLL2_Config>
 800cdfe:	4603      	mov	r3, r0
 800ce00:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ce02:	e00e      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800ce04:	687b      	ldr	r3, [r7, #4]
 800ce06:	3324      	adds	r3, #36	; 0x24
 800ce08:	2100      	movs	r1, #0
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f001 f8ca 	bl	800dfa4 <RCCEx_PLL3_Config>
 800ce10:	4603      	mov	r3, r0
 800ce12:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 800ce14:	e005      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ce16:	2301      	movs	r3, #1
 800ce18:	75fb      	strb	r3, [r7, #23]
      break;
 800ce1a:	e002      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ce1c:	bf00      	nop
 800ce1e:	e000      	b.n	800ce22 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
      break;
 800ce20:	bf00      	nop
    }

    if(ret == HAL_OK)
 800ce22:	7dfb      	ldrb	r3, [r7, #23]
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d109      	bne.n	800ce3c <HAL_RCCEx_PeriphCLKConfig+0x404>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800ce28:	4b55      	ldr	r3, [pc, #340]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ce2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce2c:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ce34:	4952      	ldr	r1, [pc, #328]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ce36:	4313      	orrs	r3, r2
 800ce38:	650b      	str	r3, [r1, #80]	; 0x50
 800ce3a:	e001      	b.n	800ce40 <HAL_RCCEx_PeriphCLKConfig+0x408>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce3c:	7dfb      	ldrb	r3, [r7, #23]
 800ce3e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d049      	beq.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ce50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce54:	d02e      	beq.n	800ceb4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ce56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ce5a:	d828      	bhi.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ce5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ce60:	d02a      	beq.n	800ceb8 <HAL_RCCEx_PeriphCLKConfig+0x480>
 800ce62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ce66:	d822      	bhi.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ce68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ce6c:	d026      	beq.n	800cebc <HAL_RCCEx_PeriphCLKConfig+0x484>
 800ce6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ce72:	d81c      	bhi.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ce74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce78:	d010      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x464>
 800ce7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce7e:	d816      	bhi.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x476>
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d01d      	beq.n	800cec0 <HAL_RCCEx_PeriphCLKConfig+0x488>
 800ce84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ce88:	d111      	bne.n	800ceae <HAL_RCCEx_PeriphCLKConfig+0x476>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	3304      	adds	r3, #4
 800ce8e:	2101      	movs	r1, #1
 800ce90:	4618      	mov	r0, r3
 800ce92:	f000 ffd5 	bl	800de40 <RCCEx_PLL2_Config>
 800ce96:	4603      	mov	r3, r0
 800ce98:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ce9a:	e012      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	3324      	adds	r3, #36	; 0x24
 800cea0:	2101      	movs	r1, #1
 800cea2:	4618      	mov	r0, r3
 800cea4:	f001 f87e 	bl	800dfa4 <RCCEx_PLL3_Config>
 800cea8:	4603      	mov	r3, r0
 800ceaa:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 800ceac:	e009      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800ceae:	2301      	movs	r3, #1
 800ceb0:	75fb      	strb	r3, [r7, #23]
      break;
 800ceb2:	e006      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ceb4:	bf00      	nop
 800ceb6:	e004      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800ceb8:	bf00      	nop
 800ceba:	e002      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cebc:	bf00      	nop
 800cebe:	e000      	b.n	800cec2 <HAL_RCCEx_PeriphCLKConfig+0x48a>
      break;
 800cec0:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cec2:	7dfb      	ldrb	r3, [r7, #23]
 800cec4:	2b00      	cmp	r3, #0
 800cec6:	d109      	bne.n	800cedc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800cec8:	4b2d      	ldr	r3, [pc, #180]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ceca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cecc:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ced4:	492a      	ldr	r1, [pc, #168]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800ced6:	4313      	orrs	r3, r2
 800ced8:	650b      	str	r3, [r1, #80]	; 0x50
 800ceda:	e001      	b.n	800cee0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cedc:	7dfb      	ldrb	r3, [r7, #23]
 800cede:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d04d      	beq.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0x550>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 800ceec:	687b      	ldr	r3, [r7, #4]
 800ceee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cef6:	d02e      	beq.n	800cf56 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800cef8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800cefc:	d828      	bhi.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cefe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf02:	d02a      	beq.n	800cf5a <HAL_RCCEx_PeriphCLKConfig+0x522>
 800cf04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cf08:	d822      	bhi.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cf0a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf0e:	d026      	beq.n	800cf5e <HAL_RCCEx_PeriphCLKConfig+0x526>
 800cf10:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cf14:	d81c      	bhi.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cf16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf1a:	d010      	beq.n	800cf3e <HAL_RCCEx_PeriphCLKConfig+0x506>
 800cf1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf20:	d816      	bhi.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x518>
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d01d      	beq.n	800cf62 <HAL_RCCEx_PeriphCLKConfig+0x52a>
 800cf26:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cf2a:	d111      	bne.n	800cf50 <HAL_RCCEx_PeriphCLKConfig+0x518>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	3304      	adds	r3, #4
 800cf30:	2101      	movs	r1, #1
 800cf32:	4618      	mov	r0, r3
 800cf34:	f000 ff84 	bl	800de40 <RCCEx_PLL2_Config>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800cf3c:	e012      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800cf3e:	687b      	ldr	r3, [r7, #4]
 800cf40:	3324      	adds	r3, #36	; 0x24
 800cf42:	2101      	movs	r1, #1
 800cf44:	4618      	mov	r0, r3
 800cf46:	f001 f82d 	bl	800dfa4 <RCCEx_PLL3_Config>
 800cf4a:	4603      	mov	r3, r0
 800cf4c:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 800cf4e:	e009      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 800cf50:	2301      	movs	r3, #1
 800cf52:	75fb      	strb	r3, [r7, #23]
      break;
 800cf54:	e006      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cf56:	bf00      	nop
 800cf58:	e004      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cf5a:	bf00      	nop
 800cf5c:	e002      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cf5e:	bf00      	nop
 800cf60:	e000      	b.n	800cf64 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      break;
 800cf62:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cf64:	7dfb      	ldrb	r3, [r7, #23]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d10c      	bne.n	800cf84 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800cf6a:	4b05      	ldr	r3, [pc, #20]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cf6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cf6e:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800cf78:	4901      	ldr	r1, [pc, #4]	; (800cf80 <HAL_RCCEx_PeriphCLKConfig+0x548>)
 800cf7a:	4313      	orrs	r3, r2
 800cf7c:	658b      	str	r3, [r1, #88]	; 0x58
 800cf7e:	e003      	b.n	800cf88 <HAL_RCCEx_PeriphCLKConfig+0x550>
 800cf80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cf84:	7dfb      	ldrb	r3, [r7, #23]
 800cf86:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d02f      	beq.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf98:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cf9c:	d00e      	beq.n	800cfbc <HAL_RCCEx_PeriphCLKConfig+0x584>
 800cf9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cfa2:	d814      	bhi.n	800cfce <HAL_RCCEx_PeriphCLKConfig+0x596>
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d015      	beq.n	800cfd4 <HAL_RCCEx_PeriphCLKConfig+0x59c>
 800cfa8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfac:	d10f      	bne.n	800cfce <HAL_RCCEx_PeriphCLKConfig+0x596>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cfae:	4baf      	ldr	r3, [pc, #700]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfb2:	4aae      	ldr	r2, [pc, #696]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfb4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800cfb8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800cfba:	e00c      	b.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800cfbc:	687b      	ldr	r3, [r7, #4]
 800cfbe:	3304      	adds	r3, #4
 800cfc0:	2101      	movs	r1, #1
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	f000 ff3c 	bl	800de40 <RCCEx_PLL2_Config>
 800cfc8:	4603      	mov	r3, r0
 800cfca:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800cfcc:	e003      	b.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800cfce:	2301      	movs	r3, #1
 800cfd0:	75fb      	strb	r3, [r7, #23]
      break;
 800cfd2:	e000      	b.n	800cfd6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
      break;
 800cfd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800cfd6:	7dfb      	ldrb	r3, [r7, #23]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d109      	bne.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800cfdc:	4ba3      	ldr	r3, [pc, #652]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cfe0:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cfe8:	49a0      	ldr	r1, [pc, #640]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800cfea:	4313      	orrs	r3, r2
 800cfec:	650b      	str	r3, [r1, #80]	; 0x50
 800cfee:	e001      	b.n	800cff4 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cff0:	7dfb      	ldrb	r3, [r7, #23]
 800cff2:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d032      	beq.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d004:	2b03      	cmp	r3, #3
 800d006:	d81b      	bhi.n	800d040 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800d008:	a201      	add	r2, pc, #4	; (adr r2, 800d010 <HAL_RCCEx_PeriphCLKConfig+0x5d8>)
 800d00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d00e:	bf00      	nop
 800d010:	0800d047 	.word	0x0800d047
 800d014:	0800d021 	.word	0x0800d021
 800d018:	0800d02f 	.word	0x0800d02f
 800d01c:	0800d047 	.word	0x0800d047
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d020:	4b92      	ldr	r3, [pc, #584]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d024:	4a91      	ldr	r2, [pc, #580]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d026:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d02a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 800d02c:	e00c      	b.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	3304      	adds	r3, #4
 800d032:	2102      	movs	r1, #2
 800d034:	4618      	mov	r0, r3
 800d036:	f000 ff03 	bl	800de40 <RCCEx_PLL2_Config>
 800d03a:	4603      	mov	r3, r0
 800d03c:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 800d03e:	e003      	b.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 800d040:	2301      	movs	r3, #1
 800d042:	75fb      	strb	r3, [r7, #23]
      break;
 800d044:	e000      	b.n	800d048 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 800d046:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d048:	7dfb      	ldrb	r3, [r7, #23]
 800d04a:	2b00      	cmp	r3, #0
 800d04c:	d109      	bne.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d04e:	4b87      	ldr	r3, [pc, #540]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d052:	f023 0203 	bic.w	r2, r3, #3
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d05a:	4984      	ldr	r1, [pc, #528]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d05c:	4313      	orrs	r3, r2
 800d05e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d060:	e001      	b.n	800d066 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d062:	7dfb      	ldrb	r3, [r7, #23]
 800d064:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800d06e:	2b00      	cmp	r3, #0
 800d070:	f000 8086 	beq.w	800d180 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d074:	4b7e      	ldr	r3, [pc, #504]	; (800d270 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a7d      	ldr	r2, [pc, #500]	; (800d270 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800d07a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d07e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d080:	f7fa f82c 	bl	80070dc <HAL_GetTick>
 800d084:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d086:	e009      	b.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d088:	f7fa f828 	bl	80070dc <HAL_GetTick>
 800d08c:	4602      	mov	r2, r0
 800d08e:	693b      	ldr	r3, [r7, #16]
 800d090:	1ad3      	subs	r3, r2, r3
 800d092:	2b64      	cmp	r3, #100	; 0x64
 800d094:	d902      	bls.n	800d09c <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800d096:	2303      	movs	r3, #3
 800d098:	75fb      	strb	r3, [r7, #23]
        break;
 800d09a:	e005      	b.n	800d0a8 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d09c:	4b74      	ldr	r3, [pc, #464]	; (800d270 <HAL_RCCEx_PeriphCLKConfig+0x838>)
 800d09e:	681b      	ldr	r3, [r3, #0]
 800d0a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d0ef      	beq.n	800d088 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800d0a8:	7dfb      	ldrb	r3, [r7, #23]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d166      	bne.n	800d17c <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d0ae:	4b6f      	ldr	r3, [pc, #444]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d0b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d0b8:	4053      	eors	r3, r2
 800d0ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d013      	beq.n	800d0ea <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d0c2:	4b6a      	ldr	r3, [pc, #424]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d0ca:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d0cc:	4b67      	ldr	r3, [pc, #412]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d0ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0d0:	4a66      	ldr	r2, [pc, #408]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d0d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d0d6:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d0d8:	4b64      	ldr	r3, [pc, #400]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d0da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d0dc:	4a63      	ldr	r2, [pc, #396]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d0de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d0e2:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d0e4:	4a61      	ldr	r2, [pc, #388]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d0f0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d0f4:	d115      	bne.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d0f6:	f7f9 fff1 	bl	80070dc <HAL_GetTick>
 800d0fa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d0fc:	e00b      	b.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d0fe:	f7f9 ffed 	bl	80070dc <HAL_GetTick>
 800d102:	4602      	mov	r2, r0
 800d104:	693b      	ldr	r3, [r7, #16]
 800d106:	1ad3      	subs	r3, r2, r3
 800d108:	f241 3288 	movw	r2, #5000	; 0x1388
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d902      	bls.n	800d116 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 800d110:	2303      	movs	r3, #3
 800d112:	75fb      	strb	r3, [r7, #23]
            break;
 800d114:	e005      	b.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d116:	4b55      	ldr	r3, [pc, #340]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d11a:	f003 0302 	and.w	r3, r3, #2
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d0ed      	beq.n	800d0fe <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 800d122:	7dfb      	ldrb	r3, [r7, #23]
 800d124:	2b00      	cmp	r3, #0
 800d126:	d126      	bne.n	800d176 <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d12e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d132:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d136:	d10d      	bne.n	800d154 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 800d138:	4b4c      	ldr	r3, [pc, #304]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d13a:	691b      	ldr	r3, [r3, #16]
 800d13c:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d146:	0919      	lsrs	r1, r3, #4
 800d148:	4b4a      	ldr	r3, [pc, #296]	; (800d274 <HAL_RCCEx_PeriphCLKConfig+0x83c>)
 800d14a:	400b      	ands	r3, r1
 800d14c:	4947      	ldr	r1, [pc, #284]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d14e:	4313      	orrs	r3, r2
 800d150:	610b      	str	r3, [r1, #16]
 800d152:	e005      	b.n	800d160 <HAL_RCCEx_PeriphCLKConfig+0x728>
 800d154:	4b45      	ldr	r3, [pc, #276]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d156:	691b      	ldr	r3, [r3, #16]
 800d158:	4a44      	ldr	r2, [pc, #272]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d15a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d15e:	6113      	str	r3, [r2, #16]
 800d160:	4b42      	ldr	r3, [pc, #264]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d162:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d16a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d16e:	493f      	ldr	r1, [pc, #252]	; (800d26c <HAL_RCCEx_PeriphCLKConfig+0x834>)
 800d170:	4313      	orrs	r3, r2
 800d172:	670b      	str	r3, [r1, #112]	; 0x70
 800d174:	e004      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d176:	7dfb      	ldrb	r3, [r7, #23]
 800d178:	75bb      	strb	r3, [r7, #22]
 800d17a:	e001      	b.n	800d180 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d17c:	7dfb      	ldrb	r3, [r7, #23]
 800d17e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f003 0301 	and.w	r3, r3, #1
 800d188:	2b00      	cmp	r3, #0
 800d18a:	f000 8085 	beq.w	800d298 <HAL_RCCEx_PeriphCLKConfig+0x860>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d192:	2b28      	cmp	r3, #40	; 0x28
 800d194:	d866      	bhi.n	800d264 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 800d196:	a201      	add	r2, pc, #4	; (adr r2, 800d19c <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800d198:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d19c:	0800d279 	.word	0x0800d279
 800d1a0:	0800d265 	.word	0x0800d265
 800d1a4:	0800d265 	.word	0x0800d265
 800d1a8:	0800d265 	.word	0x0800d265
 800d1ac:	0800d265 	.word	0x0800d265
 800d1b0:	0800d265 	.word	0x0800d265
 800d1b4:	0800d265 	.word	0x0800d265
 800d1b8:	0800d265 	.word	0x0800d265
 800d1bc:	0800d241 	.word	0x0800d241
 800d1c0:	0800d265 	.word	0x0800d265
 800d1c4:	0800d265 	.word	0x0800d265
 800d1c8:	0800d265 	.word	0x0800d265
 800d1cc:	0800d265 	.word	0x0800d265
 800d1d0:	0800d265 	.word	0x0800d265
 800d1d4:	0800d265 	.word	0x0800d265
 800d1d8:	0800d265 	.word	0x0800d265
 800d1dc:	0800d253 	.word	0x0800d253
 800d1e0:	0800d265 	.word	0x0800d265
 800d1e4:	0800d265 	.word	0x0800d265
 800d1e8:	0800d265 	.word	0x0800d265
 800d1ec:	0800d265 	.word	0x0800d265
 800d1f0:	0800d265 	.word	0x0800d265
 800d1f4:	0800d265 	.word	0x0800d265
 800d1f8:	0800d265 	.word	0x0800d265
 800d1fc:	0800d279 	.word	0x0800d279
 800d200:	0800d265 	.word	0x0800d265
 800d204:	0800d265 	.word	0x0800d265
 800d208:	0800d265 	.word	0x0800d265
 800d20c:	0800d265 	.word	0x0800d265
 800d210:	0800d265 	.word	0x0800d265
 800d214:	0800d265 	.word	0x0800d265
 800d218:	0800d265 	.word	0x0800d265
 800d21c:	0800d279 	.word	0x0800d279
 800d220:	0800d265 	.word	0x0800d265
 800d224:	0800d265 	.word	0x0800d265
 800d228:	0800d265 	.word	0x0800d265
 800d22c:	0800d265 	.word	0x0800d265
 800d230:	0800d265 	.word	0x0800d265
 800d234:	0800d265 	.word	0x0800d265
 800d238:	0800d265 	.word	0x0800d265
 800d23c:	0800d279 	.word	0x0800d279
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	3304      	adds	r3, #4
 800d244:	2101      	movs	r1, #1
 800d246:	4618      	mov	r0, r3
 800d248:	f000 fdfa 	bl	800de40 <RCCEx_PLL2_Config>
 800d24c:	4603      	mov	r3, r0
 800d24e:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d250:	e013      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x842>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d252:	687b      	ldr	r3, [r7, #4]
 800d254:	3324      	adds	r3, #36	; 0x24
 800d256:	2101      	movs	r1, #1
 800d258:	4618      	mov	r0, r3
 800d25a:	f000 fea3 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d25e:	4603      	mov	r3, r0
 800d260:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 800d262:	e00a      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x842>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d264:	2301      	movs	r3, #1
 800d266:	75fb      	strb	r3, [r7, #23]
      break;
 800d268:	e007      	b.n	800d27a <HAL_RCCEx_PeriphCLKConfig+0x842>
 800d26a:	bf00      	nop
 800d26c:	58024400 	.word	0x58024400
 800d270:	58024800 	.word	0x58024800
 800d274:	00ffffcf 	.word	0x00ffffcf
      break;
 800d278:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d27a:	7dfb      	ldrb	r3, [r7, #23]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d109      	bne.n	800d294 <HAL_RCCEx_PeriphCLKConfig+0x85c>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d280:	4b96      	ldr	r3, [pc, #600]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d282:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d284:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d28c:	4993      	ldr	r1, [pc, #588]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d28e:	4313      	orrs	r3, r2
 800d290:	654b      	str	r3, [r1, #84]	; 0x54
 800d292:	e001      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x860>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d294:	7dfb      	ldrb	r3, [r7, #23]
 800d296:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681b      	ldr	r3, [r3, #0]
 800d29c:	f003 0302 	and.w	r3, r3, #2
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	d038      	beq.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x8de>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d2a8:	2b05      	cmp	r3, #5
 800d2aa:	d821      	bhi.n	800d2f0 <HAL_RCCEx_PeriphCLKConfig+0x8b8>
 800d2ac:	a201      	add	r2, pc, #4	; (adr r2, 800d2b4 <HAL_RCCEx_PeriphCLKConfig+0x87c>)
 800d2ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2b2:	bf00      	nop
 800d2b4:	0800d2f7 	.word	0x0800d2f7
 800d2b8:	0800d2cd 	.word	0x0800d2cd
 800d2bc:	0800d2df 	.word	0x0800d2df
 800d2c0:	0800d2f7 	.word	0x0800d2f7
 800d2c4:	0800d2f7 	.word	0x0800d2f7
 800d2c8:	0800d2f7 	.word	0x0800d2f7
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	3304      	adds	r3, #4
 800d2d0:	2101      	movs	r1, #1
 800d2d2:	4618      	mov	r0, r3
 800d2d4:	f000 fdb4 	bl	800de40 <RCCEx_PLL2_Config>
 800d2d8:	4603      	mov	r3, r0
 800d2da:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d2dc:	e00c      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	3324      	adds	r3, #36	; 0x24
 800d2e2:	2101      	movs	r1, #1
 800d2e4:	4618      	mov	r0, r3
 800d2e6:	f000 fe5d 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d2ea:	4603      	mov	r3, r0
 800d2ec:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 800d2ee:	e003      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d2f0:	2301      	movs	r3, #1
 800d2f2:	75fb      	strb	r3, [r7, #23]
      break;
 800d2f4:	e000      	b.n	800d2f8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
      break;
 800d2f6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d2f8:	7dfb      	ldrb	r3, [r7, #23]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d109      	bne.n	800d312 <HAL_RCCEx_PeriphCLKConfig+0x8da>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d2fe:	4b77      	ldr	r3, [pc, #476]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d302:	f023 0207 	bic.w	r2, r3, #7
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d30a:	4974      	ldr	r1, [pc, #464]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d30c:	4313      	orrs	r3, r2
 800d30e:	654b      	str	r3, [r1, #84]	; 0x54
 800d310:	e001      	b.n	800d316 <HAL_RCCEx_PeriphCLKConfig+0x8de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d312:	7dfb      	ldrb	r3, [r7, #23]
 800d314:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d316:	687b      	ldr	r3, [r7, #4]
 800d318:	681b      	ldr	r3, [r3, #0]
 800d31a:	f003 0304 	and.w	r3, r3, #4
 800d31e:	2b00      	cmp	r3, #0
 800d320:	d03a      	beq.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x960>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d328:	2b05      	cmp	r3, #5
 800d32a:	d821      	bhi.n	800d370 <HAL_RCCEx_PeriphCLKConfig+0x938>
 800d32c:	a201      	add	r2, pc, #4	; (adr r2, 800d334 <HAL_RCCEx_PeriphCLKConfig+0x8fc>)
 800d32e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d332:	bf00      	nop
 800d334:	0800d377 	.word	0x0800d377
 800d338:	0800d34d 	.word	0x0800d34d
 800d33c:	0800d35f 	.word	0x0800d35f
 800d340:	0800d377 	.word	0x0800d377
 800d344:	0800d377 	.word	0x0800d377
 800d348:	0800d377 	.word	0x0800d377
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	3304      	adds	r3, #4
 800d350:	2101      	movs	r1, #1
 800d352:	4618      	mov	r0, r3
 800d354:	f000 fd74 	bl	800de40 <RCCEx_PLL2_Config>
 800d358:	4603      	mov	r3, r0
 800d35a:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d35c:	e00c      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x940>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	3324      	adds	r3, #36	; 0x24
 800d362:	2101      	movs	r1, #1
 800d364:	4618      	mov	r0, r3
 800d366:	f000 fe1d 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d36a:	4603      	mov	r3, r0
 800d36c:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 800d36e:	e003      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x940>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d370:	2301      	movs	r3, #1
 800d372:	75fb      	strb	r3, [r7, #23]
      break;
 800d374:	e000      	b.n	800d378 <HAL_RCCEx_PeriphCLKConfig+0x940>
      break;
 800d376:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d378:	7dfb      	ldrb	r3, [r7, #23]
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d10a      	bne.n	800d394 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d37e:	4b57      	ldr	r3, [pc, #348]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d382:	f023 0207 	bic.w	r2, r3, #7
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d38c:	4953      	ldr	r1, [pc, #332]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d38e:	4313      	orrs	r3, r2
 800d390:	658b      	str	r3, [r1, #88]	; 0x58
 800d392:	e001      	b.n	800d398 <HAL_RCCEx_PeriphCLKConfig+0x960>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d394:	7dfb      	ldrb	r3, [r7, #23]
 800d396:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f003 0320 	and.w	r3, r3, #32
 800d3a0:	2b00      	cmp	r3, #0
 800d3a2:	d04b      	beq.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0xa04>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d3aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3ae:	d02e      	beq.n	800d40e <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800d3b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d3b4:	d828      	bhi.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d3b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3ba:	d02a      	beq.n	800d412 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 800d3bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d3c0:	d822      	bhi.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d3c2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d3c6:	d026      	beq.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800d3c8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d3cc:	d81c      	bhi.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d3ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3d2:	d010      	beq.n	800d3f6 <HAL_RCCEx_PeriphCLKConfig+0x9be>
 800d3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d3d8:	d816      	bhi.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
 800d3da:	2b00      	cmp	r3, #0
 800d3dc:	d01d      	beq.n	800d41a <HAL_RCCEx_PeriphCLKConfig+0x9e2>
 800d3de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d3e2:	d111      	bne.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d3e4:	687b      	ldr	r3, [r7, #4]
 800d3e6:	3304      	adds	r3, #4
 800d3e8:	2100      	movs	r1, #0
 800d3ea:	4618      	mov	r0, r3
 800d3ec:	f000 fd28 	bl	800de40 <RCCEx_PLL2_Config>
 800d3f0:	4603      	mov	r3, r0
 800d3f2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d3f4:	e012      	b.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x9e4>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d3f6:	687b      	ldr	r3, [r7, #4]
 800d3f8:	3324      	adds	r3, #36	; 0x24
 800d3fa:	2102      	movs	r1, #2
 800d3fc:	4618      	mov	r0, r3
 800d3fe:	f000 fdd1 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d402:	4603      	mov	r3, r0
 800d404:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 800d406:	e009      	b.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d408:	2301      	movs	r3, #1
 800d40a:	75fb      	strb	r3, [r7, #23]
      break;
 800d40c:	e006      	b.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d40e:	bf00      	nop
 800d410:	e004      	b.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d412:	bf00      	nop
 800d414:	e002      	b.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d416:	bf00      	nop
 800d418:	e000      	b.n	800d41c <HAL_RCCEx_PeriphCLKConfig+0x9e4>
      break;
 800d41a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d41c:	7dfb      	ldrb	r3, [r7, #23]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d10a      	bne.n	800d438 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d422:	4b2e      	ldr	r3, [pc, #184]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d426:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800d430:	492a      	ldr	r1, [pc, #168]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d432:	4313      	orrs	r3, r2
 800d434:	654b      	str	r3, [r1, #84]	; 0x54
 800d436:	e001      	b.n	800d43c <HAL_RCCEx_PeriphCLKConfig+0xa04>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d438:	7dfb      	ldrb	r3, [r7, #23]
 800d43a:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d444:	2b00      	cmp	r3, #0
 800d446:	d04d      	beq.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d44e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d452:	d02e      	beq.n	800d4b2 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 800d454:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800d458:	d828      	bhi.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d45a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d45e:	d02a      	beq.n	800d4b6 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 800d460:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d464:	d822      	bhi.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d466:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d46a:	d026      	beq.n	800d4ba <HAL_RCCEx_PeriphCLKConfig+0xa82>
 800d46c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d470:	d81c      	bhi.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d472:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d476:	d010      	beq.n	800d49a <HAL_RCCEx_PeriphCLKConfig+0xa62>
 800d478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d47c:	d816      	bhi.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
 800d47e:	2b00      	cmp	r3, #0
 800d480:	d01d      	beq.n	800d4be <HAL_RCCEx_PeriphCLKConfig+0xa86>
 800d482:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d486:	d111      	bne.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0xa74>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	3304      	adds	r3, #4
 800d48c:	2100      	movs	r1, #0
 800d48e:	4618      	mov	r0, r3
 800d490:	f000 fcd6 	bl	800de40 <RCCEx_PLL2_Config>
 800d494:	4603      	mov	r3, r0
 800d496:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d498:	e012      	b.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	3324      	adds	r3, #36	; 0x24
 800d49e:	2102      	movs	r1, #2
 800d4a0:	4618      	mov	r0, r3
 800d4a2:	f000 fd7f 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d4a6:	4603      	mov	r3, r0
 800d4a8:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800d4aa:	e009      	b.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d4ac:	2301      	movs	r3, #1
 800d4ae:	75fb      	strb	r3, [r7, #23]
      break;
 800d4b0:	e006      	b.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d4b2:	bf00      	nop
 800d4b4:	e004      	b.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d4b6:	bf00      	nop
 800d4b8:	e002      	b.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d4ba:	bf00      	nop
 800d4bc:	e000      	b.n	800d4c0 <HAL_RCCEx_PeriphCLKConfig+0xa88>
      break;
 800d4be:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d4c0:	7dfb      	ldrb	r3, [r7, #23]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d10c      	bne.n	800d4e0 <HAL_RCCEx_PeriphCLKConfig+0xaa8>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d4c6:	4b05      	ldr	r3, [pc, #20]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d4c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d4ca:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800d4d4:	4901      	ldr	r1, [pc, #4]	; (800d4dc <HAL_RCCEx_PeriphCLKConfig+0xaa4>)
 800d4d6:	4313      	orrs	r3, r2
 800d4d8:	658b      	str	r3, [r1, #88]	; 0x58
 800d4da:	e003      	b.n	800d4e4 <HAL_RCCEx_PeriphCLKConfig+0xaac>
 800d4dc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d4e0:	7dfb      	ldrb	r3, [r7, #23]
 800d4e2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d04b      	beq.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0xb50>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d4f6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d4fa:	d02e      	beq.n	800d55a <HAL_RCCEx_PeriphCLKConfig+0xb22>
 800d4fc:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800d500:	d828      	bhi.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d506:	d02a      	beq.n	800d55e <HAL_RCCEx_PeriphCLKConfig+0xb26>
 800d508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d50c:	d822      	bhi.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d50e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d512:	d026      	beq.n	800d562 <HAL_RCCEx_PeriphCLKConfig+0xb2a>
 800d514:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800d518:	d81c      	bhi.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d51a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d51e:	d010      	beq.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 800d520:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d524:	d816      	bhi.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
 800d526:	2b00      	cmp	r3, #0
 800d528:	d01d      	beq.n	800d566 <HAL_RCCEx_PeriphCLKConfig+0xb2e>
 800d52a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d52e:	d111      	bne.n	800d554 <HAL_RCCEx_PeriphCLKConfig+0xb1c>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	3304      	adds	r3, #4
 800d534:	2100      	movs	r1, #0
 800d536:	4618      	mov	r0, r3
 800d538:	f000 fc82 	bl	800de40 <RCCEx_PLL2_Config>
 800d53c:	4603      	mov	r3, r0
 800d53e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d540:	e012      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0xb30>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d542:	687b      	ldr	r3, [r7, #4]
 800d544:	3324      	adds	r3, #36	; 0x24
 800d546:	2102      	movs	r1, #2
 800d548:	4618      	mov	r0, r3
 800d54a:	f000 fd2b 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d54e:	4603      	mov	r3, r0
 800d550:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 800d552:	e009      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d554:	2301      	movs	r3, #1
 800d556:	75fb      	strb	r3, [r7, #23]
      break;
 800d558:	e006      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d55a:	bf00      	nop
 800d55c:	e004      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d55e:	bf00      	nop
 800d560:	e002      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d562:	bf00      	nop
 800d564:	e000      	b.n	800d568 <HAL_RCCEx_PeriphCLKConfig+0xb30>
      break;
 800d566:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d568:	7dfb      	ldrb	r3, [r7, #23]
 800d56a:	2b00      	cmp	r3, #0
 800d56c:	d10a      	bne.n	800d584 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800d56e:	4b9d      	ldr	r3, [pc, #628]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d570:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d572:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800d57c:	4999      	ldr	r1, [pc, #612]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d57e:	4313      	orrs	r3, r2
 800d580:	658b      	str	r3, [r1, #88]	; 0x58
 800d582:	e001      	b.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0xb50>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d584:	7dfb      	ldrb	r3, [r7, #23]
 800d586:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	f003 0308 	and.w	r3, r3, #8
 800d590:	2b00      	cmp	r3, #0
 800d592:	d01a      	beq.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0xb92>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d59a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d59e:	d10a      	bne.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	3324      	adds	r3, #36	; 0x24
 800d5a4:	2102      	movs	r1, #2
 800d5a6:	4618      	mov	r0, r3
 800d5a8:	f000 fcfc 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d5ac:	4603      	mov	r3, r0
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d001      	beq.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        {
          status = HAL_ERROR;
 800d5b2:	2301      	movs	r3, #1
 800d5b4:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800d5b6:	4b8b      	ldr	r3, [pc, #556]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d5b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d5c4:	4987      	ldr	r1, [pc, #540]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d5c6:	4313      	orrs	r3, r2
 800d5c8:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	f003 0310 	and.w	r3, r3, #16
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d01a      	beq.n	800d60c <HAL_RCCEx_PeriphCLKConfig+0xbd4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d5dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d5e0:	d10a      	bne.n	800d5f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	3324      	adds	r3, #36	; 0x24
 800d5e6:	2102      	movs	r1, #2
 800d5e8:	4618      	mov	r0, r3
 800d5ea:	f000 fcdb 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d5ee:	4603      	mov	r3, r0
 800d5f0:	2b00      	cmp	r3, #0
 800d5f2:	d001      	beq.n	800d5f8 <HAL_RCCEx_PeriphCLKConfig+0xbc0>
      {
        status = HAL_ERROR;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800d5f8:	4b7a      	ldr	r3, [pc, #488]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d5fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d5fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d606:	4977      	ldr	r1, [pc, #476]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d608:	4313      	orrs	r3, r2
 800d60a:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800d614:	2b00      	cmp	r3, #0
 800d616:	d034      	beq.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
  {
    switch(PeriphClkInit->AdcClockSelection)
 800d618:	687b      	ldr	r3, [r7, #4]
 800d61a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d61e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d622:	d01d      	beq.n	800d660 <HAL_RCCEx_PeriphCLKConfig+0xc28>
 800d624:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d628:	d817      	bhi.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0xc22>
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	d003      	beq.n	800d636 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
 800d62e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d632:	d009      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0xc10>
 800d634:	e011      	b.n	800d65a <HAL_RCCEx_PeriphCLKConfig+0xc22>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	3304      	adds	r3, #4
 800d63a:	2100      	movs	r1, #0
 800d63c:	4618      	mov	r0, r3
 800d63e:	f000 fbff 	bl	800de40 <RCCEx_PLL2_Config>
 800d642:	4603      	mov	r3, r0
 800d644:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d646:	e00c      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0xc2a>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	3324      	adds	r3, #36	; 0x24
 800d64c:	2102      	movs	r1, #2
 800d64e:	4618      	mov	r0, r3
 800d650:	f000 fca8 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d654:	4603      	mov	r3, r0
 800d656:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 800d658:	e003      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d65a:	2301      	movs	r3, #1
 800d65c:	75fb      	strb	r3, [r7, #23]
      break;
 800d65e:	e000      	b.n	800d662 <HAL_RCCEx_PeriphCLKConfig+0xc2a>
      break;
 800d660:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d662:	7dfb      	ldrb	r3, [r7, #23]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d10a      	bne.n	800d67e <HAL_RCCEx_PeriphCLKConfig+0xc46>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800d668:	4b5e      	ldr	r3, [pc, #376]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d66a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d66c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d670:	687b      	ldr	r3, [r7, #4]
 800d672:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800d676:	495b      	ldr	r1, [pc, #364]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d678:	4313      	orrs	r3, r2
 800d67a:	658b      	str	r3, [r1, #88]	; 0x58
 800d67c:	e001      	b.n	800d682 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d67e:	7dfb      	ldrb	r3, [r7, #23]
 800d680:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d033      	beq.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
  {

    switch(PeriphClkInit->UsbClockSelection)
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d694:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d698:	d01c      	beq.n	800d6d4 <HAL_RCCEx_PeriphCLKConfig+0xc9c>
 800d69a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d69e:	d816      	bhi.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
 800d6a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d6a4:	d003      	beq.n	800d6ae <HAL_RCCEx_PeriphCLKConfig+0xc76>
 800d6a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d6aa:	d007      	beq.n	800d6bc <HAL_RCCEx_PeriphCLKConfig+0xc84>
 800d6ac:	e00f      	b.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0xc96>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d6ae:	4b4d      	ldr	r3, [pc, #308]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6b2:	4a4c      	ldr	r2, [pc, #304]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d6b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 800d6ba:	e00c      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	3324      	adds	r3, #36	; 0x24
 800d6c0:	2101      	movs	r1, #1
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f000 fc6e 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d6c8:	4603      	mov	r3, r0
 800d6ca:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 800d6cc:	e003      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d6ce:	2301      	movs	r3, #1
 800d6d0:	75fb      	strb	r3, [r7, #23]
      break;
 800d6d2:	e000      	b.n	800d6d6 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
      break;
 800d6d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d6d6:	7dfb      	ldrb	r3, [r7, #23]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d10a      	bne.n	800d6f2 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d6dc:	4b41      	ldr	r3, [pc, #260]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d6e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800d6e4:	687b      	ldr	r3, [r7, #4]
 800d6e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d6ea:	493e      	ldr	r1, [pc, #248]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d6ec:	4313      	orrs	r3, r2
 800d6ee:	654b      	str	r3, [r1, #84]	; 0x54
 800d6f0:	e001      	b.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0xcbe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6f2:	7dfb      	ldrb	r3, [r7, #23]
 800d6f4:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800d6fe:	2b00      	cmp	r3, #0
 800d700:	d029      	beq.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 800d702:	687b      	ldr	r3, [r7, #4]
 800d704:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d706:	2b00      	cmp	r3, #0
 800d708:	d003      	beq.n	800d712 <HAL_RCCEx_PeriphCLKConfig+0xcda>
 800d70a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d70e:	d007      	beq.n	800d720 <HAL_RCCEx_PeriphCLKConfig+0xce8>
 800d710:	e00f      	b.n	800d732 <HAL_RCCEx_PeriphCLKConfig+0xcfa>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d712:	4b34      	ldr	r3, [pc, #208]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d716:	4a33      	ldr	r2, [pc, #204]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d718:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d71c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d71e:	e00b      	b.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	3304      	adds	r3, #4
 800d724:	2102      	movs	r1, #2
 800d726:	4618      	mov	r0, r3
 800d728:	f000 fb8a 	bl	800de40 <RCCEx_PLL2_Config>
 800d72c:	4603      	mov	r3, r0
 800d72e:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 800d730:	e002      	b.n	800d738 <HAL_RCCEx_PeriphCLKConfig+0xd00>

    default:
      ret = HAL_ERROR;
 800d732:	2301      	movs	r3, #1
 800d734:	75fb      	strb	r3, [r7, #23]
      break;
 800d736:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d738:	7dfb      	ldrb	r3, [r7, #23]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d109      	bne.n	800d752 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800d73e:	4b29      	ldr	r3, [pc, #164]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d742:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d74a:	4926      	ldr	r1, [pc, #152]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d74c:	4313      	orrs	r3, r2
 800d74e:	64cb      	str	r3, [r1, #76]	; 0x4c
 800d750:	e001      	b.n	800d756 <HAL_RCCEx_PeriphCLKConfig+0xd1e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d752:	7dfb      	ldrb	r3, [r7, #23]
 800d754:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	681b      	ldr	r3, [r3, #0]
 800d75a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d75e:	2b00      	cmp	r3, #0
 800d760:	d00a      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0xd40>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	3324      	adds	r3, #36	; 0x24
 800d766:	2102      	movs	r1, #2
 800d768:	4618      	mov	r0, r3
 800d76a:	f000 fc1b 	bl	800dfa4 <RCCEx_PLL3_Config>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d001      	beq.n	800d778 <HAL_RCCEx_PeriphCLKConfig+0xd40>
    {
      status=HAL_ERROR;
 800d774:	2301      	movs	r3, #1
 800d776:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800d778:	687b      	ldr	r3, [r7, #4]
 800d77a:	681b      	ldr	r3, [r3, #0]
 800d77c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800d780:	2b00      	cmp	r3, #0
 800d782:	d033      	beq.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
  {

    switch(PeriphClkInit->RngClockSelection)
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d788:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d78c:	d017      	beq.n	800d7be <HAL_RCCEx_PeriphCLKConfig+0xd86>
 800d78e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d792:	d811      	bhi.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d794:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d798:	d013      	beq.n	800d7c2 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 800d79a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d79e:	d80b      	bhi.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	d010      	beq.n	800d7c6 <HAL_RCCEx_PeriphCLKConfig+0xd8e>
 800d7a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d7a8:	d106      	bne.n	800d7b8 <HAL_RCCEx_PeriphCLKConfig+0xd80>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7aa:	4b0e      	ldr	r3, [pc, #56]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d7ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ae:	4a0d      	ldr	r2, [pc, #52]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d7b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7b4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 800d7b6:	e007      	b.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	75fb      	strb	r3, [r7, #23]
      break;
 800d7bc:	e004      	b.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d7be:	bf00      	nop
 800d7c0:	e002      	b.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d7c2:	bf00      	nop
 800d7c4:	e000      	b.n	800d7c8 <HAL_RCCEx_PeriphCLKConfig+0xd90>
      break;
 800d7c6:	bf00      	nop
    }

    if(ret == HAL_OK)
 800d7c8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d10c      	bne.n	800d7e8 <HAL_RCCEx_PeriphCLKConfig+0xdb0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800d7ce:	4b05      	ldr	r3, [pc, #20]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d7d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d7d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d7da:	4902      	ldr	r1, [pc, #8]	; (800d7e4 <HAL_RCCEx_PeriphCLKConfig+0xdac>)
 800d7dc:	4313      	orrs	r3, r2
 800d7de:	654b      	str	r3, [r1, #84]	; 0x54
 800d7e0:	e004      	b.n	800d7ec <HAL_RCCEx_PeriphCLKConfig+0xdb4>
 800d7e2:	bf00      	nop
 800d7e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7e8:	7dfb      	ldrb	r3, [r7, #23]
 800d7ea:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800d7f4:	2b00      	cmp	r3, #0
 800d7f6:	d008      	beq.n	800d80a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800d7f8:	4b31      	ldr	r3, [pc, #196]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d7fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d804:	492e      	ldr	r1, [pc, #184]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d806:	4313      	orrs	r3, r2
 800d808:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800d812:	2b00      	cmp	r3, #0
 800d814:	d009      	beq.n	800d82a <HAL_RCCEx_PeriphCLKConfig+0xdf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800d816:	4b2a      	ldr	r3, [pc, #168]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d818:	691b      	ldr	r3, [r3, #16]
 800d81a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d824:	4926      	ldr	r1, [pc, #152]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d826:	4313      	orrs	r3, r2
 800d828:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800d832:	2b00      	cmp	r3, #0
 800d834:	d008      	beq.n	800d848 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800d836:	4b22      	ldr	r3, [pc, #136]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d838:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d83a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d842:	491f      	ldr	r1, [pc, #124]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d844:	4313      	orrs	r3, r2
 800d846:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800d850:	2b00      	cmp	r3, #0
 800d852:	d00d      	beq.n	800d870 <HAL_RCCEx_PeriphCLKConfig+0xe38>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800d854:	4b1a      	ldr	r3, [pc, #104]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d856:	691b      	ldr	r3, [r3, #16]
 800d858:	4a19      	ldr	r2, [pc, #100]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d85a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800d85e:	6113      	str	r3, [r2, #16]
 800d860:	4b17      	ldr	r3, [pc, #92]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d862:	691a      	ldr	r2, [r3, #16]
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800d86a:	4915      	ldr	r1, [pc, #84]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d86c:	4313      	orrs	r3, r2
 800d86e:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	2b00      	cmp	r3, #0
 800d876:	da08      	bge.n	800d88a <HAL_RCCEx_PeriphCLKConfig+0xe52>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800d878:	4b11      	ldr	r3, [pc, #68]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d87a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d87c:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d884:	490e      	ldr	r1, [pc, #56]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d886:	4313      	orrs	r3, r2
 800d888:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d892:	2b00      	cmp	r3, #0
 800d894:	d009      	beq.n	800d8aa <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800d896:	4b0a      	ldr	r3, [pc, #40]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d898:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d89a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d89e:	687b      	ldr	r3, [r7, #4]
 800d8a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d8a4:	4906      	ldr	r1, [pc, #24]	; (800d8c0 <HAL_RCCEx_PeriphCLKConfig+0xe88>)
 800d8a6:	4313      	orrs	r3, r2
 800d8a8:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 800d8aa:	7dbb      	ldrb	r3, [r7, #22]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d101      	bne.n	800d8b4 <HAL_RCCEx_PeriphCLKConfig+0xe7c>
  {
    return HAL_OK;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	e000      	b.n	800d8b6 <HAL_RCCEx_PeriphCLKConfig+0xe7e>
  }
  return HAL_ERROR;
 800d8b4:	2301      	movs	r3, #1
}
 800d8b6:	4618      	mov	r0, r3
 800d8b8:	3718      	adds	r7, #24
 800d8ba:	46bd      	mov	sp, r7
 800d8bc:	bd80      	pop	{r7, pc}
 800d8be:	bf00      	nop
 800d8c0:	58024400 	.word	0x58024400

0800d8c4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800d8c8:	f7ff f85a 	bl	800c980 <HAL_RCC_GetHCLKFreq>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	4b06      	ldr	r3, [pc, #24]	; (800d8e8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800d8d0:	6a1b      	ldr	r3, [r3, #32]
 800d8d2:	091b      	lsrs	r3, r3, #4
 800d8d4:	f003 0307 	and.w	r3, r3, #7
 800d8d8:	4904      	ldr	r1, [pc, #16]	; (800d8ec <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800d8da:	5ccb      	ldrb	r3, [r1, r3]
 800d8dc:	f003 031f 	and.w	r3, r3, #31
 800d8e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	bd80      	pop	{r7, pc}
 800d8e8:	58024400 	.word	0x58024400
 800d8ec:	08012bc8 	.word	0x08012bc8

0800d8f0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 800d8f0:	b480      	push	{r7}
 800d8f2:	b089      	sub	sp, #36	; 0x24
 800d8f4:	af00      	add	r7, sp, #0
 800d8f6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d8f8:	4ba1      	ldr	r3, [pc, #644]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d8fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8fc:	f003 0303 	and.w	r3, r3, #3
 800d900:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 800d902:	4b9f      	ldr	r3, [pc, #636]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d906:	0b1b      	lsrs	r3, r3, #12
 800d908:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d90c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800d90e:	4b9c      	ldr	r3, [pc, #624]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d912:	091b      	lsrs	r3, r3, #4
 800d914:	f003 0301 	and.w	r3, r3, #1
 800d918:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 800d91a:	4b99      	ldr	r3, [pc, #612]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d91e:	08db      	lsrs	r3, r3, #3
 800d920:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d924:	693a      	ldr	r2, [r7, #16]
 800d926:	fb02 f303 	mul.w	r3, r2, r3
 800d92a:	ee07 3a90 	vmov	s15, r3
 800d92e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d932:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800d936:	697b      	ldr	r3, [r7, #20]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	f000 8111 	beq.w	800db60 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800d93e:	69bb      	ldr	r3, [r7, #24]
 800d940:	2b02      	cmp	r3, #2
 800d942:	f000 8083 	beq.w	800da4c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800d946:	69bb      	ldr	r3, [r7, #24]
 800d948:	2b02      	cmp	r3, #2
 800d94a:	f200 80a1 	bhi.w	800da90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800d94e:	69bb      	ldr	r3, [r7, #24]
 800d950:	2b00      	cmp	r3, #0
 800d952:	d003      	beq.n	800d95c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800d954:	69bb      	ldr	r3, [r7, #24]
 800d956:	2b01      	cmp	r3, #1
 800d958:	d056      	beq.n	800da08 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800d95a:	e099      	b.n	800da90 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d95c:	4b88      	ldr	r3, [pc, #544]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d95e:	681b      	ldr	r3, [r3, #0]
 800d960:	f003 0320 	and.w	r3, r3, #32
 800d964:	2b00      	cmp	r3, #0
 800d966:	d02d      	beq.n	800d9c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800d968:	4b85      	ldr	r3, [pc, #532]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	08db      	lsrs	r3, r3, #3
 800d96e:	f003 0303 	and.w	r3, r3, #3
 800d972:	4a84      	ldr	r2, [pc, #528]	; (800db84 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800d974:	fa22 f303 	lsr.w	r3, r2, r3
 800d978:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	ee07 3a90 	vmov	s15, r3
 800d980:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d984:	697b      	ldr	r3, [r7, #20]
 800d986:	ee07 3a90 	vmov	s15, r3
 800d98a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d98e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d992:	4b7b      	ldr	r3, [pc, #492]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d994:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d996:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d99a:	ee07 3a90 	vmov	s15, r3
 800d99e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9a2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9a6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9aa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9ae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9b2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9b6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d9be:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800d9c2:	e087      	b.n	800dad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800d9c4:	697b      	ldr	r3, [r7, #20]
 800d9c6:	ee07 3a90 	vmov	s15, r3
 800d9ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d9ce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800db8c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800d9d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d9d6:	4b6a      	ldr	r3, [pc, #424]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d9d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d9de:	ee07 3a90 	vmov	s15, r3
 800d9e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d9e6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d9ea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d9ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d9f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d9f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d9fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d9fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da02:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da06:	e065      	b.n	800dad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da08:	697b      	ldr	r3, [r7, #20]
 800da0a:	ee07 3a90 	vmov	s15, r3
 800da0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da12:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800db90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da1a:	4b59      	ldr	r3, [pc, #356]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da22:	ee07 3a90 	vmov	s15, r3
 800da26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800da2e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da46:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da4a:	e043      	b.n	800dad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da4c:	697b      	ldr	r3, [r7, #20]
 800da4e:	ee07 3a90 	vmov	s15, r3
 800da52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da56:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800db94 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800da5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800da5e:	4b48      	ldr	r3, [pc, #288]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800da60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800da62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800da66:	ee07 3a90 	vmov	s15, r3
 800da6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800da6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800da72:	eddf 5a45 	vldr	s11, [pc, #276]	; 800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800da76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800da7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800da7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800da82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800da86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800da8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800da8e:	e021      	b.n	800dad4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	ee07 3a90 	vmov	s15, r3
 800da96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800da9a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800db90 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800da9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800daa2:	4b37      	ldr	r3, [pc, #220]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800daa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800daa6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800daaa:	ee07 3a90 	vmov	s15, r3
 800daae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dab2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dab6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800db88 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800daba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dabe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dac2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800daca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dace:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dad2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 800dad4:	4b2a      	ldr	r3, [pc, #168]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800dad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dad8:	0a5b      	lsrs	r3, r3, #9
 800dada:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dade:	ee07 3a90 	vmov	s15, r3
 800dae2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dae6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800daea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800daee:	edd7 6a07 	vldr	s13, [r7, #28]
 800daf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800daf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dafa:	ee17 2a90 	vmov	r2, s15
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 800db02:	4b1f      	ldr	r3, [pc, #124]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db06:	0c1b      	lsrs	r3, r3, #16
 800db08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db0c:	ee07 3a90 	vmov	s15, r3
 800db10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db14:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800db20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db28:	ee17 2a90 	vmov	r2, s15
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 800db30:	4b13      	ldr	r3, [pc, #76]	; (800db80 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800db32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db34:	0e1b      	lsrs	r3, r3, #24
 800db36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800db3a:	ee07 3a90 	vmov	s15, r3
 800db3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800db42:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800db46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800db4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800db4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800db52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800db56:	ee17 2a90 	vmov	r2, s15
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800db5e:	e008      	b.n	800db72 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	2200      	movs	r2, #0
 800db64:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	2200      	movs	r2, #0
 800db6a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	2200      	movs	r2, #0
 800db70:	609a      	str	r2, [r3, #8]
}
 800db72:	bf00      	nop
 800db74:	3724      	adds	r7, #36	; 0x24
 800db76:	46bd      	mov	sp, r7
 800db78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db7c:	4770      	bx	lr
 800db7e:	bf00      	nop
 800db80:	58024400 	.word	0x58024400
 800db84:	03d09000 	.word	0x03d09000
 800db88:	46000000 	.word	0x46000000
 800db8c:	4c742400 	.word	0x4c742400
 800db90:	4a742400 	.word	0x4a742400
 800db94:	4af42400 	.word	0x4af42400

0800db98 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 800db98:	b480      	push	{r7}
 800db9a:	b089      	sub	sp, #36	; 0x24
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800dba0:	4ba1      	ldr	r3, [pc, #644]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dba2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dba4:	f003 0303 	and.w	r3, r3, #3
 800dba8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 800dbaa:	4b9f      	ldr	r3, [pc, #636]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dbae:	0d1b      	lsrs	r3, r3, #20
 800dbb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800dbb4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800dbb6:	4b9c      	ldr	r3, [pc, #624]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbba:	0a1b      	lsrs	r3, r3, #8
 800dbbc:	f003 0301 	and.w	r3, r3, #1
 800dbc0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800dbc2:	4b99      	ldr	r3, [pc, #612]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dbc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dbc6:	08db      	lsrs	r3, r3, #3
 800dbc8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	fb02 f303 	mul.w	r3, r2, r3
 800dbd2:	ee07 3a90 	vmov	s15, r3
 800dbd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dbda:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	2b00      	cmp	r3, #0
 800dbe2:	f000 8111 	beq.w	800de08 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800dbe6:	69bb      	ldr	r3, [r7, #24]
 800dbe8:	2b02      	cmp	r3, #2
 800dbea:	f000 8083 	beq.w	800dcf4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800dbee:	69bb      	ldr	r3, [r7, #24]
 800dbf0:	2b02      	cmp	r3, #2
 800dbf2:	f200 80a1 	bhi.w	800dd38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800dbf6:	69bb      	ldr	r3, [r7, #24]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d003      	beq.n	800dc04 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800dbfc:	69bb      	ldr	r3, [r7, #24]
 800dbfe:	2b01      	cmp	r3, #1
 800dc00:	d056      	beq.n	800dcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800dc02:	e099      	b.n	800dd38 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dc04:	4b88      	ldr	r3, [pc, #544]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc06:	681b      	ldr	r3, [r3, #0]
 800dc08:	f003 0320 	and.w	r3, r3, #32
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d02d      	beq.n	800dc6c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 800dc10:	4b85      	ldr	r3, [pc, #532]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc12:	681b      	ldr	r3, [r3, #0]
 800dc14:	08db      	lsrs	r3, r3, #3
 800dc16:	f003 0303 	and.w	r3, r3, #3
 800dc1a:	4a84      	ldr	r2, [pc, #528]	; (800de2c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800dc1c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc20:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc22:	68bb      	ldr	r3, [r7, #8]
 800dc24:	ee07 3a90 	vmov	s15, r3
 800dc28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc2c:	697b      	ldr	r3, [r7, #20]
 800dc2e:	ee07 3a90 	vmov	s15, r3
 800dc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc3a:	4b7b      	ldr	r3, [pc, #492]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc42:	ee07 3a90 	vmov	s15, r3
 800dc46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc4a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc4e:	eddf 5a78 	vldr	s11, [pc, #480]	; 800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dc5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dc66:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 800dc6a:	e087      	b.n	800dd7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dc6c:	697b      	ldr	r3, [r7, #20]
 800dc6e:	ee07 3a90 	vmov	s15, r3
 800dc72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dc76:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800de34 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800dc7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dc7e:	4b6a      	ldr	r3, [pc, #424]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dc80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dc86:	ee07 3a90 	vmov	s15, r3
 800dc8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dc8e:	ed97 6a03 	vldr	s12, [r7, #12]
 800dc92:	eddf 5a67 	vldr	s11, [pc, #412]	; 800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dc96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dc9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dc9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dca2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dca6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcaa:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dcae:	e065      	b.n	800dd7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dcb0:	697b      	ldr	r3, [r7, #20]
 800dcb2:	ee07 3a90 	vmov	s15, r3
 800dcb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcba:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800de38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dcbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dcc2:	4b59      	ldr	r3, [pc, #356]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dcc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dcc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dcca:	ee07 3a90 	vmov	s15, r3
 800dcce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dcd2:	ed97 6a03 	vldr	s12, [r7, #12]
 800dcd6:	eddf 5a56 	vldr	s11, [pc, #344]	; 800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dcda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dcde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dce2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dce6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dcee:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dcf2:	e043      	b.n	800dd7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	ee07 3a90 	vmov	s15, r3
 800dcfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dcfe:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800de3c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800dd02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd06:	4b48      	ldr	r3, [pc, #288]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd0e:	ee07 3a90 	vmov	s15, r3
 800dd12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd16:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd1a:	eddf 5a45 	vldr	s11, [pc, #276]	; 800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd32:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd36:	e021      	b.n	800dd7c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	ee07 3a90 	vmov	s15, r3
 800dd3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd42:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800de38 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800dd46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800dd4a:	4b37      	ldr	r3, [pc, #220]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800dd52:	ee07 3a90 	vmov	s15, r3
 800dd56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800dd5a:	ed97 6a03 	vldr	s12, [r7, #12]
 800dd5e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800de30 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800dd62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800dd66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800dd6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dd6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dd72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800dd76:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800dd7a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 800dd7c:	4b2a      	ldr	r3, [pc, #168]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800dd7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dd80:	0a5b      	lsrs	r3, r3, #9
 800dd82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dd86:	ee07 3a90 	vmov	s15, r3
 800dd8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800dd8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd92:	ee37 7a87 	vadd.f32	s14, s15, s14
 800dd96:	edd7 6a07 	vldr	s13, [r7, #28]
 800dd9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800dd9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800dda2:	ee17 2a90 	vmov	r2, s15
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 800ddaa:	4b1f      	ldr	r3, [pc, #124]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ddae:	0c1b      	lsrs	r3, r3, #16
 800ddb0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ddb4:	ee07 3a90 	vmov	s15, r3
 800ddb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddbc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddc4:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddd0:	ee17 2a90 	vmov	r2, s15
 800ddd4:	687b      	ldr	r3, [r7, #4]
 800ddd6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 800ddd8:	4b13      	ldr	r3, [pc, #76]	; (800de28 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ddda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dddc:	0e1b      	lsrs	r3, r3, #24
 800ddde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dde2:	ee07 3a90 	vmov	s15, r3
 800dde6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ddea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ddee:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ddf2:	edd7 6a07 	vldr	s13, [r7, #28]
 800ddf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ddfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ddfe:	ee17 2a90 	vmov	r2, s15
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800de06:	e008      	b.n	800de1a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	2200      	movs	r2, #0
 800de0c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	2200      	movs	r2, #0
 800de12:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	2200      	movs	r2, #0
 800de18:	609a      	str	r2, [r3, #8]
}
 800de1a:	bf00      	nop
 800de1c:	3724      	adds	r7, #36	; 0x24
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	58024400 	.word	0x58024400
 800de2c:	03d09000 	.word	0x03d09000
 800de30:	46000000 	.word	0x46000000
 800de34:	4c742400 	.word	0x4c742400
 800de38:	4a742400 	.word	0x4a742400
 800de3c:	4af42400 	.word	0x4af42400

0800de40 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b084      	sub	sp, #16
 800de44:	af00      	add	r7, sp, #0
 800de46:	6078      	str	r0, [r7, #4]
 800de48:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800de4a:	2300      	movs	r3, #0
 800de4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800de4e:	4b53      	ldr	r3, [pc, #332]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800de50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de52:	f003 0303 	and.w	r3, r3, #3
 800de56:	2b03      	cmp	r3, #3
 800de58:	d101      	bne.n	800de5e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800de5a:	2301      	movs	r3, #1
 800de5c:	e099      	b.n	800df92 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800de5e:	4b4f      	ldr	r3, [pc, #316]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	4a4e      	ldr	r2, [pc, #312]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800de64:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800de68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800de6a:	f7f9 f937 	bl	80070dc <HAL_GetTick>
 800de6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de70:	e008      	b.n	800de84 <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800de72:	f7f9 f933 	bl	80070dc <HAL_GetTick>
 800de76:	4602      	mov	r2, r0
 800de78:	68bb      	ldr	r3, [r7, #8]
 800de7a:	1ad3      	subs	r3, r2, r3
 800de7c:	2b02      	cmp	r3, #2
 800de7e:	d901      	bls.n	800de84 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800de80:	2303      	movs	r3, #3
 800de82:	e086      	b.n	800df92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800de84:	4b45      	ldr	r3, [pc, #276]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800de8c:	2b00      	cmp	r3, #0
 800de8e:	d1f0      	bne.n	800de72 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800de90:	4b42      	ldr	r3, [pc, #264]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800de92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de94:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	681b      	ldr	r3, [r3, #0]
 800de9c:	031b      	lsls	r3, r3, #12
 800de9e:	493f      	ldr	r1, [pc, #252]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800dea0:	4313      	orrs	r3, r2
 800dea2:	628b      	str	r3, [r1, #40]	; 0x28
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	685b      	ldr	r3, [r3, #4]
 800dea8:	3b01      	subs	r3, #1
 800deaa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	689b      	ldr	r3, [r3, #8]
 800deb2:	3b01      	subs	r3, #1
 800deb4:	025b      	lsls	r3, r3, #9
 800deb6:	b29b      	uxth	r3, r3
 800deb8:	431a      	orrs	r2, r3
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	3b01      	subs	r3, #1
 800dec0:	041b      	lsls	r3, r3, #16
 800dec2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800dec6:	431a      	orrs	r2, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	3b01      	subs	r3, #1
 800dece:	061b      	lsls	r3, r3, #24
 800ded0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800ded4:	4931      	ldr	r1, [pc, #196]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800ded6:	4313      	orrs	r3, r2
 800ded8:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800deda:	4b30      	ldr	r3, [pc, #192]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800dedc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dede:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	695b      	ldr	r3, [r3, #20]
 800dee6:	492d      	ldr	r1, [pc, #180]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800dee8:	4313      	orrs	r3, r2
 800deea:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800deec:	4b2b      	ldr	r3, [pc, #172]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800deee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def0:	f023 0220 	bic.w	r2, r3, #32
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	699b      	ldr	r3, [r3, #24]
 800def8:	4928      	ldr	r1, [pc, #160]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800defa:	4313      	orrs	r3, r2
 800defc:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800defe:	4b27      	ldr	r3, [pc, #156]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df02:	4a26      	ldr	r2, [pc, #152]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df04:	f023 0310 	bic.w	r3, r3, #16
 800df08:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800df0a:	4b24      	ldr	r3, [pc, #144]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800df0e:	4b24      	ldr	r3, [pc, #144]	; (800dfa0 <RCCEx_PLL2_Config+0x160>)
 800df10:	4013      	ands	r3, r2
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	69d2      	ldr	r2, [r2, #28]
 800df16:	00d2      	lsls	r2, r2, #3
 800df18:	4920      	ldr	r1, [pc, #128]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df1a:	4313      	orrs	r3, r2
 800df1c:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800df1e:	4b1f      	ldr	r3, [pc, #124]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df22:	4a1e      	ldr	r2, [pc, #120]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df24:	f043 0310 	orr.w	r3, r3, #16
 800df28:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800df2a:	683b      	ldr	r3, [r7, #0]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d106      	bne.n	800df3e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800df30:	4b1a      	ldr	r3, [pc, #104]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df34:	4a19      	ldr	r2, [pc, #100]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df36:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800df3a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df3c:	e00f      	b.n	800df5e <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800df3e:	683b      	ldr	r3, [r7, #0]
 800df40:	2b01      	cmp	r3, #1
 800df42:	d106      	bne.n	800df52 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800df44:	4b15      	ldr	r3, [pc, #84]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df48:	4a14      	ldr	r2, [pc, #80]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df4a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800df4e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800df50:	e005      	b.n	800df5e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800df52:	4b12      	ldr	r3, [pc, #72]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df56:	4a11      	ldr	r2, [pc, #68]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df58:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800df5c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800df5e:	4b0f      	ldr	r3, [pc, #60]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df60:	681b      	ldr	r3, [r3, #0]
 800df62:	4a0e      	ldr	r2, [pc, #56]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df64:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800df68:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800df6a:	f7f9 f8b7 	bl	80070dc <HAL_GetTick>
 800df6e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df70:	e008      	b.n	800df84 <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 800df72:	f7f9 f8b3 	bl	80070dc <HAL_GetTick>
 800df76:	4602      	mov	r2, r0
 800df78:	68bb      	ldr	r3, [r7, #8]
 800df7a:	1ad3      	subs	r3, r2, r3
 800df7c:	2b02      	cmp	r3, #2
 800df7e:	d901      	bls.n	800df84 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800df80:	2303      	movs	r3, #3
 800df82:	e006      	b.n	800df92 <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800df84:	4b05      	ldr	r3, [pc, #20]	; (800df9c <RCCEx_PLL2_Config+0x15c>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d0f0      	beq.n	800df72 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800df90:	7bfb      	ldrb	r3, [r7, #15]
}
 800df92:	4618      	mov	r0, r3
 800df94:	3710      	adds	r7, #16
 800df96:	46bd      	mov	sp, r7
 800df98:	bd80      	pop	{r7, pc}
 800df9a:	bf00      	nop
 800df9c:	58024400 	.word	0x58024400
 800dfa0:	ffff0007 	.word	0xffff0007

0800dfa4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b084      	sub	sp, #16
 800dfa8:	af00      	add	r7, sp, #0
 800dfaa:	6078      	str	r0, [r7, #4]
 800dfac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800dfae:	2300      	movs	r3, #0
 800dfb0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800dfb2:	4b53      	ldr	r3, [pc, #332]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800dfb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dfb6:	f003 0303 	and.w	r3, r3, #3
 800dfba:	2b03      	cmp	r3, #3
 800dfbc:	d101      	bne.n	800dfc2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800dfbe:	2301      	movs	r3, #1
 800dfc0:	e099      	b.n	800e0f6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800dfc2:	4b4f      	ldr	r3, [pc, #316]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	4a4e      	ldr	r2, [pc, #312]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800dfc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800dfcc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800dfce:	f7f9 f885 	bl	80070dc <HAL_GetTick>
 800dfd2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfd4:	e008      	b.n	800dfe8 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800dfd6:	f7f9 f881 	bl	80070dc <HAL_GetTick>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	68bb      	ldr	r3, [r7, #8]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	2b02      	cmp	r3, #2
 800dfe2:	d901      	bls.n	800dfe8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800dfe4:	2303      	movs	r3, #3
 800dfe6:	e086      	b.n	800e0f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800dfe8:	4b45      	ldr	r3, [pc, #276]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800dfea:	681b      	ldr	r3, [r3, #0]
 800dfec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d1f0      	bne.n	800dfd6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800dff4:	4b42      	ldr	r3, [pc, #264]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800dff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dff8:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800dffc:	687b      	ldr	r3, [r7, #4]
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	051b      	lsls	r3, r3, #20
 800e002:	493f      	ldr	r1, [pc, #252]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e004:	4313      	orrs	r3, r2
 800e006:	628b      	str	r3, [r1, #40]	; 0x28
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	685b      	ldr	r3, [r3, #4]
 800e00c:	3b01      	subs	r3, #1
 800e00e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e012:	687b      	ldr	r3, [r7, #4]
 800e014:	689b      	ldr	r3, [r3, #8]
 800e016:	3b01      	subs	r3, #1
 800e018:	025b      	lsls	r3, r3, #9
 800e01a:	b29b      	uxth	r3, r3
 800e01c:	431a      	orrs	r2, r3
 800e01e:	687b      	ldr	r3, [r7, #4]
 800e020:	68db      	ldr	r3, [r3, #12]
 800e022:	3b01      	subs	r3, #1
 800e024:	041b      	lsls	r3, r3, #16
 800e026:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e02a:	431a      	orrs	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	691b      	ldr	r3, [r3, #16]
 800e030:	3b01      	subs	r3, #1
 800e032:	061b      	lsls	r3, r3, #24
 800e034:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e038:	4931      	ldr	r1, [pc, #196]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e03a:	4313      	orrs	r3, r2
 800e03c:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e03e:	4b30      	ldr	r3, [pc, #192]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e042:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e046:	687b      	ldr	r3, [r7, #4]
 800e048:	695b      	ldr	r3, [r3, #20]
 800e04a:	492d      	ldr	r1, [pc, #180]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e04c:	4313      	orrs	r3, r2
 800e04e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e050:	4b2b      	ldr	r3, [pc, #172]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e054:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	699b      	ldr	r3, [r3, #24]
 800e05c:	4928      	ldr	r1, [pc, #160]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e05e:	4313      	orrs	r3, r2
 800e060:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e062:	4b27      	ldr	r3, [pc, #156]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e066:	4a26      	ldr	r2, [pc, #152]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e068:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e06c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e06e:	4b24      	ldr	r3, [pc, #144]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e070:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e072:	4b24      	ldr	r3, [pc, #144]	; (800e104 <RCCEx_PLL3_Config+0x160>)
 800e074:	4013      	ands	r3, r2
 800e076:	687a      	ldr	r2, [r7, #4]
 800e078:	69d2      	ldr	r2, [r2, #28]
 800e07a:	00d2      	lsls	r2, r2, #3
 800e07c:	4920      	ldr	r1, [pc, #128]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e07e:	4313      	orrs	r3, r2
 800e080:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e082:	4b1f      	ldr	r3, [pc, #124]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e084:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e086:	4a1e      	ldr	r2, [pc, #120]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e088:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e08c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	2b00      	cmp	r3, #0
 800e092:	d106      	bne.n	800e0a2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e094:	4b1a      	ldr	r3, [pc, #104]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e098:	4a19      	ldr	r2, [pc, #100]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e09a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e09e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e0a0:	e00f      	b.n	800e0c2 <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800e0a2:	683b      	ldr	r3, [r7, #0]
 800e0a4:	2b01      	cmp	r3, #1
 800e0a6:	d106      	bne.n	800e0b6 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e0a8:	4b15      	ldr	r3, [pc, #84]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e0aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ac:	4a14      	ldr	r2, [pc, #80]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e0ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e0b2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e0b4:	e005      	b.n	800e0c2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e0b6:	4b12      	ldr	r3, [pc, #72]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e0b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0ba:	4a11      	ldr	r2, [pc, #68]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e0bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e0c0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e0c2:	4b0f      	ldr	r3, [pc, #60]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	4a0e      	ldr	r2, [pc, #56]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e0c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e0cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e0ce:	f7f9 f805 	bl	80070dc <HAL_GetTick>
 800e0d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0d4:	e008      	b.n	800e0e8 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800e0d6:	f7f9 f801 	bl	80070dc <HAL_GetTick>
 800e0da:	4602      	mov	r2, r0
 800e0dc:	68bb      	ldr	r3, [r7, #8]
 800e0de:	1ad3      	subs	r3, r2, r3
 800e0e0:	2b02      	cmp	r3, #2
 800e0e2:	d901      	bls.n	800e0e8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e0e4:	2303      	movs	r3, #3
 800e0e6:	e006      	b.n	800e0f6 <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e0e8:	4b05      	ldr	r3, [pc, #20]	; (800e100 <RCCEx_PLL3_Config+0x15c>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e0f0:	2b00      	cmp	r3, #0
 800e0f2:	d0f0      	beq.n	800e0d6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e0f4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e0f6:	4618      	mov	r0, r3
 800e0f8:	3710      	adds	r7, #16
 800e0fa:	46bd      	mov	sp, r7
 800e0fc:	bd80      	pop	{r7, pc}
 800e0fe:	bf00      	nop
 800e100:	58024400 	.word	0x58024400
 800e104:	ffff0007 	.word	0xffff0007

0800e108 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b082      	sub	sp, #8
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e110:	687b      	ldr	r3, [r7, #4]
 800e112:	2b00      	cmp	r3, #0
 800e114:	d101      	bne.n	800e11a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e116:	2301      	movs	r3, #1
 800e118:	e049      	b.n	800e1ae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e120:	b2db      	uxtb	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	d106      	bne.n	800e134 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2200      	movs	r2, #0
 800e12a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e12e:	6878      	ldr	r0, [r7, #4]
 800e130:	f7f8 fd3c 	bl	8006bac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e134:	687b      	ldr	r3, [r7, #4]
 800e136:	2202      	movs	r2, #2
 800e138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	681a      	ldr	r2, [r3, #0]
 800e140:	687b      	ldr	r3, [r7, #4]
 800e142:	3304      	adds	r3, #4
 800e144:	4619      	mov	r1, r3
 800e146:	4610      	mov	r0, r2
 800e148:	f000 faee 	bl	800e728 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	2201      	movs	r2, #1
 800e150:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e154:	687b      	ldr	r3, [r7, #4]
 800e156:	2201      	movs	r2, #1
 800e158:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2201      	movs	r2, #1
 800e160:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2201      	movs	r2, #1
 800e168:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e16c:	687b      	ldr	r3, [r7, #4]
 800e16e:	2201      	movs	r2, #1
 800e170:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	2201      	movs	r2, #1
 800e178:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	2201      	movs	r2, #1
 800e180:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	2201      	movs	r2, #1
 800e188:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2201      	movs	r2, #1
 800e190:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	2201      	movs	r2, #1
 800e198:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2201      	movs	r2, #1
 800e1a0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e1a4:	687b      	ldr	r3, [r7, #4]
 800e1a6:	2201      	movs	r2, #1
 800e1a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e1ac:	2300      	movs	r3, #0
}
 800e1ae:	4618      	mov	r0, r3
 800e1b0:	3708      	adds	r7, #8
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bd80      	pop	{r7, pc}
	...

0800e1b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e1b8:	b480      	push	{r7}
 800e1ba:	b085      	sub	sp, #20
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e1c6:	b2db      	uxtb	r3, r3
 800e1c8:	2b01      	cmp	r3, #1
 800e1ca:	d001      	beq.n	800e1d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e1cc:	2301      	movs	r3, #1
 800e1ce:	e054      	b.n	800e27a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e1d0:	687b      	ldr	r3, [r7, #4]
 800e1d2:	2202      	movs	r2, #2
 800e1d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	68da      	ldr	r2, [r3, #12]
 800e1de:	687b      	ldr	r3, [r7, #4]
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	f042 0201 	orr.w	r2, r2, #1
 800e1e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e1e8:	687b      	ldr	r3, [r7, #4]
 800e1ea:	681b      	ldr	r3, [r3, #0]
 800e1ec:	4a26      	ldr	r2, [pc, #152]	; (800e288 <HAL_TIM_Base_Start_IT+0xd0>)
 800e1ee:	4293      	cmp	r3, r2
 800e1f0:	d022      	beq.n	800e238 <HAL_TIM_Base_Start_IT+0x80>
 800e1f2:	687b      	ldr	r3, [r7, #4]
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e1fa:	d01d      	beq.n	800e238 <HAL_TIM_Base_Start_IT+0x80>
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	4a22      	ldr	r2, [pc, #136]	; (800e28c <HAL_TIM_Base_Start_IT+0xd4>)
 800e202:	4293      	cmp	r3, r2
 800e204:	d018      	beq.n	800e238 <HAL_TIM_Base_Start_IT+0x80>
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	4a21      	ldr	r2, [pc, #132]	; (800e290 <HAL_TIM_Base_Start_IT+0xd8>)
 800e20c:	4293      	cmp	r3, r2
 800e20e:	d013      	beq.n	800e238 <HAL_TIM_Base_Start_IT+0x80>
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	4a1f      	ldr	r2, [pc, #124]	; (800e294 <HAL_TIM_Base_Start_IT+0xdc>)
 800e216:	4293      	cmp	r3, r2
 800e218:	d00e      	beq.n	800e238 <HAL_TIM_Base_Start_IT+0x80>
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	4a1e      	ldr	r2, [pc, #120]	; (800e298 <HAL_TIM_Base_Start_IT+0xe0>)
 800e220:	4293      	cmp	r3, r2
 800e222:	d009      	beq.n	800e238 <HAL_TIM_Base_Start_IT+0x80>
 800e224:	687b      	ldr	r3, [r7, #4]
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	4a1c      	ldr	r2, [pc, #112]	; (800e29c <HAL_TIM_Base_Start_IT+0xe4>)
 800e22a:	4293      	cmp	r3, r2
 800e22c:	d004      	beq.n	800e238 <HAL_TIM_Base_Start_IT+0x80>
 800e22e:	687b      	ldr	r3, [r7, #4]
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	4a1b      	ldr	r2, [pc, #108]	; (800e2a0 <HAL_TIM_Base_Start_IT+0xe8>)
 800e234:	4293      	cmp	r3, r2
 800e236:	d115      	bne.n	800e264 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	689a      	ldr	r2, [r3, #8]
 800e23e:	4b19      	ldr	r3, [pc, #100]	; (800e2a4 <HAL_TIM_Base_Start_IT+0xec>)
 800e240:	4013      	ands	r3, r2
 800e242:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e244:	68fb      	ldr	r3, [r7, #12]
 800e246:	2b06      	cmp	r3, #6
 800e248:	d015      	beq.n	800e276 <HAL_TIM_Base_Start_IT+0xbe>
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e250:	d011      	beq.n	800e276 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	681a      	ldr	r2, [r3, #0]
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	f042 0201 	orr.w	r2, r2, #1
 800e260:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e262:	e008      	b.n	800e276 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f042 0201 	orr.w	r2, r2, #1
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	e000      	b.n	800e278 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e276:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e278:	2300      	movs	r3, #0
}
 800e27a:	4618      	mov	r0, r3
 800e27c:	3714      	adds	r7, #20
 800e27e:	46bd      	mov	sp, r7
 800e280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e284:	4770      	bx	lr
 800e286:	bf00      	nop
 800e288:	40010000 	.word	0x40010000
 800e28c:	40000400 	.word	0x40000400
 800e290:	40000800 	.word	0x40000800
 800e294:	40000c00 	.word	0x40000c00
 800e298:	40010400 	.word	0x40010400
 800e29c:	40001800 	.word	0x40001800
 800e2a0:	40014000 	.word	0x40014000
 800e2a4:	00010007 	.word	0x00010007

0800e2a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800e2a8:	b580      	push	{r7, lr}
 800e2aa:	b082      	sub	sp, #8
 800e2ac:	af00      	add	r7, sp, #0
 800e2ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	681b      	ldr	r3, [r3, #0]
 800e2b4:	691b      	ldr	r3, [r3, #16]
 800e2b6:	f003 0302 	and.w	r3, r3, #2
 800e2ba:	2b02      	cmp	r3, #2
 800e2bc:	d122      	bne.n	800e304 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	681b      	ldr	r3, [r3, #0]
 800e2c2:	68db      	ldr	r3, [r3, #12]
 800e2c4:	f003 0302 	and.w	r3, r3, #2
 800e2c8:	2b02      	cmp	r3, #2
 800e2ca:	d11b      	bne.n	800e304 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800e2cc:	687b      	ldr	r3, [r7, #4]
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	f06f 0202 	mvn.w	r2, #2
 800e2d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	2201      	movs	r2, #1
 800e2da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	681b      	ldr	r3, [r3, #0]
 800e2e0:	699b      	ldr	r3, [r3, #24]
 800e2e2:	f003 0303 	and.w	r3, r3, #3
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d003      	beq.n	800e2f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800e2ea:	6878      	ldr	r0, [r7, #4]
 800e2ec:	f000 f9fe 	bl	800e6ec <HAL_TIM_IC_CaptureCallback>
 800e2f0:	e005      	b.n	800e2fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800e2f2:	6878      	ldr	r0, [r7, #4]
 800e2f4:	f000 f9f0 	bl	800e6d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e2f8:	6878      	ldr	r0, [r7, #4]
 800e2fa:	f000 fa01 	bl	800e700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2200      	movs	r2, #0
 800e302:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	691b      	ldr	r3, [r3, #16]
 800e30a:	f003 0304 	and.w	r3, r3, #4
 800e30e:	2b04      	cmp	r3, #4
 800e310:	d122      	bne.n	800e358 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	68db      	ldr	r3, [r3, #12]
 800e318:	f003 0304 	and.w	r3, r3, #4
 800e31c:	2b04      	cmp	r3, #4
 800e31e:	d11b      	bne.n	800e358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800e320:	687b      	ldr	r3, [r7, #4]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	f06f 0204 	mvn.w	r2, #4
 800e328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	2202      	movs	r2, #2
 800e32e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800e330:	687b      	ldr	r3, [r7, #4]
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	699b      	ldr	r3, [r3, #24]
 800e336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e33a:	2b00      	cmp	r3, #0
 800e33c:	d003      	beq.n	800e346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e33e:	6878      	ldr	r0, [r7, #4]
 800e340:	f000 f9d4 	bl	800e6ec <HAL_TIM_IC_CaptureCallback>
 800e344:	e005      	b.n	800e352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e346:	6878      	ldr	r0, [r7, #4]
 800e348:	f000 f9c6 	bl	800e6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e34c:	6878      	ldr	r0, [r7, #4]
 800e34e:	f000 f9d7 	bl	800e700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e352:	687b      	ldr	r3, [r7, #4]
 800e354:	2200      	movs	r2, #0
 800e356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	691b      	ldr	r3, [r3, #16]
 800e35e:	f003 0308 	and.w	r3, r3, #8
 800e362:	2b08      	cmp	r3, #8
 800e364:	d122      	bne.n	800e3ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800e366:	687b      	ldr	r3, [r7, #4]
 800e368:	681b      	ldr	r3, [r3, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	f003 0308 	and.w	r3, r3, #8
 800e370:	2b08      	cmp	r3, #8
 800e372:	d11b      	bne.n	800e3ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800e374:	687b      	ldr	r3, [r7, #4]
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	f06f 0208 	mvn.w	r2, #8
 800e37c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800e37e:	687b      	ldr	r3, [r7, #4]
 800e380:	2204      	movs	r2, #4
 800e382:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800e384:	687b      	ldr	r3, [r7, #4]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	69db      	ldr	r3, [r3, #28]
 800e38a:	f003 0303 	and.w	r3, r3, #3
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d003      	beq.n	800e39a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f000 f9aa 	bl	800e6ec <HAL_TIM_IC_CaptureCallback>
 800e398:	e005      	b.n	800e3a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e39a:	6878      	ldr	r0, [r7, #4]
 800e39c:	f000 f99c 	bl	800e6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3a0:	6878      	ldr	r0, [r7, #4]
 800e3a2:	f000 f9ad 	bl	800e700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3a6:	687b      	ldr	r3, [r7, #4]
 800e3a8:	2200      	movs	r2, #0
 800e3aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800e3ac:	687b      	ldr	r3, [r7, #4]
 800e3ae:	681b      	ldr	r3, [r3, #0]
 800e3b0:	691b      	ldr	r3, [r3, #16]
 800e3b2:	f003 0310 	and.w	r3, r3, #16
 800e3b6:	2b10      	cmp	r3, #16
 800e3b8:	d122      	bne.n	800e400 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	68db      	ldr	r3, [r3, #12]
 800e3c0:	f003 0310 	and.w	r3, r3, #16
 800e3c4:	2b10      	cmp	r3, #16
 800e3c6:	d11b      	bne.n	800e400 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800e3c8:	687b      	ldr	r3, [r7, #4]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	f06f 0210 	mvn.w	r2, #16
 800e3d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	2208      	movs	r2, #8
 800e3d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	69db      	ldr	r3, [r3, #28]
 800e3de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e3e2:	2b00      	cmp	r3, #0
 800e3e4:	d003      	beq.n	800e3ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800e3e6:	6878      	ldr	r0, [r7, #4]
 800e3e8:	f000 f980 	bl	800e6ec <HAL_TIM_IC_CaptureCallback>
 800e3ec:	e005      	b.n	800e3fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800e3ee:	6878      	ldr	r0, [r7, #4]
 800e3f0:	f000 f972 	bl	800e6d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800e3f4:	6878      	ldr	r0, [r7, #4]
 800e3f6:	f000 f983 	bl	800e700 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	2200      	movs	r2, #0
 800e3fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800e400:	687b      	ldr	r3, [r7, #4]
 800e402:	681b      	ldr	r3, [r3, #0]
 800e404:	691b      	ldr	r3, [r3, #16]
 800e406:	f003 0301 	and.w	r3, r3, #1
 800e40a:	2b01      	cmp	r3, #1
 800e40c:	d10e      	bne.n	800e42c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800e40e:	687b      	ldr	r3, [r7, #4]
 800e410:	681b      	ldr	r3, [r3, #0]
 800e412:	68db      	ldr	r3, [r3, #12]
 800e414:	f003 0301 	and.w	r3, r3, #1
 800e418:	2b01      	cmp	r3, #1
 800e41a:	d107      	bne.n	800e42c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800e41c:	687b      	ldr	r3, [r7, #4]
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	f06f 0201 	mvn.w	r2, #1
 800e424:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800e426:	6878      	ldr	r0, [r7, #4]
 800e428:	f7f8 f96e 	bl	8006708 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	691b      	ldr	r3, [r3, #16]
 800e432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e436:	2b80      	cmp	r3, #128	; 0x80
 800e438:	d10e      	bne.n	800e458 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	68db      	ldr	r3, [r3, #12]
 800e440:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e444:	2b80      	cmp	r3, #128	; 0x80
 800e446:	d107      	bne.n	800e458 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800e448:	687b      	ldr	r3, [r7, #4]
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800e450:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800e452:	6878      	ldr	r0, [r7, #4]
 800e454:	f000 fb38 	bl	800eac8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	681b      	ldr	r3, [r3, #0]
 800e45c:	691b      	ldr	r3, [r3, #16]
 800e45e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e462:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e466:	d10e      	bne.n	800e486 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800e468:	687b      	ldr	r3, [r7, #4]
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	68db      	ldr	r3, [r3, #12]
 800e46e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e472:	2b80      	cmp	r3, #128	; 0x80
 800e474:	d107      	bne.n	800e486 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800e476:	687b      	ldr	r3, [r7, #4]
 800e478:	681b      	ldr	r3, [r3, #0]
 800e47a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800e47e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 fb2b 	bl	800eadc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800e486:	687b      	ldr	r3, [r7, #4]
 800e488:	681b      	ldr	r3, [r3, #0]
 800e48a:	691b      	ldr	r3, [r3, #16]
 800e48c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e490:	2b40      	cmp	r3, #64	; 0x40
 800e492:	d10e      	bne.n	800e4b2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	68db      	ldr	r3, [r3, #12]
 800e49a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e49e:	2b40      	cmp	r3, #64	; 0x40
 800e4a0:	d107      	bne.n	800e4b2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800e4a2:	687b      	ldr	r3, [r7, #4]
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800e4aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800e4ac:	6878      	ldr	r0, [r7, #4]
 800e4ae:	f000 f931 	bl	800e714 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	681b      	ldr	r3, [r3, #0]
 800e4b6:	691b      	ldr	r3, [r3, #16]
 800e4b8:	f003 0320 	and.w	r3, r3, #32
 800e4bc:	2b20      	cmp	r3, #32
 800e4be:	d10e      	bne.n	800e4de <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	681b      	ldr	r3, [r3, #0]
 800e4c4:	68db      	ldr	r3, [r3, #12]
 800e4c6:	f003 0320 	and.w	r3, r3, #32
 800e4ca:	2b20      	cmp	r3, #32
 800e4cc:	d107      	bne.n	800e4de <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800e4ce:	687b      	ldr	r3, [r7, #4]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	f06f 0220 	mvn.w	r2, #32
 800e4d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800e4d8:	6878      	ldr	r0, [r7, #4]
 800e4da:	f000 faeb 	bl	800eab4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800e4de:	bf00      	nop
 800e4e0:	3708      	adds	r7, #8
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
	...

0800e4e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	b084      	sub	sp, #16
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	6078      	str	r0, [r7, #4]
 800e4f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e4f2:	2300      	movs	r3, #0
 800e4f4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e4fc:	2b01      	cmp	r3, #1
 800e4fe:	d101      	bne.n	800e504 <HAL_TIM_ConfigClockSource+0x1c>
 800e500:	2302      	movs	r3, #2
 800e502:	e0dc      	b.n	800e6be <HAL_TIM_ConfigClockSource+0x1d6>
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	2201      	movs	r2, #1
 800e508:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	2202      	movs	r2, #2
 800e510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	681b      	ldr	r3, [r3, #0]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800e51c:	68ba      	ldr	r2, [r7, #8]
 800e51e:	4b6a      	ldr	r3, [pc, #424]	; (800e6c8 <HAL_TIM_ConfigClockSource+0x1e0>)
 800e520:	4013      	ands	r3, r2
 800e522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e524:	68bb      	ldr	r3, [r7, #8]
 800e526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e52a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	68ba      	ldr	r2, [r7, #8]
 800e532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800e534:	683b      	ldr	r3, [r7, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4a64      	ldr	r2, [pc, #400]	; (800e6cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800e53a:	4293      	cmp	r3, r2
 800e53c:	f000 80a9 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e540:	4a62      	ldr	r2, [pc, #392]	; (800e6cc <HAL_TIM_ConfigClockSource+0x1e4>)
 800e542:	4293      	cmp	r3, r2
 800e544:	f200 80ae 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e548:	4a61      	ldr	r2, [pc, #388]	; (800e6d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e54a:	4293      	cmp	r3, r2
 800e54c:	f000 80a1 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e550:	4a5f      	ldr	r2, [pc, #380]	; (800e6d0 <HAL_TIM_ConfigClockSource+0x1e8>)
 800e552:	4293      	cmp	r3, r2
 800e554:	f200 80a6 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e558:	4a5e      	ldr	r2, [pc, #376]	; (800e6d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e55a:	4293      	cmp	r3, r2
 800e55c:	f000 8099 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e560:	4a5c      	ldr	r2, [pc, #368]	; (800e6d4 <HAL_TIM_ConfigClockSource+0x1ec>)
 800e562:	4293      	cmp	r3, r2
 800e564:	f200 809e 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e568:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e56c:	f000 8091 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e570:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800e574:	f200 8096 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e578:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e57c:	f000 8089 	beq.w	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e580:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e584:	f200 808e 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e588:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e58c:	d03e      	beq.n	800e60c <HAL_TIM_ConfigClockSource+0x124>
 800e58e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800e592:	f200 8087 	bhi.w	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e596:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e59a:	f000 8086 	beq.w	800e6aa <HAL_TIM_ConfigClockSource+0x1c2>
 800e59e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e5a2:	d87f      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5a4:	2b70      	cmp	r3, #112	; 0x70
 800e5a6:	d01a      	beq.n	800e5de <HAL_TIM_ConfigClockSource+0xf6>
 800e5a8:	2b70      	cmp	r3, #112	; 0x70
 800e5aa:	d87b      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5ac:	2b60      	cmp	r3, #96	; 0x60
 800e5ae:	d050      	beq.n	800e652 <HAL_TIM_ConfigClockSource+0x16a>
 800e5b0:	2b60      	cmp	r3, #96	; 0x60
 800e5b2:	d877      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5b4:	2b50      	cmp	r3, #80	; 0x50
 800e5b6:	d03c      	beq.n	800e632 <HAL_TIM_ConfigClockSource+0x14a>
 800e5b8:	2b50      	cmp	r3, #80	; 0x50
 800e5ba:	d873      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5bc:	2b40      	cmp	r3, #64	; 0x40
 800e5be:	d058      	beq.n	800e672 <HAL_TIM_ConfigClockSource+0x18a>
 800e5c0:	2b40      	cmp	r3, #64	; 0x40
 800e5c2:	d86f      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5c4:	2b30      	cmp	r3, #48	; 0x30
 800e5c6:	d064      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5c8:	2b30      	cmp	r3, #48	; 0x30
 800e5ca:	d86b      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5cc:	2b20      	cmp	r3, #32
 800e5ce:	d060      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5d0:	2b20      	cmp	r3, #32
 800e5d2:	d867      	bhi.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
 800e5d4:	2b00      	cmp	r3, #0
 800e5d6:	d05c      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5d8:	2b10      	cmp	r3, #16
 800e5da:	d05a      	beq.n	800e692 <HAL_TIM_ConfigClockSource+0x1aa>
 800e5dc:	e062      	b.n	800e6a4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6818      	ldr	r0, [r3, #0]
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	6899      	ldr	r1, [r3, #8]
 800e5e6:	683b      	ldr	r3, [r7, #0]
 800e5e8:	685a      	ldr	r2, [r3, #4]
 800e5ea:	683b      	ldr	r3, [r7, #0]
 800e5ec:	68db      	ldr	r3, [r3, #12]
 800e5ee:	f000 f9b3 	bl	800e958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800e5f2:	687b      	ldr	r3, [r7, #4]
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	689b      	ldr	r3, [r3, #8]
 800e5f8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800e5fa:	68bb      	ldr	r3, [r7, #8]
 800e5fc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800e600:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68ba      	ldr	r2, [r7, #8]
 800e608:	609a      	str	r2, [r3, #8]
      break;
 800e60a:	e04f      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6818      	ldr	r0, [r3, #0]
 800e610:	683b      	ldr	r3, [r7, #0]
 800e612:	6899      	ldr	r1, [r3, #8]
 800e614:	683b      	ldr	r3, [r7, #0]
 800e616:	685a      	ldr	r2, [r3, #4]
 800e618:	683b      	ldr	r3, [r7, #0]
 800e61a:	68db      	ldr	r3, [r3, #12]
 800e61c:	f000 f99c 	bl	800e958 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	681b      	ldr	r3, [r3, #0]
 800e624:	689a      	ldr	r2, [r3, #8]
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800e62e:	609a      	str	r2, [r3, #8]
      break;
 800e630:	e03c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	6818      	ldr	r0, [r3, #0]
 800e636:	683b      	ldr	r3, [r7, #0]
 800e638:	6859      	ldr	r1, [r3, #4]
 800e63a:	683b      	ldr	r3, [r7, #0]
 800e63c:	68db      	ldr	r3, [r3, #12]
 800e63e:	461a      	mov	r2, r3
 800e640:	f000 f90c 	bl	800e85c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2150      	movs	r1, #80	; 0x50
 800e64a:	4618      	mov	r0, r3
 800e64c:	f000 f966 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e650:	e02c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800e652:	687b      	ldr	r3, [r7, #4]
 800e654:	6818      	ldr	r0, [r3, #0]
 800e656:	683b      	ldr	r3, [r7, #0]
 800e658:	6859      	ldr	r1, [r3, #4]
 800e65a:	683b      	ldr	r3, [r7, #0]
 800e65c:	68db      	ldr	r3, [r3, #12]
 800e65e:	461a      	mov	r2, r3
 800e660:	f000 f92b 	bl	800e8ba <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	2160      	movs	r1, #96	; 0x60
 800e66a:	4618      	mov	r0, r3
 800e66c:	f000 f956 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e670:	e01c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	6818      	ldr	r0, [r3, #0]
 800e676:	683b      	ldr	r3, [r7, #0]
 800e678:	6859      	ldr	r1, [r3, #4]
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	68db      	ldr	r3, [r3, #12]
 800e67e:	461a      	mov	r2, r3
 800e680:	f000 f8ec 	bl	800e85c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800e684:	687b      	ldr	r3, [r7, #4]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	2140      	movs	r1, #64	; 0x40
 800e68a:	4618      	mov	r0, r3
 800e68c:	f000 f946 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e690:	e00c      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	681a      	ldr	r2, [r3, #0]
 800e696:	683b      	ldr	r3, [r7, #0]
 800e698:	681b      	ldr	r3, [r3, #0]
 800e69a:	4619      	mov	r1, r3
 800e69c:	4610      	mov	r0, r2
 800e69e:	f000 f93d 	bl	800e91c <TIM_ITRx_SetConfig>
      break;
 800e6a2:	e003      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800e6a4:	2301      	movs	r3, #1
 800e6a6:	73fb      	strb	r3, [r7, #15]
      break;
 800e6a8:	e000      	b.n	800e6ac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800e6aa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2201      	movs	r2, #1
 800e6b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	2200      	movs	r2, #0
 800e6b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800e6bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6be:	4618      	mov	r0, r3
 800e6c0:	3710      	adds	r7, #16
 800e6c2:	46bd      	mov	sp, r7
 800e6c4:	bd80      	pop	{r7, pc}
 800e6c6:	bf00      	nop
 800e6c8:	ffceff88 	.word	0xffceff88
 800e6cc:	00100040 	.word	0x00100040
 800e6d0:	00100030 	.word	0x00100030
 800e6d4:	00100020 	.word	0x00100020

0800e6d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800e6d8:	b480      	push	{r7}
 800e6da:	b083      	sub	sp, #12
 800e6dc:	af00      	add	r7, sp, #0
 800e6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800e6e0:	bf00      	nop
 800e6e2:	370c      	adds	r7, #12
 800e6e4:	46bd      	mov	sp, r7
 800e6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ea:	4770      	bx	lr

0800e6ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800e6ec:	b480      	push	{r7}
 800e6ee:	b083      	sub	sp, #12
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800e6f4:	bf00      	nop
 800e6f6:	370c      	adds	r7, #12
 800e6f8:	46bd      	mov	sp, r7
 800e6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6fe:	4770      	bx	lr

0800e700 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800e700:	b480      	push	{r7}
 800e702:	b083      	sub	sp, #12
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800e708:	bf00      	nop
 800e70a:	370c      	adds	r7, #12
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800e714:	b480      	push	{r7}
 800e716:	b083      	sub	sp, #12
 800e718:	af00      	add	r7, sp, #0
 800e71a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800e71c:	bf00      	nop
 800e71e:	370c      	adds	r7, #12
 800e720:	46bd      	mov	sp, r7
 800e722:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e726:	4770      	bx	lr

0800e728 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800e728:	b480      	push	{r7}
 800e72a:	b085      	sub	sp, #20
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
 800e730:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	4a40      	ldr	r2, [pc, #256]	; (800e83c <TIM_Base_SetConfig+0x114>)
 800e73c:	4293      	cmp	r3, r2
 800e73e:	d013      	beq.n	800e768 <TIM_Base_SetConfig+0x40>
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e746:	d00f      	beq.n	800e768 <TIM_Base_SetConfig+0x40>
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	4a3d      	ldr	r2, [pc, #244]	; (800e840 <TIM_Base_SetConfig+0x118>)
 800e74c:	4293      	cmp	r3, r2
 800e74e:	d00b      	beq.n	800e768 <TIM_Base_SetConfig+0x40>
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	4a3c      	ldr	r2, [pc, #240]	; (800e844 <TIM_Base_SetConfig+0x11c>)
 800e754:	4293      	cmp	r3, r2
 800e756:	d007      	beq.n	800e768 <TIM_Base_SetConfig+0x40>
 800e758:	687b      	ldr	r3, [r7, #4]
 800e75a:	4a3b      	ldr	r2, [pc, #236]	; (800e848 <TIM_Base_SetConfig+0x120>)
 800e75c:	4293      	cmp	r3, r2
 800e75e:	d003      	beq.n	800e768 <TIM_Base_SetConfig+0x40>
 800e760:	687b      	ldr	r3, [r7, #4]
 800e762:	4a3a      	ldr	r2, [pc, #232]	; (800e84c <TIM_Base_SetConfig+0x124>)
 800e764:	4293      	cmp	r3, r2
 800e766:	d108      	bne.n	800e77a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800e768:	68fb      	ldr	r3, [r7, #12]
 800e76a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e76e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800e770:	683b      	ldr	r3, [r7, #0]
 800e772:	685b      	ldr	r3, [r3, #4]
 800e774:	68fa      	ldr	r2, [r7, #12]
 800e776:	4313      	orrs	r3, r2
 800e778:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800e77a:	687b      	ldr	r3, [r7, #4]
 800e77c:	4a2f      	ldr	r2, [pc, #188]	; (800e83c <TIM_Base_SetConfig+0x114>)
 800e77e:	4293      	cmp	r3, r2
 800e780:	d01f      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e788:	d01b      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	4a2c      	ldr	r2, [pc, #176]	; (800e840 <TIM_Base_SetConfig+0x118>)
 800e78e:	4293      	cmp	r3, r2
 800e790:	d017      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4a2b      	ldr	r2, [pc, #172]	; (800e844 <TIM_Base_SetConfig+0x11c>)
 800e796:	4293      	cmp	r3, r2
 800e798:	d013      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	4a2a      	ldr	r2, [pc, #168]	; (800e848 <TIM_Base_SetConfig+0x120>)
 800e79e:	4293      	cmp	r3, r2
 800e7a0:	d00f      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	4a29      	ldr	r2, [pc, #164]	; (800e84c <TIM_Base_SetConfig+0x124>)
 800e7a6:	4293      	cmp	r3, r2
 800e7a8:	d00b      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	4a28      	ldr	r2, [pc, #160]	; (800e850 <TIM_Base_SetConfig+0x128>)
 800e7ae:	4293      	cmp	r3, r2
 800e7b0:	d007      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	4a27      	ldr	r2, [pc, #156]	; (800e854 <TIM_Base_SetConfig+0x12c>)
 800e7b6:	4293      	cmp	r3, r2
 800e7b8:	d003      	beq.n	800e7c2 <TIM_Base_SetConfig+0x9a>
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	4a26      	ldr	r2, [pc, #152]	; (800e858 <TIM_Base_SetConfig+0x130>)
 800e7be:	4293      	cmp	r3, r2
 800e7c0:	d108      	bne.n	800e7d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800e7c2:	68fb      	ldr	r3, [r7, #12]
 800e7c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e7c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	68db      	ldr	r3, [r3, #12]
 800e7ce:	68fa      	ldr	r2, [r7, #12]
 800e7d0:	4313      	orrs	r3, r2
 800e7d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800e7da:	683b      	ldr	r3, [r7, #0]
 800e7dc:	695b      	ldr	r3, [r3, #20]
 800e7de:	4313      	orrs	r3, r2
 800e7e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800e7e2:	687b      	ldr	r3, [r7, #4]
 800e7e4:	68fa      	ldr	r2, [r7, #12]
 800e7e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800e7e8:	683b      	ldr	r3, [r7, #0]
 800e7ea:	689a      	ldr	r2, [r3, #8]
 800e7ec:	687b      	ldr	r3, [r7, #4]
 800e7ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800e7f0:	683b      	ldr	r3, [r7, #0]
 800e7f2:	681a      	ldr	r2, [r3, #0]
 800e7f4:	687b      	ldr	r3, [r7, #4]
 800e7f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	4a10      	ldr	r2, [pc, #64]	; (800e83c <TIM_Base_SetConfig+0x114>)
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	d00f      	beq.n	800e820 <TIM_Base_SetConfig+0xf8>
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	4a12      	ldr	r2, [pc, #72]	; (800e84c <TIM_Base_SetConfig+0x124>)
 800e804:	4293      	cmp	r3, r2
 800e806:	d00b      	beq.n	800e820 <TIM_Base_SetConfig+0xf8>
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	4a11      	ldr	r2, [pc, #68]	; (800e850 <TIM_Base_SetConfig+0x128>)
 800e80c:	4293      	cmp	r3, r2
 800e80e:	d007      	beq.n	800e820 <TIM_Base_SetConfig+0xf8>
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	4a10      	ldr	r2, [pc, #64]	; (800e854 <TIM_Base_SetConfig+0x12c>)
 800e814:	4293      	cmp	r3, r2
 800e816:	d003      	beq.n	800e820 <TIM_Base_SetConfig+0xf8>
 800e818:	687b      	ldr	r3, [r7, #4]
 800e81a:	4a0f      	ldr	r2, [pc, #60]	; (800e858 <TIM_Base_SetConfig+0x130>)
 800e81c:	4293      	cmp	r3, r2
 800e81e:	d103      	bne.n	800e828 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	691a      	ldr	r2, [r3, #16]
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	2201      	movs	r2, #1
 800e82c:	615a      	str	r2, [r3, #20]
}
 800e82e:	bf00      	nop
 800e830:	3714      	adds	r7, #20
 800e832:	46bd      	mov	sp, r7
 800e834:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e838:	4770      	bx	lr
 800e83a:	bf00      	nop
 800e83c:	40010000 	.word	0x40010000
 800e840:	40000400 	.word	0x40000400
 800e844:	40000800 	.word	0x40000800
 800e848:	40000c00 	.word	0x40000c00
 800e84c:	40010400 	.word	0x40010400
 800e850:	40014000 	.word	0x40014000
 800e854:	40014400 	.word	0x40014400
 800e858:	40014800 	.word	0x40014800

0800e85c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e85c:	b480      	push	{r7}
 800e85e:	b087      	sub	sp, #28
 800e860:	af00      	add	r7, sp, #0
 800e862:	60f8      	str	r0, [r7, #12]
 800e864:	60b9      	str	r1, [r7, #8]
 800e866:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	6a1b      	ldr	r3, [r3, #32]
 800e86c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	6a1b      	ldr	r3, [r3, #32]
 800e872:	f023 0201 	bic.w	r2, r3, #1
 800e876:	68fb      	ldr	r3, [r7, #12]
 800e878:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	699b      	ldr	r3, [r3, #24]
 800e87e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800e880:	693b      	ldr	r3, [r7, #16]
 800e882:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800e886:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	011b      	lsls	r3, r3, #4
 800e88c:	693a      	ldr	r2, [r7, #16]
 800e88e:	4313      	orrs	r3, r2
 800e890:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800e892:	697b      	ldr	r3, [r7, #20]
 800e894:	f023 030a 	bic.w	r3, r3, #10
 800e898:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800e89a:	697a      	ldr	r2, [r7, #20]
 800e89c:	68bb      	ldr	r3, [r7, #8]
 800e89e:	4313      	orrs	r3, r2
 800e8a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800e8a2:	68fb      	ldr	r3, [r7, #12]
 800e8a4:	693a      	ldr	r2, [r7, #16]
 800e8a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	697a      	ldr	r2, [r7, #20]
 800e8ac:	621a      	str	r2, [r3, #32]
}
 800e8ae:	bf00      	nop
 800e8b0:	371c      	adds	r7, #28
 800e8b2:	46bd      	mov	sp, r7
 800e8b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b8:	4770      	bx	lr

0800e8ba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800e8ba:	b480      	push	{r7}
 800e8bc:	b087      	sub	sp, #28
 800e8be:	af00      	add	r7, sp, #0
 800e8c0:	60f8      	str	r0, [r7, #12]
 800e8c2:	60b9      	str	r1, [r7, #8]
 800e8c4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	6a1b      	ldr	r3, [r3, #32]
 800e8ca:	f023 0210 	bic.w	r2, r3, #16
 800e8ce:	68fb      	ldr	r3, [r7, #12]
 800e8d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800e8d2:	68fb      	ldr	r3, [r7, #12]
 800e8d4:	699b      	ldr	r3, [r3, #24]
 800e8d6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800e8d8:	68fb      	ldr	r3, [r7, #12]
 800e8da:	6a1b      	ldr	r3, [r3, #32]
 800e8dc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800e8de:	697b      	ldr	r3, [r7, #20]
 800e8e0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800e8e4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800e8e6:	687b      	ldr	r3, [r7, #4]
 800e8e8:	031b      	lsls	r3, r3, #12
 800e8ea:	697a      	ldr	r2, [r7, #20]
 800e8ec:	4313      	orrs	r3, r2
 800e8ee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800e8f6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800e8f8:	68bb      	ldr	r3, [r7, #8]
 800e8fa:	011b      	lsls	r3, r3, #4
 800e8fc:	693a      	ldr	r2, [r7, #16]
 800e8fe:	4313      	orrs	r3, r2
 800e900:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800e902:	68fb      	ldr	r3, [r7, #12]
 800e904:	697a      	ldr	r2, [r7, #20]
 800e906:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800e908:	68fb      	ldr	r3, [r7, #12]
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	621a      	str	r2, [r3, #32]
}
 800e90e:	bf00      	nop
 800e910:	371c      	adds	r7, #28
 800e912:	46bd      	mov	sp, r7
 800e914:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e918:	4770      	bx	lr
	...

0800e91c <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	6078      	str	r0, [r7, #4]
 800e924:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	689b      	ldr	r3, [r3, #8]
 800e92a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800e92c:	68fa      	ldr	r2, [r7, #12]
 800e92e:	4b09      	ldr	r3, [pc, #36]	; (800e954 <TIM_ITRx_SetConfig+0x38>)
 800e930:	4013      	ands	r3, r2
 800e932:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800e934:	683a      	ldr	r2, [r7, #0]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	4313      	orrs	r3, r2
 800e93a:	f043 0307 	orr.w	r3, r3, #7
 800e93e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	68fa      	ldr	r2, [r7, #12]
 800e944:	609a      	str	r2, [r3, #8]
}
 800e946:	bf00      	nop
 800e948:	3714      	adds	r7, #20
 800e94a:	46bd      	mov	sp, r7
 800e94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e950:	4770      	bx	lr
 800e952:	bf00      	nop
 800e954:	ffcfff8f 	.word	0xffcfff8f

0800e958 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800e958:	b480      	push	{r7}
 800e95a:	b087      	sub	sp, #28
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	60f8      	str	r0, [r7, #12]
 800e960:	60b9      	str	r1, [r7, #8]
 800e962:	607a      	str	r2, [r7, #4]
 800e964:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800e966:	68fb      	ldr	r3, [r7, #12]
 800e968:	689b      	ldr	r3, [r3, #8]
 800e96a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800e96c:	697b      	ldr	r3, [r7, #20]
 800e96e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800e972:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	021a      	lsls	r2, r3, #8
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	431a      	orrs	r2, r3
 800e97c:	68bb      	ldr	r3, [r7, #8]
 800e97e:	4313      	orrs	r3, r2
 800e980:	697a      	ldr	r2, [r7, #20]
 800e982:	4313      	orrs	r3, r2
 800e984:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	697a      	ldr	r2, [r7, #20]
 800e98a:	609a      	str	r2, [r3, #8]
}
 800e98c:	bf00      	nop
 800e98e:	371c      	adds	r7, #28
 800e990:	46bd      	mov	sp, r7
 800e992:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e996:	4770      	bx	lr

0800e998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800e998:	b480      	push	{r7}
 800e99a:	b085      	sub	sp, #20
 800e99c:	af00      	add	r7, sp, #0
 800e99e:	6078      	str	r0, [r7, #4]
 800e9a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800e9a8:	2b01      	cmp	r3, #1
 800e9aa:	d101      	bne.n	800e9b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800e9ac:	2302      	movs	r3, #2
 800e9ae:	e06d      	b.n	800ea8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	2201      	movs	r2, #1
 800e9b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	2202      	movs	r2, #2
 800e9bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	685b      	ldr	r3, [r3, #4]
 800e9c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	681b      	ldr	r3, [r3, #0]
 800e9cc:	689b      	ldr	r3, [r3, #8]
 800e9ce:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	4a30      	ldr	r2, [pc, #192]	; (800ea98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800e9d6:	4293      	cmp	r3, r2
 800e9d8:	d004      	beq.n	800e9e4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	681b      	ldr	r3, [r3, #0]
 800e9de:	4a2f      	ldr	r2, [pc, #188]	; (800ea9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800e9e0:	4293      	cmp	r3, r2
 800e9e2:	d108      	bne.n	800e9f6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800e9ea:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800e9ec:	683b      	ldr	r3, [r7, #0]
 800e9ee:	685b      	ldr	r3, [r3, #4]
 800e9f0:	68fa      	ldr	r2, [r7, #12]
 800e9f2:	4313      	orrs	r3, r2
 800e9f4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800e9fc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800e9fe:	683b      	ldr	r3, [r7, #0]
 800ea00:	681b      	ldr	r3, [r3, #0]
 800ea02:	68fa      	ldr	r2, [r7, #12]
 800ea04:	4313      	orrs	r3, r2
 800ea06:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	68fa      	ldr	r2, [r7, #12]
 800ea0e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ea10:	687b      	ldr	r3, [r7, #4]
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	4a20      	ldr	r2, [pc, #128]	; (800ea98 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800ea16:	4293      	cmp	r3, r2
 800ea18:	d022      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ea22:	d01d      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea24:	687b      	ldr	r3, [r7, #4]
 800ea26:	681b      	ldr	r3, [r3, #0]
 800ea28:	4a1d      	ldr	r2, [pc, #116]	; (800eaa0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800ea2a:	4293      	cmp	r3, r2
 800ea2c:	d018      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea2e:	687b      	ldr	r3, [r7, #4]
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	4a1c      	ldr	r2, [pc, #112]	; (800eaa4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800ea34:	4293      	cmp	r3, r2
 800ea36:	d013      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	4a1a      	ldr	r2, [pc, #104]	; (800eaa8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800ea3e:	4293      	cmp	r3, r2
 800ea40:	d00e      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	681b      	ldr	r3, [r3, #0]
 800ea46:	4a15      	ldr	r2, [pc, #84]	; (800ea9c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800ea48:	4293      	cmp	r3, r2
 800ea4a:	d009      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4a16      	ldr	r2, [pc, #88]	; (800eaac <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800ea52:	4293      	cmp	r3, r2
 800ea54:	d004      	beq.n	800ea60 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	4a15      	ldr	r2, [pc, #84]	; (800eab0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800ea5c:	4293      	cmp	r3, r2
 800ea5e:	d10c      	bne.n	800ea7a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ea60:	68bb      	ldr	r3, [r7, #8]
 800ea62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ea66:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ea68:	683b      	ldr	r3, [r7, #0]
 800ea6a:	689b      	ldr	r3, [r3, #8]
 800ea6c:	68ba      	ldr	r2, [r7, #8]
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	68ba      	ldr	r2, [r7, #8]
 800ea78:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2201      	movs	r2, #1
 800ea7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2200      	movs	r2, #0
 800ea86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ea8a:	2300      	movs	r3, #0
}
 800ea8c:	4618      	mov	r0, r3
 800ea8e:	3714      	adds	r7, #20
 800ea90:	46bd      	mov	sp, r7
 800ea92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea96:	4770      	bx	lr
 800ea98:	40010000 	.word	0x40010000
 800ea9c:	40010400 	.word	0x40010400
 800eaa0:	40000400 	.word	0x40000400
 800eaa4:	40000800 	.word	0x40000800
 800eaa8:	40000c00 	.word	0x40000c00
 800eaac:	40001800 	.word	0x40001800
 800eab0:	40014000 	.word	0x40014000

0800eab4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800eab4:	b480      	push	{r7}
 800eab6:	b083      	sub	sp, #12
 800eab8:	af00      	add	r7, sp, #0
 800eaba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800eabc:	bf00      	nop
 800eabe:	370c      	adds	r7, #12
 800eac0:	46bd      	mov	sp, r7
 800eac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eac6:	4770      	bx	lr

0800eac8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800eac8:	b480      	push	{r7}
 800eaca:	b083      	sub	sp, #12
 800eacc:	af00      	add	r7, sp, #0
 800eace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ead0:	bf00      	nop
 800ead2:	370c      	adds	r7, #12
 800ead4:	46bd      	mov	sp, r7
 800ead6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eada:	4770      	bx	lr

0800eadc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800eadc:	b480      	push	{r7}
 800eade:	b083      	sub	sp, #12
 800eae0:	af00      	add	r7, sp, #0
 800eae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800eae4:	bf00      	nop
 800eae6:	370c      	adds	r7, #12
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b082      	sub	sp, #8
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d101      	bne.n	800eb02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800eafe:	2301      	movs	r3, #1
 800eb00:	e042      	b.n	800eb88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d106      	bne.n	800eb1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	2200      	movs	r2, #0
 800eb10:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800eb14:	6878      	ldr	r0, [r7, #4]
 800eb16:	f7f8 f8d5 	bl	8006cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	2224      	movs	r2, #36	; 0x24
 800eb1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	681a      	ldr	r2, [r3, #0]
 800eb28:	687b      	ldr	r3, [r7, #4]
 800eb2a:	681b      	ldr	r3, [r3, #0]
 800eb2c:	f022 0201 	bic.w	r2, r2, #1
 800eb30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800eb32:	6878      	ldr	r0, [r7, #4]
 800eb34:	f000 fcea 	bl	800f50c <UART_SetConfig>
 800eb38:	4603      	mov	r3, r0
 800eb3a:	2b01      	cmp	r3, #1
 800eb3c:	d101      	bne.n	800eb42 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800eb3e:	2301      	movs	r3, #1
 800eb40:	e022      	b.n	800eb88 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800eb42:	687b      	ldr	r3, [r7, #4]
 800eb44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb46:	2b00      	cmp	r3, #0
 800eb48:	d002      	beq.n	800eb50 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800eb4a:	6878      	ldr	r0, [r7, #4]
 800eb4c:	f001 fa46 	bl	800ffdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800eb50:	687b      	ldr	r3, [r7, #4]
 800eb52:	681b      	ldr	r3, [r3, #0]
 800eb54:	685a      	ldr	r2, [r3, #4]
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800eb5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800eb60:	687b      	ldr	r3, [r7, #4]
 800eb62:	681b      	ldr	r3, [r3, #0]
 800eb64:	689a      	ldr	r2, [r3, #8]
 800eb66:	687b      	ldr	r3, [r7, #4]
 800eb68:	681b      	ldr	r3, [r3, #0]
 800eb6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800eb6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800eb70:	687b      	ldr	r3, [r7, #4]
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	681a      	ldr	r2, [r3, #0]
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	f042 0201 	orr.w	r2, r2, #1
 800eb7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800eb80:	6878      	ldr	r0, [r7, #4]
 800eb82:	f001 facd 	bl	8010120 <UART_CheckIdleState>
 800eb86:	4603      	mov	r3, r0
}
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3708      	adds	r7, #8
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b08a      	sub	sp, #40	; 0x28
 800eb94:	af02      	add	r7, sp, #8
 800eb96:	60f8      	str	r0, [r7, #12]
 800eb98:	60b9      	str	r1, [r7, #8]
 800eb9a:	603b      	str	r3, [r7, #0]
 800eb9c:	4613      	mov	r3, r2
 800eb9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800eba0:	68fb      	ldr	r3, [r7, #12]
 800eba2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eba6:	2b20      	cmp	r3, #32
 800eba8:	f040 8083 	bne.w	800ecb2 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800ebac:	68bb      	ldr	r3, [r7, #8]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d002      	beq.n	800ebb8 <HAL_UART_Transmit+0x28>
 800ebb2:	88fb      	ldrh	r3, [r7, #6]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d101      	bne.n	800ebbc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800ebb8:	2301      	movs	r3, #1
 800ebba:	e07b      	b.n	800ecb4 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800ebbc:	68fb      	ldr	r3, [r7, #12]
 800ebbe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ebc2:	2b01      	cmp	r3, #1
 800ebc4:	d101      	bne.n	800ebca <HAL_UART_Transmit+0x3a>
 800ebc6:	2302      	movs	r3, #2
 800ebc8:	e074      	b.n	800ecb4 <HAL_UART_Transmit+0x124>
 800ebca:	68fb      	ldr	r3, [r7, #12]
 800ebcc:	2201      	movs	r2, #1
 800ebce:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	2221      	movs	r2, #33	; 0x21
 800ebde:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800ebe2:	f7f8 fa7b 	bl	80070dc <HAL_GetTick>
 800ebe6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800ebe8:	68fb      	ldr	r3, [r7, #12]
 800ebea:	88fa      	ldrh	r2, [r7, #6]
 800ebec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	88fa      	ldrh	r2, [r7, #6]
 800ebf4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	689b      	ldr	r3, [r3, #8]
 800ebfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ec00:	d108      	bne.n	800ec14 <HAL_UART_Transmit+0x84>
 800ec02:	68fb      	ldr	r3, [r7, #12]
 800ec04:	691b      	ldr	r3, [r3, #16]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d104      	bne.n	800ec14 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800ec0a:	2300      	movs	r3, #0
 800ec0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800ec0e:	68bb      	ldr	r3, [r7, #8]
 800ec10:	61bb      	str	r3, [r7, #24]
 800ec12:	e003      	b.n	800ec1c <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 800ec14:	68bb      	ldr	r3, [r7, #8]
 800ec16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ec18:	2300      	movs	r3, #0
 800ec1a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800ec1c:	68fb      	ldr	r3, [r7, #12]
 800ec1e:	2200      	movs	r2, #0
 800ec20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 800ec24:	e02c      	b.n	800ec80 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ec26:	683b      	ldr	r3, [r7, #0]
 800ec28:	9300      	str	r3, [sp, #0]
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2200      	movs	r2, #0
 800ec2e:	2180      	movs	r1, #128	; 0x80
 800ec30:	68f8      	ldr	r0, [r7, #12]
 800ec32:	f001 fac0 	bl	80101b6 <UART_WaitOnFlagUntilTimeout>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d001      	beq.n	800ec40 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800ec3c:	2303      	movs	r3, #3
 800ec3e:	e039      	b.n	800ecb4 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 800ec40:	69fb      	ldr	r3, [r7, #28]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d10b      	bne.n	800ec5e <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ec46:	69bb      	ldr	r3, [r7, #24]
 800ec48:	881b      	ldrh	r3, [r3, #0]
 800ec4a:	461a      	mov	r2, r3
 800ec4c:	68fb      	ldr	r3, [r7, #12]
 800ec4e:	681b      	ldr	r3, [r3, #0]
 800ec50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ec54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ec56:	69bb      	ldr	r3, [r7, #24]
 800ec58:	3302      	adds	r3, #2
 800ec5a:	61bb      	str	r3, [r7, #24]
 800ec5c:	e007      	b.n	800ec6e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ec5e:	69fb      	ldr	r3, [r7, #28]
 800ec60:	781a      	ldrb	r2, [r3, #0]
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	681b      	ldr	r3, [r3, #0]
 800ec66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ec68:	69fb      	ldr	r3, [r7, #28]
 800ec6a:	3301      	adds	r3, #1
 800ec6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec74:	b29b      	uxth	r3, r3
 800ec76:	3b01      	subs	r3, #1
 800ec78:	b29a      	uxth	r2, r3
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ec86:	b29b      	uxth	r3, r3
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d1cc      	bne.n	800ec26 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ec8c:	683b      	ldr	r3, [r7, #0]
 800ec8e:	9300      	str	r3, [sp, #0]
 800ec90:	697b      	ldr	r3, [r7, #20]
 800ec92:	2200      	movs	r2, #0
 800ec94:	2140      	movs	r1, #64	; 0x40
 800ec96:	68f8      	ldr	r0, [r7, #12]
 800ec98:	f001 fa8d 	bl	80101b6 <UART_WaitOnFlagUntilTimeout>
 800ec9c:	4603      	mov	r3, r0
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d001      	beq.n	800eca6 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 800eca2:	2303      	movs	r3, #3
 800eca4:	e006      	b.n	800ecb4 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800eca6:	68fb      	ldr	r3, [r7, #12]
 800eca8:	2220      	movs	r2, #32
 800ecaa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800ecae:	2300      	movs	r3, #0
 800ecb0:	e000      	b.n	800ecb4 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 800ecb2:	2302      	movs	r3, #2
  }
}
 800ecb4:	4618      	mov	r0, r3
 800ecb6:	3720      	adds	r7, #32
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	bd80      	pop	{r7, pc}

0800ecbc <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ecbc:	b580      	push	{r7, lr}
 800ecbe:	b08a      	sub	sp, #40	; 0x28
 800ecc0:	af00      	add	r7, sp, #0
 800ecc2:	60f8      	str	r0, [r7, #12]
 800ecc4:	60b9      	str	r1, [r7, #8]
 800ecc6:	4613      	mov	r3, r2
 800ecc8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecd0:	2b20      	cmp	r3, #32
 800ecd2:	d142      	bne.n	800ed5a <HAL_UART_Receive_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800ecd4:	68bb      	ldr	r3, [r7, #8]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d002      	beq.n	800ece0 <HAL_UART_Receive_DMA+0x24>
 800ecda:	88fb      	ldrh	r3, [r7, #6]
 800ecdc:	2b00      	cmp	r3, #0
 800ecde:	d101      	bne.n	800ece4 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800ece0:	2301      	movs	r3, #1
 800ece2:	e03b      	b.n	800ed5c <HAL_UART_Receive_DMA+0xa0>
    }

    __HAL_LOCK(huart);
 800ece4:	68fb      	ldr	r3, [r7, #12]
 800ece6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800ecea:	2b01      	cmp	r3, #1
 800ecec:	d101      	bne.n	800ecf2 <HAL_UART_Receive_DMA+0x36>
 800ecee:	2302      	movs	r3, #2
 800ecf0:	e034      	b.n	800ed5c <HAL_UART_Receive_DMA+0xa0>
 800ecf2:	68fb      	ldr	r3, [r7, #12]
 800ecf4:	2201      	movs	r2, #1
 800ecf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	4a17      	ldr	r2, [pc, #92]	; (800ed64 <HAL_UART_Receive_DMA+0xa8>)
 800ed06:	4293      	cmp	r3, r2
 800ed08:	d01f      	beq.n	800ed4a <HAL_UART_Receive_DMA+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ed0a:	68fb      	ldr	r3, [r7, #12]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	685b      	ldr	r3, [r3, #4]
 800ed10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800ed14:	2b00      	cmp	r3, #0
 800ed16:	d018      	beq.n	800ed4a <HAL_UART_Receive_DMA+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ed18:	68fb      	ldr	r3, [r7, #12]
 800ed1a:	681b      	ldr	r3, [r3, #0]
 800ed1c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ed1e:	697b      	ldr	r3, [r7, #20]
 800ed20:	e853 3f00 	ldrex	r3, [r3]
 800ed24:	613b      	str	r3, [r7, #16]
   return(result);
 800ed26:	693b      	ldr	r3, [r7, #16]
 800ed28:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ed2c:	627b      	str	r3, [r7, #36]	; 0x24
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	461a      	mov	r2, r3
 800ed34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed36:	623b      	str	r3, [r7, #32]
 800ed38:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ed3a:	69f9      	ldr	r1, [r7, #28]
 800ed3c:	6a3a      	ldr	r2, [r7, #32]
 800ed3e:	e841 2300 	strex	r3, r2, [r1]
 800ed42:	61bb      	str	r3, [r7, #24]
   return(result);
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d1e6      	bne.n	800ed18 <HAL_UART_Receive_DMA+0x5c>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800ed4a:	88fb      	ldrh	r3, [r7, #6]
 800ed4c:	461a      	mov	r2, r3
 800ed4e:	68b9      	ldr	r1, [r7, #8]
 800ed50:	68f8      	ldr	r0, [r7, #12]
 800ed52:	f001 faf9 	bl	8010348 <UART_Start_Receive_DMA>
 800ed56:	4603      	mov	r3, r0
 800ed58:	e000      	b.n	800ed5c <HAL_UART_Receive_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800ed5a:	2302      	movs	r3, #2
  }
}
 800ed5c:	4618      	mov	r0, r3
 800ed5e:	3728      	adds	r7, #40	; 0x28
 800ed60:	46bd      	mov	sp, r7
 800ed62:	bd80      	pop	{r7, pc}
 800ed64:	58000c00 	.word	0x58000c00

0800ed68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ed68:	b580      	push	{r7, lr}
 800ed6a:	b0ba      	sub	sp, #232	; 0xe8
 800ed6c:	af00      	add	r7, sp, #0
 800ed6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ed70:	687b      	ldr	r3, [r7, #4]
 800ed72:	681b      	ldr	r3, [r3, #0]
 800ed74:	69db      	ldr	r3, [r3, #28]
 800ed76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	681b      	ldr	r3, [r3, #0]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	689b      	ldr	r3, [r3, #8]
 800ed8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ed8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ed92:	f640 030f 	movw	r3, #2063	; 0x80f
 800ed96:	4013      	ands	r3, r2
 800ed98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ed9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d11b      	bne.n	800eddc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800eda4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eda8:	f003 0320 	and.w	r3, r3, #32
 800edac:	2b00      	cmp	r3, #0
 800edae:	d015      	beq.n	800eddc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800edb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800edb4:	f003 0320 	and.w	r3, r3, #32
 800edb8:	2b00      	cmp	r3, #0
 800edba:	d105      	bne.n	800edc8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800edbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800edc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d009      	beq.n	800eddc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edcc:	2b00      	cmp	r3, #0
 800edce:	f000 835a 	beq.w	800f486 <HAL_UART_IRQHandler+0x71e>
      {
        huart->RxISR(huart);
 800edd2:	687b      	ldr	r3, [r7, #4]
 800edd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800edd6:	6878      	ldr	r0, [r7, #4]
 800edd8:	4798      	blx	r3
      }
      return;
 800edda:	e354      	b.n	800f486 <HAL_UART_IRQHandler+0x71e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800eddc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f000 811f 	beq.w	800f024 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800ede6:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800edea:	4b8b      	ldr	r3, [pc, #556]	; (800f018 <HAL_UART_IRQHandler+0x2b0>)
 800edec:	4013      	ands	r3, r2
 800edee:	2b00      	cmp	r3, #0
 800edf0:	d106      	bne.n	800ee00 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800edf2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800edf6:	4b89      	ldr	r3, [pc, #548]	; (800f01c <HAL_UART_IRQHandler+0x2b4>)
 800edf8:	4013      	ands	r3, r2
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	f000 8112 	beq.w	800f024 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ee00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee04:	f003 0301 	and.w	r3, r3, #1
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	d011      	beq.n	800ee30 <HAL_UART_IRQHandler+0xc8>
 800ee0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ee10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ee14:	2b00      	cmp	r3, #0
 800ee16:	d00b      	beq.n	800ee30 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	681b      	ldr	r3, [r3, #0]
 800ee1c:	2201      	movs	r2, #1
 800ee1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee26:	f043 0201 	orr.w	r2, r3, #1
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee34:	f003 0302 	and.w	r3, r3, #2
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d011      	beq.n	800ee60 <HAL_UART_IRQHandler+0xf8>
 800ee3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee40:	f003 0301 	and.w	r3, r3, #1
 800ee44:	2b00      	cmp	r3, #0
 800ee46:	d00b      	beq.n	800ee60 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	2202      	movs	r2, #2
 800ee4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee56:	f043 0204 	orr.w	r2, r3, #4
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ee60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee64:	f003 0304 	and.w	r3, r3, #4
 800ee68:	2b00      	cmp	r3, #0
 800ee6a:	d011      	beq.n	800ee90 <HAL_UART_IRQHandler+0x128>
 800ee6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ee70:	f003 0301 	and.w	r3, r3, #1
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00b      	beq.n	800ee90 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	681b      	ldr	r3, [r3, #0]
 800ee7c:	2204      	movs	r2, #4
 800ee7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ee86:	f043 0202 	orr.w	r2, r3, #2
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ee90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ee94:	f003 0308 	and.w	r3, r3, #8
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d017      	beq.n	800eecc <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800ee9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eea0:	f003 0320 	and.w	r3, r3, #32
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d105      	bne.n	800eeb4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800eea8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 800eeac:	4b5a      	ldr	r3, [pc, #360]	; (800f018 <HAL_UART_IRQHandler+0x2b0>)
 800eeae:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800eeb0:	2b00      	cmp	r3, #0
 800eeb2:	d00b      	beq.n	800eecc <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	2208      	movs	r2, #8
 800eeba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eec2:	f043 0208 	orr.w	r2, r3, #8
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800eecc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800eed0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800eed4:	2b00      	cmp	r3, #0
 800eed6:	d012      	beq.n	800eefe <HAL_UART_IRQHandler+0x196>
 800eed8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800eedc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d00c      	beq.n	800eefe <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800eeec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eef4:	f043 0220 	orr.w	r2, r3, #32
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f000 82c0 	beq.w	800f48a <HAL_UART_IRQHandler+0x722>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800ef0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ef0e:	f003 0320 	and.w	r3, r3, #32
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d013      	beq.n	800ef3e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800ef16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ef1a:	f003 0320 	and.w	r3, r3, #32
 800ef1e:	2b00      	cmp	r3, #0
 800ef20:	d105      	bne.n	800ef2e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800ef22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ef26:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800ef2a:	2b00      	cmp	r3, #0
 800ef2c:	d007      	beq.n	800ef3e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef32:	2b00      	cmp	r3, #0
 800ef34:	d003      	beq.n	800ef3e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ef3a:	6878      	ldr	r0, [r7, #4]
 800ef3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ef44:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ef48:	687b      	ldr	r3, [r7, #4]
 800ef4a:	681b      	ldr	r3, [r3, #0]
 800ef4c:	689b      	ldr	r3, [r3, #8]
 800ef4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef52:	2b40      	cmp	r3, #64	; 0x40
 800ef54:	d005      	beq.n	800ef62 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ef56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ef5a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ef5e:	2b00      	cmp	r3, #0
 800ef60:	d04f      	beq.n	800f002 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f001 fada 	bl	801051c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	689b      	ldr	r3, [r3, #8]
 800ef6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ef72:	2b40      	cmp	r3, #64	; 0x40
 800ef74:	d141      	bne.n	800effa <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ef76:	687b      	ldr	r3, [r7, #4]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	3308      	adds	r3, #8
 800ef7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ef84:	e853 3f00 	ldrex	r3, [r3]
 800ef88:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800ef8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ef90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ef94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800ef98:	687b      	ldr	r3, [r7, #4]
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	3308      	adds	r3, #8
 800ef9e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800efa2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800efa6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800efaa:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800efae:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800efb2:	e841 2300 	strex	r3, r2, [r1]
 800efb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800efba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800efbe:	2b00      	cmp	r3, #0
 800efc0:	d1d9      	bne.n	800ef76 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efc6:	2b00      	cmp	r3, #0
 800efc8:	d013      	beq.n	800eff2 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efce:	4a14      	ldr	r2, [pc, #80]	; (800f020 <HAL_UART_IRQHandler+0x2b8>)
 800efd0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efd6:	4618      	mov	r0, r3
 800efd8:	f7f9 fac4 	bl	8008564 <HAL_DMA_Abort_IT>
 800efdc:	4603      	mov	r3, r0
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d017      	beq.n	800f012 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800efe2:	687b      	ldr	r3, [r7, #4]
 800efe4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800efe6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 800efec:	4610      	mov	r0, r2
 800efee:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eff0:	e00f      	b.n	800f012 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800eff2:	6878      	ldr	r0, [r7, #4]
 800eff4:	f000 fa74 	bl	800f4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800eff8:	e00b      	b.n	800f012 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f000 fa70 	bl	800f4e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f000:	e007      	b.n	800f012 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800f002:	6878      	ldr	r0, [r7, #4]
 800f004:	f000 fa6c 	bl	800f4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	2200      	movs	r2, #0
 800f00c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 800f010:	e23b      	b.n	800f48a <HAL_UART_IRQHandler+0x722>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f012:	bf00      	nop
    return;
 800f014:	e239      	b.n	800f48a <HAL_UART_IRQHandler+0x722>
 800f016:	bf00      	nop
 800f018:	10000001 	.word	0x10000001
 800f01c:	04000120 	.word	0x04000120
 800f020:	080107c3 	.word	0x080107c3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f028:	2b01      	cmp	r3, #1
 800f02a:	f040 81ce 	bne.w	800f3ca <HAL_UART_IRQHandler+0x662>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800f02e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f032:	f003 0310 	and.w	r3, r3, #16
 800f036:	2b00      	cmp	r3, #0
 800f038:	f000 81c7 	beq.w	800f3ca <HAL_UART_IRQHandler+0x662>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800f03c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f040:	f003 0310 	and.w	r3, r3, #16
 800f044:	2b00      	cmp	r3, #0
 800f046:	f000 81c0 	beq.w	800f3ca <HAL_UART_IRQHandler+0x662>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800f04a:	687b      	ldr	r3, [r7, #4]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	2210      	movs	r2, #16
 800f050:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	689b      	ldr	r3, [r3, #8]
 800f058:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f05c:	2b40      	cmp	r3, #64	; 0x40
 800f05e:	f040 813b 	bne.w	800f2d8 <HAL_UART_IRQHandler+0x570>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800f062:	687b      	ldr	r3, [r7, #4]
 800f064:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	4a8b      	ldr	r2, [pc, #556]	; (800f298 <HAL_UART_IRQHandler+0x530>)
 800f06a:	4293      	cmp	r3, r2
 800f06c:	d059      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f06e:	687b      	ldr	r3, [r7, #4]
 800f070:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	4a89      	ldr	r2, [pc, #548]	; (800f29c <HAL_UART_IRQHandler+0x534>)
 800f076:	4293      	cmp	r3, r2
 800f078:	d053      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f07e:	681b      	ldr	r3, [r3, #0]
 800f080:	4a87      	ldr	r2, [pc, #540]	; (800f2a0 <HAL_UART_IRQHandler+0x538>)
 800f082:	4293      	cmp	r3, r2
 800f084:	d04d      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f086:	687b      	ldr	r3, [r7, #4]
 800f088:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	4a85      	ldr	r2, [pc, #532]	; (800f2a4 <HAL_UART_IRQHandler+0x53c>)
 800f08e:	4293      	cmp	r3, r2
 800f090:	d047      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f092:	687b      	ldr	r3, [r7, #4]
 800f094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f096:	681b      	ldr	r3, [r3, #0]
 800f098:	4a83      	ldr	r2, [pc, #524]	; (800f2a8 <HAL_UART_IRQHandler+0x540>)
 800f09a:	4293      	cmp	r3, r2
 800f09c:	d041      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f09e:	687b      	ldr	r3, [r7, #4]
 800f0a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0a2:	681b      	ldr	r3, [r3, #0]
 800f0a4:	4a81      	ldr	r2, [pc, #516]	; (800f2ac <HAL_UART_IRQHandler+0x544>)
 800f0a6:	4293      	cmp	r3, r2
 800f0a8:	d03b      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0ae:	681b      	ldr	r3, [r3, #0]
 800f0b0:	4a7f      	ldr	r2, [pc, #508]	; (800f2b0 <HAL_UART_IRQHandler+0x548>)
 800f0b2:	4293      	cmp	r3, r2
 800f0b4:	d035      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0ba:	681b      	ldr	r3, [r3, #0]
 800f0bc:	4a7d      	ldr	r2, [pc, #500]	; (800f2b4 <HAL_UART_IRQHandler+0x54c>)
 800f0be:	4293      	cmp	r3, r2
 800f0c0:	d02f      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	4a7b      	ldr	r2, [pc, #492]	; (800f2b8 <HAL_UART_IRQHandler+0x550>)
 800f0ca:	4293      	cmp	r3, r2
 800f0cc:	d029      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0d2:	681b      	ldr	r3, [r3, #0]
 800f0d4:	4a79      	ldr	r2, [pc, #484]	; (800f2bc <HAL_UART_IRQHandler+0x554>)
 800f0d6:	4293      	cmp	r3, r2
 800f0d8:	d023      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	4a77      	ldr	r2, [pc, #476]	; (800f2c0 <HAL_UART_IRQHandler+0x558>)
 800f0e2:	4293      	cmp	r3, r2
 800f0e4:	d01d      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0e6:	687b      	ldr	r3, [r7, #4]
 800f0e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	4a75      	ldr	r2, [pc, #468]	; (800f2c4 <HAL_UART_IRQHandler+0x55c>)
 800f0ee:	4293      	cmp	r3, r2
 800f0f0:	d017      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0f2:	687b      	ldr	r3, [r7, #4]
 800f0f4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f0f6:	681b      	ldr	r3, [r3, #0]
 800f0f8:	4a73      	ldr	r2, [pc, #460]	; (800f2c8 <HAL_UART_IRQHandler+0x560>)
 800f0fa:	4293      	cmp	r3, r2
 800f0fc:	d011      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f102:	681b      	ldr	r3, [r3, #0]
 800f104:	4a71      	ldr	r2, [pc, #452]	; (800f2cc <HAL_UART_IRQHandler+0x564>)
 800f106:	4293      	cmp	r3, r2
 800f108:	d00b      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f10e:	681b      	ldr	r3, [r3, #0]
 800f110:	4a6f      	ldr	r2, [pc, #444]	; (800f2d0 <HAL_UART_IRQHandler+0x568>)
 800f112:	4293      	cmp	r3, r2
 800f114:	d005      	beq.n	800f122 <HAL_UART_IRQHandler+0x3ba>
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	4a6d      	ldr	r2, [pc, #436]	; (800f2d4 <HAL_UART_IRQHandler+0x56c>)
 800f11e:	4293      	cmp	r3, r2
 800f120:	d105      	bne.n	800f12e <HAL_UART_IRQHandler+0x3c6>
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f126:	681b      	ldr	r3, [r3, #0]
 800f128:	685b      	ldr	r3, [r3, #4]
 800f12a:	b29b      	uxth	r3, r3
 800f12c:	e004      	b.n	800f138 <HAL_UART_IRQHandler+0x3d0>
 800f12e:	687b      	ldr	r3, [r7, #4]
 800f130:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	685b      	ldr	r3, [r3, #4]
 800f136:	b29b      	uxth	r3, r3
 800f138:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800f13c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800f140:	2b00      	cmp	r3, #0
 800f142:	f000 81a4 	beq.w	800f48e <HAL_UART_IRQHandler+0x726>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f14c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f150:	429a      	cmp	r2, r3
 800f152:	f080 819c 	bcs.w	800f48e <HAL_UART_IRQHandler+0x726>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800f15c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f164:	69db      	ldr	r3, [r3, #28]
 800f166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f16a:	f000 8086 	beq.w	800f27a <HAL_UART_IRQHandler+0x512>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f176:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800f17a:	e853 3f00 	ldrex	r3, [r3]
 800f17e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800f182:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800f186:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f18a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	461a      	mov	r2, r3
 800f194:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800f198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800f19c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1a0:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800f1a4:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800f1a8:	e841 2300 	strex	r3, r2, [r1]
 800f1ac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800f1b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800f1b4:	2b00      	cmp	r3, #0
 800f1b6:	d1da      	bne.n	800f16e <HAL_UART_IRQHandler+0x406>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800f1b8:	687b      	ldr	r3, [r7, #4]
 800f1ba:	681b      	ldr	r3, [r3, #0]
 800f1bc:	3308      	adds	r3, #8
 800f1be:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f1c2:	e853 3f00 	ldrex	r3, [r3]
 800f1c6:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800f1c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f1ca:	f023 0301 	bic.w	r3, r3, #1
 800f1ce:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	3308      	adds	r3, #8
 800f1d8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800f1dc:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800f1e0:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f1e2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800f1e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800f1e8:	e841 2300 	strex	r3, r2, [r1]
 800f1ec:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800f1ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f1f0:	2b00      	cmp	r3, #0
 800f1f2:	d1e1      	bne.n	800f1b8 <HAL_UART_IRQHandler+0x450>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	3308      	adds	r3, #8
 800f1fa:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f1fc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800f1fe:	e853 3f00 	ldrex	r3, [r3]
 800f202:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800f204:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800f206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f20a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	681b      	ldr	r3, [r3, #0]
 800f212:	3308      	adds	r3, #8
 800f214:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800f218:	66fa      	str	r2, [r7, #108]	; 0x6c
 800f21a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f21c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800f21e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800f220:	e841 2300 	strex	r3, r2, [r1]
 800f224:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800f226:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d1e3      	bne.n	800f1f4 <HAL_UART_IRQHandler+0x48c>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	2220      	movs	r2, #32
 800f230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	2200      	movs	r2, #0
 800f238:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	681b      	ldr	r3, [r3, #0]
 800f23e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f240:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f242:	e853 3f00 	ldrex	r3, [r3]
 800f246:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800f248:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800f24a:	f023 0310 	bic.w	r3, r3, #16
 800f24e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	461a      	mov	r2, r3
 800f258:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800f25c:	65bb      	str	r3, [r7, #88]	; 0x58
 800f25e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f260:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800f262:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800f264:	e841 2300 	strex	r3, r2, [r1]
 800f268:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800f26a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800f26c:	2b00      	cmp	r3, #0
 800f26e:	d1e4      	bne.n	800f23a <HAL_UART_IRQHandler+0x4d2>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f274:	4618      	mov	r0, r3
 800f276:	f7f8 fe57 	bl	8007f28 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f286:	b29b      	uxth	r3, r3
 800f288:	1ad3      	subs	r3, r2, r3
 800f28a:	b29b      	uxth	r3, r3
 800f28c:	4619      	mov	r1, r3
 800f28e:	6878      	ldr	r0, [r7, #4]
 800f290:	f000 f930 	bl	800f4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f294:	e0fb      	b.n	800f48e <HAL_UART_IRQHandler+0x726>
 800f296:	bf00      	nop
 800f298:	40020010 	.word	0x40020010
 800f29c:	40020028 	.word	0x40020028
 800f2a0:	40020040 	.word	0x40020040
 800f2a4:	40020058 	.word	0x40020058
 800f2a8:	40020070 	.word	0x40020070
 800f2ac:	40020088 	.word	0x40020088
 800f2b0:	400200a0 	.word	0x400200a0
 800f2b4:	400200b8 	.word	0x400200b8
 800f2b8:	40020410 	.word	0x40020410
 800f2bc:	40020428 	.word	0x40020428
 800f2c0:	40020440 	.word	0x40020440
 800f2c4:	40020458 	.word	0x40020458
 800f2c8:	40020470 	.word	0x40020470
 800f2cc:	40020488 	.word	0x40020488
 800f2d0:	400204a0 	.word	0x400204a0
 800f2d4:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800f2d8:	687b      	ldr	r3, [r7, #4]
 800f2da:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2e4:	b29b      	uxth	r3, r3
 800f2e6:	1ad3      	subs	r3, r2, r3
 800f2e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800f2f2:	b29b      	uxth	r3, r3
 800f2f4:	2b00      	cmp	r3, #0
 800f2f6:	f000 80cc 	beq.w	800f492 <HAL_UART_IRQHandler+0x72a>
          && (nb_rx_data > 0U))
 800f2fa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f2fe:	2b00      	cmp	r3, #0
 800f300:	f000 80c7 	beq.w	800f492 <HAL_UART_IRQHandler+0x72a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f304:	687b      	ldr	r3, [r7, #4]
 800f306:	681b      	ldr	r3, [r3, #0]
 800f308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f30a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f30c:	e853 3f00 	ldrex	r3, [r3]
 800f310:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800f312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f314:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f318:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800f31c:	687b      	ldr	r3, [r7, #4]
 800f31e:	681b      	ldr	r3, [r3, #0]
 800f320:	461a      	mov	r2, r3
 800f322:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800f326:	647b      	str	r3, [r7, #68]	; 0x44
 800f328:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f32a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800f32c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f32e:	e841 2300 	strex	r3, r2, [r1]
 800f332:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800f334:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f336:	2b00      	cmp	r3, #0
 800f338:	d1e4      	bne.n	800f304 <HAL_UART_IRQHandler+0x59c>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	3308      	adds	r3, #8
 800f340:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f344:	e853 3f00 	ldrex	r3, [r3]
 800f348:	623b      	str	r3, [r7, #32]
   return(result);
 800f34a:	6a3a      	ldr	r2, [r7, #32]
 800f34c:	4b54      	ldr	r3, [pc, #336]	; (800f4a0 <HAL_UART_IRQHandler+0x738>)
 800f34e:	4013      	ands	r3, r2
 800f350:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	3308      	adds	r3, #8
 800f35a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800f35e:	633a      	str	r2, [r7, #48]	; 0x30
 800f360:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f362:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800f364:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f366:	e841 2300 	strex	r3, r2, [r1]
 800f36a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800f36c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d1e3      	bne.n	800f33a <HAL_UART_IRQHandler+0x5d2>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	2220      	movs	r2, #32
 800f376:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	2200      	movs	r2, #0
 800f37e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	681b      	ldr	r3, [r3, #0]
 800f38a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f38c:	693b      	ldr	r3, [r7, #16]
 800f38e:	e853 3f00 	ldrex	r3, [r3]
 800f392:	60fb      	str	r3, [r7, #12]
   return(result);
 800f394:	68fb      	ldr	r3, [r7, #12]
 800f396:	f023 0310 	bic.w	r3, r3, #16
 800f39a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800f39e:	687b      	ldr	r3, [r7, #4]
 800f3a0:	681b      	ldr	r3, [r3, #0]
 800f3a2:	461a      	mov	r2, r3
 800f3a4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800f3a8:	61fb      	str	r3, [r7, #28]
 800f3aa:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f3ac:	69b9      	ldr	r1, [r7, #24]
 800f3ae:	69fa      	ldr	r2, [r7, #28]
 800f3b0:	e841 2300 	strex	r3, r2, [r1]
 800f3b4:	617b      	str	r3, [r7, #20]
   return(result);
 800f3b6:	697b      	ldr	r3, [r7, #20]
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d1e4      	bne.n	800f386 <HAL_UART_IRQHandler+0x61e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800f3bc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800f3c0:	4619      	mov	r1, r3
 800f3c2:	6878      	ldr	r0, [r7, #4]
 800f3c4:	f000 f896 	bl	800f4f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800f3c8:	e063      	b.n	800f492 <HAL_UART_IRQHandler+0x72a>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800f3ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3ce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d00e      	beq.n	800f3f4 <HAL_UART_IRQHandler+0x68c>
 800f3d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f3da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800f3de:	2b00      	cmp	r3, #0
 800f3e0:	d008      	beq.n	800f3f4 <HAL_UART_IRQHandler+0x68c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800f3ea:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800f3ec:	6878      	ldr	r0, [r7, #4]
 800f3ee:	f001 fa29 	bl	8010844 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f3f2:	e051      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800f3f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f3f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	d014      	beq.n	800f42a <HAL_UART_IRQHandler+0x6c2>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800f400:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f404:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d105      	bne.n	800f418 <HAL_UART_IRQHandler+0x6b0>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800f40c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f410:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f414:	2b00      	cmp	r3, #0
 800f416:	d008      	beq.n	800f42a <HAL_UART_IRQHandler+0x6c2>
  {
    if (huart->TxISR != NULL)
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d03a      	beq.n	800f496 <HAL_UART_IRQHandler+0x72e>
    {
      huart->TxISR(huart);
 800f420:	687b      	ldr	r3, [r7, #4]
 800f422:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f424:	6878      	ldr	r0, [r7, #4]
 800f426:	4798      	blx	r3
    }
    return;
 800f428:	e035      	b.n	800f496 <HAL_UART_IRQHandler+0x72e>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800f42a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f42e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f432:	2b00      	cmp	r3, #0
 800f434:	d009      	beq.n	800f44a <HAL_UART_IRQHandler+0x6e2>
 800f436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f43a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d003      	beq.n	800f44a <HAL_UART_IRQHandler+0x6e2>
  {
    UART_EndTransmit_IT(huart);
 800f442:	6878      	ldr	r0, [r7, #4]
 800f444:	f001 f9d3 	bl	80107ee <UART_EndTransmit_IT>
    return;
 800f448:	e026      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800f44a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f44e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f452:	2b00      	cmp	r3, #0
 800f454:	d009      	beq.n	800f46a <HAL_UART_IRQHandler+0x702>
 800f456:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f45a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d003      	beq.n	800f46a <HAL_UART_IRQHandler+0x702>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800f462:	6878      	ldr	r0, [r7, #4]
 800f464:	f001 fa02 	bl	801086c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f468:	e016      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800f46a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f46e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800f472:	2b00      	cmp	r3, #0
 800f474:	d010      	beq.n	800f498 <HAL_UART_IRQHandler+0x730>
 800f476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	da0c      	bge.n	800f498 <HAL_UART_IRQHandler+0x730>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800f47e:	6878      	ldr	r0, [r7, #4]
 800f480:	f001 f9ea 	bl	8010858 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800f484:	e008      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
      return;
 800f486:	bf00      	nop
 800f488:	e006      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
    return;
 800f48a:	bf00      	nop
 800f48c:	e004      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
      return;
 800f48e:	bf00      	nop
 800f490:	e002      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
      return;
 800f492:	bf00      	nop
 800f494:	e000      	b.n	800f498 <HAL_UART_IRQHandler+0x730>
    return;
 800f496:	bf00      	nop
  }
}
 800f498:	37e8      	adds	r7, #232	; 0xe8
 800f49a:	46bd      	mov	sp, r7
 800f49c:	bd80      	pop	{r7, pc}
 800f49e:	bf00      	nop
 800f4a0:	effffffe 	.word	0xeffffffe

0800f4a4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800f4a4:	b480      	push	{r7}
 800f4a6:	b083      	sub	sp, #12
 800f4a8:	af00      	add	r7, sp, #0
 800f4aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800f4ac:	bf00      	nop
 800f4ae:	370c      	adds	r7, #12
 800f4b0:	46bd      	mov	sp, r7
 800f4b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b6:	4770      	bx	lr

0800f4b8 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800f4b8:	b480      	push	{r7}
 800f4ba:	b083      	sub	sp, #12
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800f4c0:	bf00      	nop
 800f4c2:	370c      	adds	r7, #12
 800f4c4:	46bd      	mov	sp, r7
 800f4c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4ca:	4770      	bx	lr

0800f4cc <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800f4cc:	b480      	push	{r7}
 800f4ce:	b083      	sub	sp, #12
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800f4d4:	bf00      	nop
 800f4d6:	370c      	adds	r7, #12
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4de:	4770      	bx	lr

0800f4e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800f4e0:	b480      	push	{r7}
 800f4e2:	b083      	sub	sp, #12
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800f4e8:	bf00      	nop
 800f4ea:	370c      	adds	r7, #12
 800f4ec:	46bd      	mov	sp, r7
 800f4ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4f2:	4770      	bx	lr

0800f4f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800f4f4:	b480      	push	{r7}
 800f4f6:	b083      	sub	sp, #12
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
 800f4fc:	460b      	mov	r3, r1
 800f4fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800f500:	bf00      	nop
 800f502:	370c      	adds	r7, #12
 800f504:	46bd      	mov	sp, r7
 800f506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f50a:	4770      	bx	lr

0800f50c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800f50c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800f510:	b092      	sub	sp, #72	; 0x48
 800f512:	af00      	add	r7, sp, #0
 800f514:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800f516:	2300      	movs	r3, #0
 800f518:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800f51c:	697b      	ldr	r3, [r7, #20]
 800f51e:	689a      	ldr	r2, [r3, #8]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	691b      	ldr	r3, [r3, #16]
 800f524:	431a      	orrs	r2, r3
 800f526:	697b      	ldr	r3, [r7, #20]
 800f528:	695b      	ldr	r3, [r3, #20]
 800f52a:	431a      	orrs	r2, r3
 800f52c:	697b      	ldr	r3, [r7, #20]
 800f52e:	69db      	ldr	r3, [r3, #28]
 800f530:	4313      	orrs	r3, r2
 800f532:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800f534:	697b      	ldr	r3, [r7, #20]
 800f536:	681b      	ldr	r3, [r3, #0]
 800f538:	681a      	ldr	r2, [r3, #0]
 800f53a:	4bbe      	ldr	r3, [pc, #760]	; (800f834 <UART_SetConfig+0x328>)
 800f53c:	4013      	ands	r3, r2
 800f53e:	697a      	ldr	r2, [r7, #20]
 800f540:	6812      	ldr	r2, [r2, #0]
 800f542:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f544:	430b      	orrs	r3, r1
 800f546:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800f548:	697b      	ldr	r3, [r7, #20]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	685b      	ldr	r3, [r3, #4]
 800f54e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800f552:	697b      	ldr	r3, [r7, #20]
 800f554:	68da      	ldr	r2, [r3, #12]
 800f556:	697b      	ldr	r3, [r7, #20]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	430a      	orrs	r2, r1
 800f55c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	699b      	ldr	r3, [r3, #24]
 800f562:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800f564:	697b      	ldr	r3, [r7, #20]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	4ab3      	ldr	r2, [pc, #716]	; (800f838 <UART_SetConfig+0x32c>)
 800f56a:	4293      	cmp	r3, r2
 800f56c:	d004      	beq.n	800f578 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800f56e:	697b      	ldr	r3, [r7, #20]
 800f570:	6a1b      	ldr	r3, [r3, #32]
 800f572:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f574:	4313      	orrs	r3, r2
 800f576:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800f578:	697b      	ldr	r3, [r7, #20]
 800f57a:	681b      	ldr	r3, [r3, #0]
 800f57c:	689a      	ldr	r2, [r3, #8]
 800f57e:	4baf      	ldr	r3, [pc, #700]	; (800f83c <UART_SetConfig+0x330>)
 800f580:	4013      	ands	r3, r2
 800f582:	697a      	ldr	r2, [r7, #20]
 800f584:	6812      	ldr	r2, [r2, #0]
 800f586:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f588:	430b      	orrs	r3, r1
 800f58a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800f58c:	697b      	ldr	r3, [r7, #20]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f592:	f023 010f 	bic.w	r1, r3, #15
 800f596:	697b      	ldr	r3, [r7, #20]
 800f598:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f59a:	697b      	ldr	r3, [r7, #20]
 800f59c:	681b      	ldr	r3, [r3, #0]
 800f59e:	430a      	orrs	r2, r1
 800f5a0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	681b      	ldr	r3, [r3, #0]
 800f5a6:	4aa6      	ldr	r2, [pc, #664]	; (800f840 <UART_SetConfig+0x334>)
 800f5a8:	4293      	cmp	r3, r2
 800f5aa:	d177      	bne.n	800f69c <UART_SetConfig+0x190>
 800f5ac:	4ba5      	ldr	r3, [pc, #660]	; (800f844 <UART_SetConfig+0x338>)
 800f5ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f5b0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f5b4:	2b28      	cmp	r3, #40	; 0x28
 800f5b6:	d86d      	bhi.n	800f694 <UART_SetConfig+0x188>
 800f5b8:	a201      	add	r2, pc, #4	; (adr r2, 800f5c0 <UART_SetConfig+0xb4>)
 800f5ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f5be:	bf00      	nop
 800f5c0:	0800f665 	.word	0x0800f665
 800f5c4:	0800f695 	.word	0x0800f695
 800f5c8:	0800f695 	.word	0x0800f695
 800f5cc:	0800f695 	.word	0x0800f695
 800f5d0:	0800f695 	.word	0x0800f695
 800f5d4:	0800f695 	.word	0x0800f695
 800f5d8:	0800f695 	.word	0x0800f695
 800f5dc:	0800f695 	.word	0x0800f695
 800f5e0:	0800f66d 	.word	0x0800f66d
 800f5e4:	0800f695 	.word	0x0800f695
 800f5e8:	0800f695 	.word	0x0800f695
 800f5ec:	0800f695 	.word	0x0800f695
 800f5f0:	0800f695 	.word	0x0800f695
 800f5f4:	0800f695 	.word	0x0800f695
 800f5f8:	0800f695 	.word	0x0800f695
 800f5fc:	0800f695 	.word	0x0800f695
 800f600:	0800f675 	.word	0x0800f675
 800f604:	0800f695 	.word	0x0800f695
 800f608:	0800f695 	.word	0x0800f695
 800f60c:	0800f695 	.word	0x0800f695
 800f610:	0800f695 	.word	0x0800f695
 800f614:	0800f695 	.word	0x0800f695
 800f618:	0800f695 	.word	0x0800f695
 800f61c:	0800f695 	.word	0x0800f695
 800f620:	0800f67d 	.word	0x0800f67d
 800f624:	0800f695 	.word	0x0800f695
 800f628:	0800f695 	.word	0x0800f695
 800f62c:	0800f695 	.word	0x0800f695
 800f630:	0800f695 	.word	0x0800f695
 800f634:	0800f695 	.word	0x0800f695
 800f638:	0800f695 	.word	0x0800f695
 800f63c:	0800f695 	.word	0x0800f695
 800f640:	0800f685 	.word	0x0800f685
 800f644:	0800f695 	.word	0x0800f695
 800f648:	0800f695 	.word	0x0800f695
 800f64c:	0800f695 	.word	0x0800f695
 800f650:	0800f695 	.word	0x0800f695
 800f654:	0800f695 	.word	0x0800f695
 800f658:	0800f695 	.word	0x0800f695
 800f65c:	0800f695 	.word	0x0800f695
 800f660:	0800f68d 	.word	0x0800f68d
 800f664:	2301      	movs	r3, #1
 800f666:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f66a:	e222      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f66c:	2304      	movs	r3, #4
 800f66e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f672:	e21e      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f674:	2308      	movs	r3, #8
 800f676:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f67a:	e21a      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f67c:	2310      	movs	r3, #16
 800f67e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f682:	e216      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f684:	2320      	movs	r3, #32
 800f686:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f68a:	e212      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f68c:	2340      	movs	r3, #64	; 0x40
 800f68e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f692:	e20e      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f694:	2380      	movs	r3, #128	; 0x80
 800f696:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f69a:	e20a      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f69c:	697b      	ldr	r3, [r7, #20]
 800f69e:	681b      	ldr	r3, [r3, #0]
 800f6a0:	4a69      	ldr	r2, [pc, #420]	; (800f848 <UART_SetConfig+0x33c>)
 800f6a2:	4293      	cmp	r3, r2
 800f6a4:	d130      	bne.n	800f708 <UART_SetConfig+0x1fc>
 800f6a6:	4b67      	ldr	r3, [pc, #412]	; (800f844 <UART_SetConfig+0x338>)
 800f6a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f6aa:	f003 0307 	and.w	r3, r3, #7
 800f6ae:	2b05      	cmp	r3, #5
 800f6b0:	d826      	bhi.n	800f700 <UART_SetConfig+0x1f4>
 800f6b2:	a201      	add	r2, pc, #4	; (adr r2, 800f6b8 <UART_SetConfig+0x1ac>)
 800f6b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f6b8:	0800f6d1 	.word	0x0800f6d1
 800f6bc:	0800f6d9 	.word	0x0800f6d9
 800f6c0:	0800f6e1 	.word	0x0800f6e1
 800f6c4:	0800f6e9 	.word	0x0800f6e9
 800f6c8:	0800f6f1 	.word	0x0800f6f1
 800f6cc:	0800f6f9 	.word	0x0800f6f9
 800f6d0:	2300      	movs	r3, #0
 800f6d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6d6:	e1ec      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f6d8:	2304      	movs	r3, #4
 800f6da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6de:	e1e8      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f6e0:	2308      	movs	r3, #8
 800f6e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6e6:	e1e4      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f6e8:	2310      	movs	r3, #16
 800f6ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6ee:	e1e0      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f6f0:	2320      	movs	r3, #32
 800f6f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6f6:	e1dc      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f6f8:	2340      	movs	r3, #64	; 0x40
 800f6fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f6fe:	e1d8      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f700:	2380      	movs	r3, #128	; 0x80
 800f702:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f706:	e1d4      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f708:	697b      	ldr	r3, [r7, #20]
 800f70a:	681b      	ldr	r3, [r3, #0]
 800f70c:	4a4f      	ldr	r2, [pc, #316]	; (800f84c <UART_SetConfig+0x340>)
 800f70e:	4293      	cmp	r3, r2
 800f710:	d130      	bne.n	800f774 <UART_SetConfig+0x268>
 800f712:	4b4c      	ldr	r3, [pc, #304]	; (800f844 <UART_SetConfig+0x338>)
 800f714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f716:	f003 0307 	and.w	r3, r3, #7
 800f71a:	2b05      	cmp	r3, #5
 800f71c:	d826      	bhi.n	800f76c <UART_SetConfig+0x260>
 800f71e:	a201      	add	r2, pc, #4	; (adr r2, 800f724 <UART_SetConfig+0x218>)
 800f720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f724:	0800f73d 	.word	0x0800f73d
 800f728:	0800f745 	.word	0x0800f745
 800f72c:	0800f74d 	.word	0x0800f74d
 800f730:	0800f755 	.word	0x0800f755
 800f734:	0800f75d 	.word	0x0800f75d
 800f738:	0800f765 	.word	0x0800f765
 800f73c:	2300      	movs	r3, #0
 800f73e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f742:	e1b6      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f744:	2304      	movs	r3, #4
 800f746:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f74a:	e1b2      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f74c:	2308      	movs	r3, #8
 800f74e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f752:	e1ae      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f754:	2310      	movs	r3, #16
 800f756:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f75a:	e1aa      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f75c:	2320      	movs	r3, #32
 800f75e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f762:	e1a6      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f764:	2340      	movs	r3, #64	; 0x40
 800f766:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f76a:	e1a2      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f76c:	2380      	movs	r3, #128	; 0x80
 800f76e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f772:	e19e      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f774:	697b      	ldr	r3, [r7, #20]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	4a35      	ldr	r2, [pc, #212]	; (800f850 <UART_SetConfig+0x344>)
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d130      	bne.n	800f7e0 <UART_SetConfig+0x2d4>
 800f77e:	4b31      	ldr	r3, [pc, #196]	; (800f844 <UART_SetConfig+0x338>)
 800f780:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f782:	f003 0307 	and.w	r3, r3, #7
 800f786:	2b05      	cmp	r3, #5
 800f788:	d826      	bhi.n	800f7d8 <UART_SetConfig+0x2cc>
 800f78a:	a201      	add	r2, pc, #4	; (adr r2, 800f790 <UART_SetConfig+0x284>)
 800f78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f790:	0800f7a9 	.word	0x0800f7a9
 800f794:	0800f7b1 	.word	0x0800f7b1
 800f798:	0800f7b9 	.word	0x0800f7b9
 800f79c:	0800f7c1 	.word	0x0800f7c1
 800f7a0:	0800f7c9 	.word	0x0800f7c9
 800f7a4:	0800f7d1 	.word	0x0800f7d1
 800f7a8:	2300      	movs	r3, #0
 800f7aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ae:	e180      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f7b0:	2304      	movs	r3, #4
 800f7b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7b6:	e17c      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f7b8:	2308      	movs	r3, #8
 800f7ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7be:	e178      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f7c0:	2310      	movs	r3, #16
 800f7c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7c6:	e174      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f7c8:	2320      	movs	r3, #32
 800f7ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7ce:	e170      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f7d0:	2340      	movs	r3, #64	; 0x40
 800f7d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7d6:	e16c      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f7d8:	2380      	movs	r3, #128	; 0x80
 800f7da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f7de:	e168      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f7e0:	697b      	ldr	r3, [r7, #20]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	4a1b      	ldr	r2, [pc, #108]	; (800f854 <UART_SetConfig+0x348>)
 800f7e6:	4293      	cmp	r3, r2
 800f7e8:	d142      	bne.n	800f870 <UART_SetConfig+0x364>
 800f7ea:	4b16      	ldr	r3, [pc, #88]	; (800f844 <UART_SetConfig+0x338>)
 800f7ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f7ee:	f003 0307 	and.w	r3, r3, #7
 800f7f2:	2b05      	cmp	r3, #5
 800f7f4:	d838      	bhi.n	800f868 <UART_SetConfig+0x35c>
 800f7f6:	a201      	add	r2, pc, #4	; (adr r2, 800f7fc <UART_SetConfig+0x2f0>)
 800f7f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f7fc:	0800f815 	.word	0x0800f815
 800f800:	0800f81d 	.word	0x0800f81d
 800f804:	0800f825 	.word	0x0800f825
 800f808:	0800f82d 	.word	0x0800f82d
 800f80c:	0800f859 	.word	0x0800f859
 800f810:	0800f861 	.word	0x0800f861
 800f814:	2300      	movs	r3, #0
 800f816:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f81a:	e14a      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f81c:	2304      	movs	r3, #4
 800f81e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f822:	e146      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f824:	2308      	movs	r3, #8
 800f826:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f82a:	e142      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f82c:	2310      	movs	r3, #16
 800f82e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f832:	e13e      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f834:	cfff69f3 	.word	0xcfff69f3
 800f838:	58000c00 	.word	0x58000c00
 800f83c:	11fff4ff 	.word	0x11fff4ff
 800f840:	40011000 	.word	0x40011000
 800f844:	58024400 	.word	0x58024400
 800f848:	40004400 	.word	0x40004400
 800f84c:	40004800 	.word	0x40004800
 800f850:	40004c00 	.word	0x40004c00
 800f854:	40005000 	.word	0x40005000
 800f858:	2320      	movs	r3, #32
 800f85a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f85e:	e128      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f860:	2340      	movs	r3, #64	; 0x40
 800f862:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f866:	e124      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f868:	2380      	movs	r3, #128	; 0x80
 800f86a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f86e:	e120      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f870:	697b      	ldr	r3, [r7, #20]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	4acb      	ldr	r2, [pc, #812]	; (800fba4 <UART_SetConfig+0x698>)
 800f876:	4293      	cmp	r3, r2
 800f878:	d176      	bne.n	800f968 <UART_SetConfig+0x45c>
 800f87a:	4bcb      	ldr	r3, [pc, #812]	; (800fba8 <UART_SetConfig+0x69c>)
 800f87c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f87e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800f882:	2b28      	cmp	r3, #40	; 0x28
 800f884:	d86c      	bhi.n	800f960 <UART_SetConfig+0x454>
 800f886:	a201      	add	r2, pc, #4	; (adr r2, 800f88c <UART_SetConfig+0x380>)
 800f888:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f88c:	0800f931 	.word	0x0800f931
 800f890:	0800f961 	.word	0x0800f961
 800f894:	0800f961 	.word	0x0800f961
 800f898:	0800f961 	.word	0x0800f961
 800f89c:	0800f961 	.word	0x0800f961
 800f8a0:	0800f961 	.word	0x0800f961
 800f8a4:	0800f961 	.word	0x0800f961
 800f8a8:	0800f961 	.word	0x0800f961
 800f8ac:	0800f939 	.word	0x0800f939
 800f8b0:	0800f961 	.word	0x0800f961
 800f8b4:	0800f961 	.word	0x0800f961
 800f8b8:	0800f961 	.word	0x0800f961
 800f8bc:	0800f961 	.word	0x0800f961
 800f8c0:	0800f961 	.word	0x0800f961
 800f8c4:	0800f961 	.word	0x0800f961
 800f8c8:	0800f961 	.word	0x0800f961
 800f8cc:	0800f941 	.word	0x0800f941
 800f8d0:	0800f961 	.word	0x0800f961
 800f8d4:	0800f961 	.word	0x0800f961
 800f8d8:	0800f961 	.word	0x0800f961
 800f8dc:	0800f961 	.word	0x0800f961
 800f8e0:	0800f961 	.word	0x0800f961
 800f8e4:	0800f961 	.word	0x0800f961
 800f8e8:	0800f961 	.word	0x0800f961
 800f8ec:	0800f949 	.word	0x0800f949
 800f8f0:	0800f961 	.word	0x0800f961
 800f8f4:	0800f961 	.word	0x0800f961
 800f8f8:	0800f961 	.word	0x0800f961
 800f8fc:	0800f961 	.word	0x0800f961
 800f900:	0800f961 	.word	0x0800f961
 800f904:	0800f961 	.word	0x0800f961
 800f908:	0800f961 	.word	0x0800f961
 800f90c:	0800f951 	.word	0x0800f951
 800f910:	0800f961 	.word	0x0800f961
 800f914:	0800f961 	.word	0x0800f961
 800f918:	0800f961 	.word	0x0800f961
 800f91c:	0800f961 	.word	0x0800f961
 800f920:	0800f961 	.word	0x0800f961
 800f924:	0800f961 	.word	0x0800f961
 800f928:	0800f961 	.word	0x0800f961
 800f92c:	0800f959 	.word	0x0800f959
 800f930:	2301      	movs	r3, #1
 800f932:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f936:	e0bc      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f938:	2304      	movs	r3, #4
 800f93a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f93e:	e0b8      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f940:	2308      	movs	r3, #8
 800f942:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f946:	e0b4      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f948:	2310      	movs	r3, #16
 800f94a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f94e:	e0b0      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f950:	2320      	movs	r3, #32
 800f952:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f956:	e0ac      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f958:	2340      	movs	r3, #64	; 0x40
 800f95a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f95e:	e0a8      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f960:	2380      	movs	r3, #128	; 0x80
 800f962:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f966:	e0a4      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f968:	697b      	ldr	r3, [r7, #20]
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	4a8f      	ldr	r2, [pc, #572]	; (800fbac <UART_SetConfig+0x6a0>)
 800f96e:	4293      	cmp	r3, r2
 800f970:	d130      	bne.n	800f9d4 <UART_SetConfig+0x4c8>
 800f972:	4b8d      	ldr	r3, [pc, #564]	; (800fba8 <UART_SetConfig+0x69c>)
 800f974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f976:	f003 0307 	and.w	r3, r3, #7
 800f97a:	2b05      	cmp	r3, #5
 800f97c:	d826      	bhi.n	800f9cc <UART_SetConfig+0x4c0>
 800f97e:	a201      	add	r2, pc, #4	; (adr r2, 800f984 <UART_SetConfig+0x478>)
 800f980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f984:	0800f99d 	.word	0x0800f99d
 800f988:	0800f9a5 	.word	0x0800f9a5
 800f98c:	0800f9ad 	.word	0x0800f9ad
 800f990:	0800f9b5 	.word	0x0800f9b5
 800f994:	0800f9bd 	.word	0x0800f9bd
 800f998:	0800f9c5 	.word	0x0800f9c5
 800f99c:	2300      	movs	r3, #0
 800f99e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9a2:	e086      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f9a4:	2304      	movs	r3, #4
 800f9a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9aa:	e082      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f9ac:	2308      	movs	r3, #8
 800f9ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9b2:	e07e      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f9b4:	2310      	movs	r3, #16
 800f9b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ba:	e07a      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f9bc:	2320      	movs	r3, #32
 800f9be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9c2:	e076      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f9c4:	2340      	movs	r3, #64	; 0x40
 800f9c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9ca:	e072      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f9cc:	2380      	movs	r3, #128	; 0x80
 800f9ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800f9d2:	e06e      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800f9d4:	697b      	ldr	r3, [r7, #20]
 800f9d6:	681b      	ldr	r3, [r3, #0]
 800f9d8:	4a75      	ldr	r2, [pc, #468]	; (800fbb0 <UART_SetConfig+0x6a4>)
 800f9da:	4293      	cmp	r3, r2
 800f9dc:	d130      	bne.n	800fa40 <UART_SetConfig+0x534>
 800f9de:	4b72      	ldr	r3, [pc, #456]	; (800fba8 <UART_SetConfig+0x69c>)
 800f9e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f9e2:	f003 0307 	and.w	r3, r3, #7
 800f9e6:	2b05      	cmp	r3, #5
 800f9e8:	d826      	bhi.n	800fa38 <UART_SetConfig+0x52c>
 800f9ea:	a201      	add	r2, pc, #4	; (adr r2, 800f9f0 <UART_SetConfig+0x4e4>)
 800f9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9f0:	0800fa09 	.word	0x0800fa09
 800f9f4:	0800fa11 	.word	0x0800fa11
 800f9f8:	0800fa19 	.word	0x0800fa19
 800f9fc:	0800fa21 	.word	0x0800fa21
 800fa00:	0800fa29 	.word	0x0800fa29
 800fa04:	0800fa31 	.word	0x0800fa31
 800fa08:	2300      	movs	r3, #0
 800fa0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa0e:	e050      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa10:	2304      	movs	r3, #4
 800fa12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa16:	e04c      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa18:	2308      	movs	r3, #8
 800fa1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa1e:	e048      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa20:	2310      	movs	r3, #16
 800fa22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa26:	e044      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa28:	2320      	movs	r3, #32
 800fa2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa2e:	e040      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa30:	2340      	movs	r3, #64	; 0x40
 800fa32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa36:	e03c      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa38:	2380      	movs	r3, #128	; 0x80
 800fa3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa3e:	e038      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa40:	697b      	ldr	r3, [r7, #20]
 800fa42:	681b      	ldr	r3, [r3, #0]
 800fa44:	4a5b      	ldr	r2, [pc, #364]	; (800fbb4 <UART_SetConfig+0x6a8>)
 800fa46:	4293      	cmp	r3, r2
 800fa48:	d130      	bne.n	800faac <UART_SetConfig+0x5a0>
 800fa4a:	4b57      	ldr	r3, [pc, #348]	; (800fba8 <UART_SetConfig+0x69c>)
 800fa4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fa4e:	f003 0307 	and.w	r3, r3, #7
 800fa52:	2b05      	cmp	r3, #5
 800fa54:	d826      	bhi.n	800faa4 <UART_SetConfig+0x598>
 800fa56:	a201      	add	r2, pc, #4	; (adr r2, 800fa5c <UART_SetConfig+0x550>)
 800fa58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fa5c:	0800fa75 	.word	0x0800fa75
 800fa60:	0800fa7d 	.word	0x0800fa7d
 800fa64:	0800fa85 	.word	0x0800fa85
 800fa68:	0800fa8d 	.word	0x0800fa8d
 800fa6c:	0800fa95 	.word	0x0800fa95
 800fa70:	0800fa9d 	.word	0x0800fa9d
 800fa74:	2302      	movs	r3, #2
 800fa76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa7a:	e01a      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa7c:	2304      	movs	r3, #4
 800fa7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa82:	e016      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa84:	2308      	movs	r3, #8
 800fa86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa8a:	e012      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa8c:	2310      	movs	r3, #16
 800fa8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa92:	e00e      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa94:	2320      	movs	r3, #32
 800fa96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800fa9a:	e00a      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800fa9c:	2340      	movs	r3, #64	; 0x40
 800fa9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faa2:	e006      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800faa4:	2380      	movs	r3, #128	; 0x80
 800faa6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800faaa:	e002      	b.n	800fab2 <UART_SetConfig+0x5a6>
 800faac:	2380      	movs	r3, #128	; 0x80
 800faae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800fab2:	697b      	ldr	r3, [r7, #20]
 800fab4:	681b      	ldr	r3, [r3, #0]
 800fab6:	4a3f      	ldr	r2, [pc, #252]	; (800fbb4 <UART_SetConfig+0x6a8>)
 800fab8:	4293      	cmp	r3, r2
 800faba:	f040 80f8 	bne.w	800fcae <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800fabe:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fac2:	2b20      	cmp	r3, #32
 800fac4:	dc46      	bgt.n	800fb54 <UART_SetConfig+0x648>
 800fac6:	2b02      	cmp	r3, #2
 800fac8:	f2c0 8082 	blt.w	800fbd0 <UART_SetConfig+0x6c4>
 800facc:	3b02      	subs	r3, #2
 800face:	2b1e      	cmp	r3, #30
 800fad0:	d87e      	bhi.n	800fbd0 <UART_SetConfig+0x6c4>
 800fad2:	a201      	add	r2, pc, #4	; (adr r2, 800fad8 <UART_SetConfig+0x5cc>)
 800fad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fad8:	0800fb5b 	.word	0x0800fb5b
 800fadc:	0800fbd1 	.word	0x0800fbd1
 800fae0:	0800fb63 	.word	0x0800fb63
 800fae4:	0800fbd1 	.word	0x0800fbd1
 800fae8:	0800fbd1 	.word	0x0800fbd1
 800faec:	0800fbd1 	.word	0x0800fbd1
 800faf0:	0800fb73 	.word	0x0800fb73
 800faf4:	0800fbd1 	.word	0x0800fbd1
 800faf8:	0800fbd1 	.word	0x0800fbd1
 800fafc:	0800fbd1 	.word	0x0800fbd1
 800fb00:	0800fbd1 	.word	0x0800fbd1
 800fb04:	0800fbd1 	.word	0x0800fbd1
 800fb08:	0800fbd1 	.word	0x0800fbd1
 800fb0c:	0800fbd1 	.word	0x0800fbd1
 800fb10:	0800fb83 	.word	0x0800fb83
 800fb14:	0800fbd1 	.word	0x0800fbd1
 800fb18:	0800fbd1 	.word	0x0800fbd1
 800fb1c:	0800fbd1 	.word	0x0800fbd1
 800fb20:	0800fbd1 	.word	0x0800fbd1
 800fb24:	0800fbd1 	.word	0x0800fbd1
 800fb28:	0800fbd1 	.word	0x0800fbd1
 800fb2c:	0800fbd1 	.word	0x0800fbd1
 800fb30:	0800fbd1 	.word	0x0800fbd1
 800fb34:	0800fbd1 	.word	0x0800fbd1
 800fb38:	0800fbd1 	.word	0x0800fbd1
 800fb3c:	0800fbd1 	.word	0x0800fbd1
 800fb40:	0800fbd1 	.word	0x0800fbd1
 800fb44:	0800fbd1 	.word	0x0800fbd1
 800fb48:	0800fbd1 	.word	0x0800fbd1
 800fb4c:	0800fbd1 	.word	0x0800fbd1
 800fb50:	0800fbc3 	.word	0x0800fbc3
 800fb54:	2b40      	cmp	r3, #64	; 0x40
 800fb56:	d037      	beq.n	800fbc8 <UART_SetConfig+0x6bc>
 800fb58:	e03a      	b.n	800fbd0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800fb5a:	f7fd feb3 	bl	800d8c4 <HAL_RCCEx_GetD3PCLK1Freq>
 800fb5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fb60:	e03c      	b.n	800fbdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fb62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fb66:	4618      	mov	r0, r3
 800fb68:	f7fd fec2 	bl	800d8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fb6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fb6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb70:	e034      	b.n	800fbdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fb72:	f107 0318 	add.w	r3, r7, #24
 800fb76:	4618      	mov	r0, r3
 800fb78:	f7fe f80e 	bl	800db98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fb80:	e02c      	b.n	800fbdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fb82:	4b09      	ldr	r3, [pc, #36]	; (800fba8 <UART_SetConfig+0x69c>)
 800fb84:	681b      	ldr	r3, [r3, #0]
 800fb86:	f003 0320 	and.w	r3, r3, #32
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d016      	beq.n	800fbbc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fb8e:	4b06      	ldr	r3, [pc, #24]	; (800fba8 <UART_SetConfig+0x69c>)
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	08db      	lsrs	r3, r3, #3
 800fb94:	f003 0303 	and.w	r3, r3, #3
 800fb98:	4a07      	ldr	r2, [pc, #28]	; (800fbb8 <UART_SetConfig+0x6ac>)
 800fb9a:	fa22 f303 	lsr.w	r3, r2, r3
 800fb9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fba0:	e01c      	b.n	800fbdc <UART_SetConfig+0x6d0>
 800fba2:	bf00      	nop
 800fba4:	40011400 	.word	0x40011400
 800fba8:	58024400 	.word	0x58024400
 800fbac:	40007800 	.word	0x40007800
 800fbb0:	40007c00 	.word	0x40007c00
 800fbb4:	58000c00 	.word	0x58000c00
 800fbb8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800fbbc:	4b9d      	ldr	r3, [pc, #628]	; (800fe34 <UART_SetConfig+0x928>)
 800fbbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbc0:	e00c      	b.n	800fbdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fbc2:	4b9d      	ldr	r3, [pc, #628]	; (800fe38 <UART_SetConfig+0x92c>)
 800fbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbc6:	e009      	b.n	800fbdc <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fbc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fbcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fbce:	e005      	b.n	800fbdc <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800fbd0:	2300      	movs	r3, #0
 800fbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fbd4:	2301      	movs	r3, #1
 800fbd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fbda:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800fbdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	f000 81de 	beq.w	800ffa0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800fbe4:	697b      	ldr	r3, [r7, #20]
 800fbe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fbe8:	4a94      	ldr	r2, [pc, #592]	; (800fe3c <UART_SetConfig+0x930>)
 800fbea:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fbee:	461a      	mov	r2, r3
 800fbf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fbf2:	fbb3 f3f2 	udiv	r3, r3, r2
 800fbf6:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fbf8:	697b      	ldr	r3, [r7, #20]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	4613      	mov	r3, r2
 800fbfe:	005b      	lsls	r3, r3, #1
 800fc00:	4413      	add	r3, r2
 800fc02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc04:	429a      	cmp	r2, r3
 800fc06:	d305      	bcc.n	800fc14 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800fc08:	697b      	ldr	r3, [r7, #20]
 800fc0a:	685b      	ldr	r3, [r3, #4]
 800fc0c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800fc0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d903      	bls.n	800fc1c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800fc14:	2301      	movs	r3, #1
 800fc16:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fc1a:	e1c1      	b.n	800ffa0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fc1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fc1e:	2200      	movs	r2, #0
 800fc20:	60bb      	str	r3, [r7, #8]
 800fc22:	60fa      	str	r2, [r7, #12]
 800fc24:	697b      	ldr	r3, [r7, #20]
 800fc26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc28:	4a84      	ldr	r2, [pc, #528]	; (800fe3c <UART_SetConfig+0x930>)
 800fc2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fc2e:	b29b      	uxth	r3, r3
 800fc30:	2200      	movs	r2, #0
 800fc32:	603b      	str	r3, [r7, #0]
 800fc34:	607a      	str	r2, [r7, #4]
 800fc36:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fc3a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800fc3e:	f7f0 fba7 	bl	8000390 <__aeabi_uldivmod>
 800fc42:	4602      	mov	r2, r0
 800fc44:	460b      	mov	r3, r1
 800fc46:	4610      	mov	r0, r2
 800fc48:	4619      	mov	r1, r3
 800fc4a:	f04f 0200 	mov.w	r2, #0
 800fc4e:	f04f 0300 	mov.w	r3, #0
 800fc52:	020b      	lsls	r3, r1, #8
 800fc54:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800fc58:	0202      	lsls	r2, r0, #8
 800fc5a:	6979      	ldr	r1, [r7, #20]
 800fc5c:	6849      	ldr	r1, [r1, #4]
 800fc5e:	0849      	lsrs	r1, r1, #1
 800fc60:	2000      	movs	r0, #0
 800fc62:	460c      	mov	r4, r1
 800fc64:	4605      	mov	r5, r0
 800fc66:	eb12 0804 	adds.w	r8, r2, r4
 800fc6a:	eb43 0905 	adc.w	r9, r3, r5
 800fc6e:	697b      	ldr	r3, [r7, #20]
 800fc70:	685b      	ldr	r3, [r3, #4]
 800fc72:	2200      	movs	r2, #0
 800fc74:	469a      	mov	sl, r3
 800fc76:	4693      	mov	fp, r2
 800fc78:	4652      	mov	r2, sl
 800fc7a:	465b      	mov	r3, fp
 800fc7c:	4640      	mov	r0, r8
 800fc7e:	4649      	mov	r1, r9
 800fc80:	f7f0 fb86 	bl	8000390 <__aeabi_uldivmod>
 800fc84:	4602      	mov	r2, r0
 800fc86:	460b      	mov	r3, r1
 800fc88:	4613      	mov	r3, r2
 800fc8a:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800fc8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800fc92:	d308      	bcc.n	800fca6 <UART_SetConfig+0x79a>
 800fc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fc96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fc9a:	d204      	bcs.n	800fca6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800fc9c:	697b      	ldr	r3, [r7, #20]
 800fc9e:	681b      	ldr	r3, [r3, #0]
 800fca0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fca2:	60da      	str	r2, [r3, #12]
 800fca4:	e17c      	b.n	800ffa0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800fca6:	2301      	movs	r3, #1
 800fca8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fcac:	e178      	b.n	800ffa0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800fcae:	697b      	ldr	r3, [r7, #20]
 800fcb0:	69db      	ldr	r3, [r3, #28]
 800fcb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800fcb6:	f040 80c5 	bne.w	800fe44 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800fcba:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fcbe:	2b20      	cmp	r3, #32
 800fcc0:	dc48      	bgt.n	800fd54 <UART_SetConfig+0x848>
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	db7b      	blt.n	800fdbe <UART_SetConfig+0x8b2>
 800fcc6:	2b20      	cmp	r3, #32
 800fcc8:	d879      	bhi.n	800fdbe <UART_SetConfig+0x8b2>
 800fcca:	a201      	add	r2, pc, #4	; (adr r2, 800fcd0 <UART_SetConfig+0x7c4>)
 800fccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fcd0:	0800fd5b 	.word	0x0800fd5b
 800fcd4:	0800fd63 	.word	0x0800fd63
 800fcd8:	0800fdbf 	.word	0x0800fdbf
 800fcdc:	0800fdbf 	.word	0x0800fdbf
 800fce0:	0800fd6b 	.word	0x0800fd6b
 800fce4:	0800fdbf 	.word	0x0800fdbf
 800fce8:	0800fdbf 	.word	0x0800fdbf
 800fcec:	0800fdbf 	.word	0x0800fdbf
 800fcf0:	0800fd7b 	.word	0x0800fd7b
 800fcf4:	0800fdbf 	.word	0x0800fdbf
 800fcf8:	0800fdbf 	.word	0x0800fdbf
 800fcfc:	0800fdbf 	.word	0x0800fdbf
 800fd00:	0800fdbf 	.word	0x0800fdbf
 800fd04:	0800fdbf 	.word	0x0800fdbf
 800fd08:	0800fdbf 	.word	0x0800fdbf
 800fd0c:	0800fdbf 	.word	0x0800fdbf
 800fd10:	0800fd8b 	.word	0x0800fd8b
 800fd14:	0800fdbf 	.word	0x0800fdbf
 800fd18:	0800fdbf 	.word	0x0800fdbf
 800fd1c:	0800fdbf 	.word	0x0800fdbf
 800fd20:	0800fdbf 	.word	0x0800fdbf
 800fd24:	0800fdbf 	.word	0x0800fdbf
 800fd28:	0800fdbf 	.word	0x0800fdbf
 800fd2c:	0800fdbf 	.word	0x0800fdbf
 800fd30:	0800fdbf 	.word	0x0800fdbf
 800fd34:	0800fdbf 	.word	0x0800fdbf
 800fd38:	0800fdbf 	.word	0x0800fdbf
 800fd3c:	0800fdbf 	.word	0x0800fdbf
 800fd40:	0800fdbf 	.word	0x0800fdbf
 800fd44:	0800fdbf 	.word	0x0800fdbf
 800fd48:	0800fdbf 	.word	0x0800fdbf
 800fd4c:	0800fdbf 	.word	0x0800fdbf
 800fd50:	0800fdb1 	.word	0x0800fdb1
 800fd54:	2b40      	cmp	r3, #64	; 0x40
 800fd56:	d02e      	beq.n	800fdb6 <UART_SetConfig+0x8aa>
 800fd58:	e031      	b.n	800fdbe <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fd5a:	f7fc fe41 	bl	800c9e0 <HAL_RCC_GetPCLK1Freq>
 800fd5e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd60:	e033      	b.n	800fdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800fd62:	f7fc fe53 	bl	800ca0c <HAL_RCC_GetPCLK2Freq>
 800fd66:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fd68:	e02f      	b.n	800fdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fd6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fd6e:	4618      	mov	r0, r3
 800fd70:	f7fd fdbe 	bl	800d8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800fd74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fd76:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd78:	e027      	b.n	800fdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800fd7a:	f107 0318 	add.w	r3, r7, #24
 800fd7e:	4618      	mov	r0, r3
 800fd80:	f7fd ff0a 	bl	800db98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800fd84:	69fb      	ldr	r3, [r7, #28]
 800fd86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fd88:	e01f      	b.n	800fdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800fd8a:	4b2d      	ldr	r3, [pc, #180]	; (800fe40 <UART_SetConfig+0x934>)
 800fd8c:	681b      	ldr	r3, [r3, #0]
 800fd8e:	f003 0320 	and.w	r3, r3, #32
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d009      	beq.n	800fdaa <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800fd96:	4b2a      	ldr	r3, [pc, #168]	; (800fe40 <UART_SetConfig+0x934>)
 800fd98:	681b      	ldr	r3, [r3, #0]
 800fd9a:	08db      	lsrs	r3, r3, #3
 800fd9c:	f003 0303 	and.w	r3, r3, #3
 800fda0:	4a24      	ldr	r2, [pc, #144]	; (800fe34 <UART_SetConfig+0x928>)
 800fda2:	fa22 f303 	lsr.w	r3, r2, r3
 800fda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800fda8:	e00f      	b.n	800fdca <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800fdaa:	4b22      	ldr	r3, [pc, #136]	; (800fe34 <UART_SetConfig+0x928>)
 800fdac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdae:	e00c      	b.n	800fdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800fdb0:	4b21      	ldr	r3, [pc, #132]	; (800fe38 <UART_SetConfig+0x92c>)
 800fdb2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdb4:	e009      	b.n	800fdca <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800fdb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800fdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800fdbc:	e005      	b.n	800fdca <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800fdc2:	2301      	movs	r3, #1
 800fdc4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800fdc8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800fdca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 80e7 	beq.w	800ffa0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800fdd2:	697b      	ldr	r3, [r7, #20]
 800fdd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fdd6:	4a19      	ldr	r2, [pc, #100]	; (800fe3c <UART_SetConfig+0x930>)
 800fdd8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800fddc:	461a      	mov	r2, r3
 800fdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fde0:	fbb3 f3f2 	udiv	r3, r3, r2
 800fde4:	005a      	lsls	r2, r3, #1
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	085b      	lsrs	r3, r3, #1
 800fdec:	441a      	add	r2, r3
 800fdee:	697b      	ldr	r3, [r7, #20]
 800fdf0:	685b      	ldr	r3, [r3, #4]
 800fdf2:	fbb2 f3f3 	udiv	r3, r2, r3
 800fdf6:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800fdf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdfa:	2b0f      	cmp	r3, #15
 800fdfc:	d916      	bls.n	800fe2c <UART_SetConfig+0x920>
 800fdfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fe04:	d212      	bcs.n	800fe2c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800fe06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe08:	b29b      	uxth	r3, r3
 800fe0a:	f023 030f 	bic.w	r3, r3, #15
 800fe0e:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800fe10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fe12:	085b      	lsrs	r3, r3, #1
 800fe14:	b29b      	uxth	r3, r3
 800fe16:	f003 0307 	and.w	r3, r3, #7
 800fe1a:	b29a      	uxth	r2, r3
 800fe1c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800fe1e:	4313      	orrs	r3, r2
 800fe20:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800fe22:	697b      	ldr	r3, [r7, #20]
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800fe28:	60da      	str	r2, [r3, #12]
 800fe2a:	e0b9      	b.n	800ffa0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800fe2c:	2301      	movs	r3, #1
 800fe2e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800fe32:	e0b5      	b.n	800ffa0 <UART_SetConfig+0xa94>
 800fe34:	03d09000 	.word	0x03d09000
 800fe38:	003d0900 	.word	0x003d0900
 800fe3c:	08012be0 	.word	0x08012be0
 800fe40:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800fe44:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800fe48:	2b20      	cmp	r3, #32
 800fe4a:	dc49      	bgt.n	800fee0 <UART_SetConfig+0x9d4>
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	db7c      	blt.n	800ff4a <UART_SetConfig+0xa3e>
 800fe50:	2b20      	cmp	r3, #32
 800fe52:	d87a      	bhi.n	800ff4a <UART_SetConfig+0xa3e>
 800fe54:	a201      	add	r2, pc, #4	; (adr r2, 800fe5c <UART_SetConfig+0x950>)
 800fe56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fe5a:	bf00      	nop
 800fe5c:	0800fee7 	.word	0x0800fee7
 800fe60:	0800feef 	.word	0x0800feef
 800fe64:	0800ff4b 	.word	0x0800ff4b
 800fe68:	0800ff4b 	.word	0x0800ff4b
 800fe6c:	0800fef7 	.word	0x0800fef7
 800fe70:	0800ff4b 	.word	0x0800ff4b
 800fe74:	0800ff4b 	.word	0x0800ff4b
 800fe78:	0800ff4b 	.word	0x0800ff4b
 800fe7c:	0800ff07 	.word	0x0800ff07
 800fe80:	0800ff4b 	.word	0x0800ff4b
 800fe84:	0800ff4b 	.word	0x0800ff4b
 800fe88:	0800ff4b 	.word	0x0800ff4b
 800fe8c:	0800ff4b 	.word	0x0800ff4b
 800fe90:	0800ff4b 	.word	0x0800ff4b
 800fe94:	0800ff4b 	.word	0x0800ff4b
 800fe98:	0800ff4b 	.word	0x0800ff4b
 800fe9c:	0800ff17 	.word	0x0800ff17
 800fea0:	0800ff4b 	.word	0x0800ff4b
 800fea4:	0800ff4b 	.word	0x0800ff4b
 800fea8:	0800ff4b 	.word	0x0800ff4b
 800feac:	0800ff4b 	.word	0x0800ff4b
 800feb0:	0800ff4b 	.word	0x0800ff4b
 800feb4:	0800ff4b 	.word	0x0800ff4b
 800feb8:	0800ff4b 	.word	0x0800ff4b
 800febc:	0800ff4b 	.word	0x0800ff4b
 800fec0:	0800ff4b 	.word	0x0800ff4b
 800fec4:	0800ff4b 	.word	0x0800ff4b
 800fec8:	0800ff4b 	.word	0x0800ff4b
 800fecc:	0800ff4b 	.word	0x0800ff4b
 800fed0:	0800ff4b 	.word	0x0800ff4b
 800fed4:	0800ff4b 	.word	0x0800ff4b
 800fed8:	0800ff4b 	.word	0x0800ff4b
 800fedc:	0800ff3d 	.word	0x0800ff3d
 800fee0:	2b40      	cmp	r3, #64	; 0x40
 800fee2:	d02e      	beq.n	800ff42 <UART_SetConfig+0xa36>
 800fee4:	e031      	b.n	800ff4a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800fee6:	f7fc fd7b 	bl	800c9e0 <HAL_RCC_GetPCLK1Freq>
 800feea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800feec:	e033      	b.n	800ff56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800feee:	f7fc fd8d 	bl	800ca0c <HAL_RCC_GetPCLK2Freq>
 800fef2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800fef4:	e02f      	b.n	800ff56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800fef6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fefa:	4618      	mov	r0, r3
 800fefc:	f7fd fcf8 	bl	800d8f0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ff00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff04:	e027      	b.n	800ff56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ff06:	f107 0318 	add.w	r3, r7, #24
 800ff0a:	4618      	mov	r0, r3
 800ff0c:	f7fd fe44 	bl	800db98 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ff10:	69fb      	ldr	r3, [r7, #28]
 800ff12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff14:	e01f      	b.n	800ff56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ff16:	4b2d      	ldr	r3, [pc, #180]	; (800ffcc <UART_SetConfig+0xac0>)
 800ff18:	681b      	ldr	r3, [r3, #0]
 800ff1a:	f003 0320 	and.w	r3, r3, #32
 800ff1e:	2b00      	cmp	r3, #0
 800ff20:	d009      	beq.n	800ff36 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ff22:	4b2a      	ldr	r3, [pc, #168]	; (800ffcc <UART_SetConfig+0xac0>)
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	08db      	lsrs	r3, r3, #3
 800ff28:	f003 0303 	and.w	r3, r3, #3
 800ff2c:	4a28      	ldr	r2, [pc, #160]	; (800ffd0 <UART_SetConfig+0xac4>)
 800ff2e:	fa22 f303 	lsr.w	r3, r2, r3
 800ff32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ff34:	e00f      	b.n	800ff56 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ff36:	4b26      	ldr	r3, [pc, #152]	; (800ffd0 <UART_SetConfig+0xac4>)
 800ff38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff3a:	e00c      	b.n	800ff56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ff3c:	4b25      	ldr	r3, [pc, #148]	; (800ffd4 <UART_SetConfig+0xac8>)
 800ff3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff40:	e009      	b.n	800ff56 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ff42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ff46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ff48:	e005      	b.n	800ff56 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ff4a:	2300      	movs	r3, #0
 800ff4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ff4e:	2301      	movs	r3, #1
 800ff50:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ff54:	bf00      	nop
    }

    if (pclk != 0U)
 800ff56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d021      	beq.n	800ffa0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ff60:	4a1d      	ldr	r2, [pc, #116]	; (800ffd8 <UART_SetConfig+0xacc>)
 800ff62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ff66:	461a      	mov	r2, r3
 800ff68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ff6a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ff6e:	697b      	ldr	r3, [r7, #20]
 800ff70:	685b      	ldr	r3, [r3, #4]
 800ff72:	085b      	lsrs	r3, r3, #1
 800ff74:	441a      	add	r2, r3
 800ff76:	697b      	ldr	r3, [r7, #20]
 800ff78:	685b      	ldr	r3, [r3, #4]
 800ff7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ff7e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ff80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff82:	2b0f      	cmp	r3, #15
 800ff84:	d909      	bls.n	800ff9a <UART_SetConfig+0xa8e>
 800ff86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ff8c:	d205      	bcs.n	800ff9a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ff8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff90:	b29a      	uxth	r2, r3
 800ff92:	697b      	ldr	r3, [r7, #20]
 800ff94:	681b      	ldr	r3, [r3, #0]
 800ff96:	60da      	str	r2, [r3, #12]
 800ff98:	e002      	b.n	800ffa0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ff9a:	2301      	movs	r3, #1
 800ff9c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ffa0:	697b      	ldr	r3, [r7, #20]
 800ffa2:	2201      	movs	r2, #1
 800ffa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	2201      	movs	r2, #1
 800ffac:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ffb0:	697b      	ldr	r3, [r7, #20]
 800ffb2:	2200      	movs	r2, #0
 800ffb4:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 800ffb6:	697b      	ldr	r3, [r7, #20]
 800ffb8:	2200      	movs	r2, #0
 800ffba:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800ffbc:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ffc0:	4618      	mov	r0, r3
 800ffc2:	3748      	adds	r7, #72	; 0x48
 800ffc4:	46bd      	mov	sp, r7
 800ffc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ffca:	bf00      	nop
 800ffcc:	58024400 	.word	0x58024400
 800ffd0:	03d09000 	.word	0x03d09000
 800ffd4:	003d0900 	.word	0x003d0900
 800ffd8:	08012be0 	.word	0x08012be0

0800ffdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ffdc:	b480      	push	{r7}
 800ffde:	b083      	sub	sp, #12
 800ffe0:	af00      	add	r7, sp, #0
 800ffe2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ffe8:	f003 0301 	and.w	r3, r3, #1
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d00a      	beq.n	8010006 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	685b      	ldr	r3, [r3, #4]
 800fff6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	430a      	orrs	r2, r1
 8010004:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801000a:	f003 0302 	and.w	r3, r3, #2
 801000e:	2b00      	cmp	r3, #0
 8010010:	d00a      	beq.n	8010028 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	685b      	ldr	r3, [r3, #4]
 8010018:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	430a      	orrs	r2, r1
 8010026:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801002c:	f003 0304 	and.w	r3, r3, #4
 8010030:	2b00      	cmp	r3, #0
 8010032:	d00a      	beq.n	801004a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010034:	687b      	ldr	r3, [r7, #4]
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	685b      	ldr	r3, [r3, #4]
 801003a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 801003e:	687b      	ldr	r3, [r7, #4]
 8010040:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	681b      	ldr	r3, [r3, #0]
 8010046:	430a      	orrs	r2, r1
 8010048:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801004a:	687b      	ldr	r3, [r7, #4]
 801004c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801004e:	f003 0308 	and.w	r3, r3, #8
 8010052:	2b00      	cmp	r3, #0
 8010054:	d00a      	beq.n	801006c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	685b      	ldr	r3, [r3, #4]
 801005c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010064:	687b      	ldr	r3, [r7, #4]
 8010066:	681b      	ldr	r3, [r3, #0]
 8010068:	430a      	orrs	r2, r1
 801006a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010070:	f003 0310 	and.w	r3, r3, #16
 8010074:	2b00      	cmp	r3, #0
 8010076:	d00a      	beq.n	801008e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010078:	687b      	ldr	r3, [r7, #4]
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	689b      	ldr	r3, [r3, #8]
 801007e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010082:	687b      	ldr	r3, [r7, #4]
 8010084:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8010086:	687b      	ldr	r3, [r7, #4]
 8010088:	681b      	ldr	r3, [r3, #0]
 801008a:	430a      	orrs	r2, r1
 801008c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801008e:	687b      	ldr	r3, [r7, #4]
 8010090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010092:	f003 0320 	and.w	r3, r3, #32
 8010096:	2b00      	cmp	r3, #0
 8010098:	d00a      	beq.n	80100b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	681b      	ldr	r3, [r3, #0]
 801009e:	689b      	ldr	r3, [r3, #8]
 80100a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80100a8:	687b      	ldr	r3, [r7, #4]
 80100aa:	681b      	ldr	r3, [r3, #0]
 80100ac:	430a      	orrs	r2, r1
 80100ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d01a      	beq.n	80100f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80100bc:	687b      	ldr	r3, [r7, #4]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	685b      	ldr	r3, [r3, #4]
 80100c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80100ca:	687b      	ldr	r3, [r7, #4]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	430a      	orrs	r2, r1
 80100d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80100d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80100da:	d10a      	bne.n	80100f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	685b      	ldr	r3, [r3, #4]
 80100e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	430a      	orrs	r2, r1
 80100f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80100f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	d00a      	beq.n	8010114 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	681b      	ldr	r3, [r3, #0]
 8010102:	685b      	ldr	r3, [r3, #4]
 8010104:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	430a      	orrs	r2, r1
 8010112:	605a      	str	r2, [r3, #4]
  }
}
 8010114:	bf00      	nop
 8010116:	370c      	adds	r7, #12
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr

08010120 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010120:	b580      	push	{r7, lr}
 8010122:	b086      	sub	sp, #24
 8010124:	af02      	add	r7, sp, #8
 8010126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	2200      	movs	r2, #0
 801012c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010130:	f7f6 ffd4 	bl	80070dc <HAL_GetTick>
 8010134:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010136:	687b      	ldr	r3, [r7, #4]
 8010138:	681b      	ldr	r3, [r3, #0]
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	f003 0308 	and.w	r3, r3, #8
 8010140:	2b08      	cmp	r3, #8
 8010142:	d10e      	bne.n	8010162 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010144:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010148:	9300      	str	r3, [sp, #0]
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	2200      	movs	r2, #0
 801014e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010152:	6878      	ldr	r0, [r7, #4]
 8010154:	f000 f82f 	bl	80101b6 <UART_WaitOnFlagUntilTimeout>
 8010158:	4603      	mov	r3, r0
 801015a:	2b00      	cmp	r3, #0
 801015c:	d001      	beq.n	8010162 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801015e:	2303      	movs	r3, #3
 8010160:	e025      	b.n	80101ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010162:	687b      	ldr	r3, [r7, #4]
 8010164:	681b      	ldr	r3, [r3, #0]
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	f003 0304 	and.w	r3, r3, #4
 801016c:	2b04      	cmp	r3, #4
 801016e:	d10e      	bne.n	801018e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8010174:	9300      	str	r3, [sp, #0]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	2200      	movs	r2, #0
 801017a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 801017e:	6878      	ldr	r0, [r7, #4]
 8010180:	f000 f819 	bl	80101b6 <UART_WaitOnFlagUntilTimeout>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d001      	beq.n	801018e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 801018a:	2303      	movs	r3, #3
 801018c:	e00f      	b.n	80101ae <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801018e:	687b      	ldr	r3, [r7, #4]
 8010190:	2220      	movs	r2, #32
 8010192:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	2220      	movs	r2, #32
 801019a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801019e:	687b      	ldr	r3, [r7, #4]
 80101a0:	2200      	movs	r2, #0
 80101a2:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	2200      	movs	r2, #0
 80101a8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80101ac:	2300      	movs	r3, #0
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3710      	adds	r7, #16
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}

080101b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80101b6:	b580      	push	{r7, lr}
 80101b8:	b09c      	sub	sp, #112	; 0x70
 80101ba:	af00      	add	r7, sp, #0
 80101bc:	60f8      	str	r0, [r7, #12]
 80101be:	60b9      	str	r1, [r7, #8]
 80101c0:	603b      	str	r3, [r7, #0]
 80101c2:	4613      	mov	r3, r2
 80101c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80101c6:	e0a9      	b.n	801031c <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80101c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80101ce:	f000 80a5 	beq.w	801031c <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80101d2:	f7f6 ff83 	bl	80070dc <HAL_GetTick>
 80101d6:	4602      	mov	r2, r0
 80101d8:	683b      	ldr	r3, [r7, #0]
 80101da:	1ad3      	subs	r3, r2, r3
 80101dc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80101de:	429a      	cmp	r2, r3
 80101e0:	d302      	bcc.n	80101e8 <UART_WaitOnFlagUntilTimeout+0x32>
 80101e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80101e4:	2b00      	cmp	r3, #0
 80101e6:	d140      	bne.n	801026a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80101e8:	68fb      	ldr	r3, [r7, #12]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80101ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80101f0:	e853 3f00 	ldrex	r3, [r3]
 80101f4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80101f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101f8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80101fc:	667b      	str	r3, [r7, #100]	; 0x64
 80101fe:	68fb      	ldr	r3, [r7, #12]
 8010200:	681b      	ldr	r3, [r3, #0]
 8010202:	461a      	mov	r2, r3
 8010204:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010206:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010208:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801020a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801020c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801020e:	e841 2300 	strex	r3, r2, [r1]
 8010212:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010214:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010216:	2b00      	cmp	r3, #0
 8010218:	d1e6      	bne.n	80101e8 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801021a:	68fb      	ldr	r3, [r7, #12]
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	3308      	adds	r3, #8
 8010220:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010222:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010224:	e853 3f00 	ldrex	r3, [r3]
 8010228:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	f023 0301 	bic.w	r3, r3, #1
 8010230:	663b      	str	r3, [r7, #96]	; 0x60
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	681b      	ldr	r3, [r3, #0]
 8010236:	3308      	adds	r3, #8
 8010238:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801023a:	64ba      	str	r2, [r7, #72]	; 0x48
 801023c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801023e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010242:	e841 2300 	strex	r3, r2, [r1]
 8010246:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010248:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801024a:	2b00      	cmp	r3, #0
 801024c:	d1e5      	bne.n	801021a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2220      	movs	r2, #32
 8010252:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8010256:	68fb      	ldr	r3, [r7, #12]
 8010258:	2220      	movs	r2, #32
 801025a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	2200      	movs	r2, #0
 8010262:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8010266:	2303      	movs	r3, #3
 8010268:	e069      	b.n	801033e <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 801026a:	68fb      	ldr	r3, [r7, #12]
 801026c:	681b      	ldr	r3, [r3, #0]
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	f003 0304 	and.w	r3, r3, #4
 8010274:	2b00      	cmp	r3, #0
 8010276:	d051      	beq.n	801031c <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	681b      	ldr	r3, [r3, #0]
 801027c:	69db      	ldr	r3, [r3, #28]
 801027e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010282:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010286:	d149      	bne.n	801031c <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	681b      	ldr	r3, [r3, #0]
 801028c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8010290:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	681b      	ldr	r3, [r3, #0]
 8010296:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801029a:	e853 3f00 	ldrex	r3, [r3]
 801029e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80102a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102a2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80102a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80102a8:	68fb      	ldr	r3, [r7, #12]
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	461a      	mov	r2, r3
 80102ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80102b0:	637b      	str	r3, [r7, #52]	; 0x34
 80102b2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102b4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80102b6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80102b8:	e841 2300 	strex	r3, r2, [r1]
 80102bc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80102be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80102c0:	2b00      	cmp	r3, #0
 80102c2:	d1e6      	bne.n	8010292 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80102c4:	68fb      	ldr	r3, [r7, #12]
 80102c6:	681b      	ldr	r3, [r3, #0]
 80102c8:	3308      	adds	r3, #8
 80102ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80102cc:	697b      	ldr	r3, [r7, #20]
 80102ce:	e853 3f00 	ldrex	r3, [r3]
 80102d2:	613b      	str	r3, [r7, #16]
   return(result);
 80102d4:	693b      	ldr	r3, [r7, #16]
 80102d6:	f023 0301 	bic.w	r3, r3, #1
 80102da:	66bb      	str	r3, [r7, #104]	; 0x68
 80102dc:	68fb      	ldr	r3, [r7, #12]
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	3308      	adds	r3, #8
 80102e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80102e4:	623a      	str	r2, [r7, #32]
 80102e6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80102e8:	69f9      	ldr	r1, [r7, #28]
 80102ea:	6a3a      	ldr	r2, [r7, #32]
 80102ec:	e841 2300 	strex	r3, r2, [r1]
 80102f0:	61bb      	str	r3, [r7, #24]
   return(result);
 80102f2:	69bb      	ldr	r3, [r7, #24]
 80102f4:	2b00      	cmp	r3, #0
 80102f6:	d1e5      	bne.n	80102c4 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 80102f8:	68fb      	ldr	r3, [r7, #12]
 80102fa:	2220      	movs	r2, #32
 80102fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8010300:	68fb      	ldr	r3, [r7, #12]
 8010302:	2220      	movs	r2, #32
 8010304:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8010308:	68fb      	ldr	r3, [r7, #12]
 801030a:	2220      	movs	r2, #32
 801030c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8010310:	68fb      	ldr	r3, [r7, #12]
 8010312:	2200      	movs	r2, #0
 8010314:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8010318:	2303      	movs	r3, #3
 801031a:	e010      	b.n	801033e <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	69da      	ldr	r2, [r3, #28]
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	4013      	ands	r3, r2
 8010326:	68ba      	ldr	r2, [r7, #8]
 8010328:	429a      	cmp	r2, r3
 801032a:	bf0c      	ite	eq
 801032c:	2301      	moveq	r3, #1
 801032e:	2300      	movne	r3, #0
 8010330:	b2db      	uxtb	r3, r3
 8010332:	461a      	mov	r2, r3
 8010334:	79fb      	ldrb	r3, [r7, #7]
 8010336:	429a      	cmp	r2, r3
 8010338:	f43f af46 	beq.w	80101c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801033c:	2300      	movs	r3, #0
}
 801033e:	4618      	mov	r0, r3
 8010340:	3770      	adds	r7, #112	; 0x70
 8010342:	46bd      	mov	sp, r7
 8010344:	bd80      	pop	{r7, pc}
	...

08010348 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010348:	b580      	push	{r7, lr}
 801034a:	b096      	sub	sp, #88	; 0x58
 801034c:	af00      	add	r7, sp, #0
 801034e:	60f8      	str	r0, [r7, #12]
 8010350:	60b9      	str	r1, [r7, #8]
 8010352:	4613      	mov	r3, r2
 8010354:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8010356:	68fb      	ldr	r3, [r7, #12]
 8010358:	68ba      	ldr	r2, [r7, #8]
 801035a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize = Size;
 801035c:	68fb      	ldr	r3, [r7, #12]
 801035e:	88fa      	ldrh	r2, [r7, #6]
 8010360:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010364:	68fb      	ldr	r3, [r7, #12]
 8010366:	2200      	movs	r2, #0
 8010368:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	2222      	movs	r2, #34	; 0x22
 8010370:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  if (huart->hdmarx != NULL)
 8010374:	68fb      	ldr	r3, [r7, #12]
 8010376:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010378:	2b00      	cmp	r3, #0
 801037a:	d02c      	beq.n	80103d6 <UART_Start_Receive_DMA+0x8e>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010380:	4a42      	ldr	r2, [pc, #264]	; (801048c <UART_Start_Receive_DMA+0x144>)
 8010382:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010388:	4a41      	ldr	r2, [pc, #260]	; (8010490 <UART_Start_Receive_DMA+0x148>)
 801038a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010390:	4a40      	ldr	r2, [pc, #256]	; (8010494 <UART_Start_Receive_DMA+0x14c>)
 8010392:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010398:	2200      	movs	r2, #0
 801039a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 801039c:	68fb      	ldr	r3, [r7, #12]
 801039e:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
 80103a0:	68fb      	ldr	r3, [r7, #12]
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	3324      	adds	r3, #36	; 0x24
 80103a6:	4619      	mov	r1, r3
 80103a8:	68fb      	ldr	r3, [r7, #12]
 80103aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80103ac:	461a      	mov	r2, r3
 80103ae:	88fb      	ldrh	r3, [r7, #6]
 80103b0:	f7f7 fb50 	bl	8007a54 <HAL_DMA_Start_IT>
 80103b4:	4603      	mov	r3, r0
 80103b6:	2b00      	cmp	r3, #0
 80103b8:	d00d      	beq.n	80103d6 <UART_Start_Receive_DMA+0x8e>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	2210      	movs	r2, #16
 80103be:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80103c2:	68fb      	ldr	r3, [r7, #12]
 80103c4:	2200      	movs	r2, #0
 80103c6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	2220      	movs	r2, #32
 80103ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_ERROR;
 80103d2:	2301      	movs	r3, #1
 80103d4:	e055      	b.n	8010482 <UART_Start_Receive_DMA+0x13a>
    }
  }
  __HAL_UNLOCK(huart);
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	2200      	movs	r2, #0
 80103da:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80103de:	68fb      	ldr	r3, [r7, #12]
 80103e0:	691b      	ldr	r3, [r3, #16]
 80103e2:	2b00      	cmp	r3, #0
 80103e4:	d018      	beq.n	8010418 <UART_Start_Receive_DMA+0xd0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80103e6:	68fb      	ldr	r3, [r7, #12]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80103ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80103ee:	e853 3f00 	ldrex	r3, [r3]
 80103f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80103f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103fa:	657b      	str	r3, [r7, #84]	; 0x54
 80103fc:	68fb      	ldr	r3, [r7, #12]
 80103fe:	681b      	ldr	r3, [r3, #0]
 8010400:	461a      	mov	r2, r3
 8010402:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010404:	64bb      	str	r3, [r7, #72]	; 0x48
 8010406:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010408:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801040a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801040c:	e841 2300 	strex	r3, r2, [r1]
 8010410:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010414:	2b00      	cmp	r3, #0
 8010416:	d1e6      	bne.n	80103e6 <UART_Start_Receive_DMA+0x9e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010418:	68fb      	ldr	r3, [r7, #12]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	3308      	adds	r3, #8
 801041e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010422:	e853 3f00 	ldrex	r3, [r3]
 8010426:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801042a:	f043 0301 	orr.w	r3, r3, #1
 801042e:	653b      	str	r3, [r7, #80]	; 0x50
 8010430:	68fb      	ldr	r3, [r7, #12]
 8010432:	681b      	ldr	r3, [r3, #0]
 8010434:	3308      	adds	r3, #8
 8010436:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010438:	637a      	str	r2, [r7, #52]	; 0x34
 801043a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801043c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801043e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010440:	e841 2300 	strex	r3, r2, [r1]
 8010444:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8010446:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010448:	2b00      	cmp	r3, #0
 801044a:	d1e5      	bne.n	8010418 <UART_Start_Receive_DMA+0xd0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801044c:	68fb      	ldr	r3, [r7, #12]
 801044e:	681b      	ldr	r3, [r3, #0]
 8010450:	3308      	adds	r3, #8
 8010452:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010454:	697b      	ldr	r3, [r7, #20]
 8010456:	e853 3f00 	ldrex	r3, [r3]
 801045a:	613b      	str	r3, [r7, #16]
   return(result);
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010462:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010464:	68fb      	ldr	r3, [r7, #12]
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	3308      	adds	r3, #8
 801046a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801046c:	623a      	str	r2, [r7, #32]
 801046e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010470:	69f9      	ldr	r1, [r7, #28]
 8010472:	6a3a      	ldr	r2, [r7, #32]
 8010474:	e841 2300 	strex	r3, r2, [r1]
 8010478:	61bb      	str	r3, [r7, #24]
   return(result);
 801047a:	69bb      	ldr	r3, [r7, #24]
 801047c:	2b00      	cmp	r3, #0
 801047e:	d1e5      	bne.n	801044c <UART_Start_Receive_DMA+0x104>

  return HAL_OK;
 8010480:	2300      	movs	r3, #0
}
 8010482:	4618      	mov	r0, r3
 8010484:	3758      	adds	r7, #88	; 0x58
 8010486:	46bd      	mov	sp, r7
 8010488:	bd80      	pop	{r7, pc}
 801048a:	bf00      	nop
 801048c:	080105e9 	.word	0x080105e9
 8010490:	0801070b 	.word	0x0801070b
 8010494:	08010743 	.word	0x08010743

08010498 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8010498:	b480      	push	{r7}
 801049a:	b08f      	sub	sp, #60	; 0x3c
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	681b      	ldr	r3, [r3, #0]
 80104a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104a6:	6a3b      	ldr	r3, [r7, #32]
 80104a8:	e853 3f00 	ldrex	r3, [r3]
 80104ac:	61fb      	str	r3, [r7, #28]
   return(result);
 80104ae:	69fb      	ldr	r3, [r7, #28]
 80104b0:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80104b4:	637b      	str	r3, [r7, #52]	; 0x34
 80104b6:	687b      	ldr	r3, [r7, #4]
 80104b8:	681b      	ldr	r3, [r3, #0]
 80104ba:	461a      	mov	r2, r3
 80104bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80104be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80104c0:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80104c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80104c6:	e841 2300 	strex	r3, r2, [r1]
 80104ca:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80104cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80104ce:	2b00      	cmp	r3, #0
 80104d0:	d1e6      	bne.n	80104a0 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 80104d2:	687b      	ldr	r3, [r7, #4]
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	3308      	adds	r3, #8
 80104d8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80104da:	68fb      	ldr	r3, [r7, #12]
 80104dc:	e853 3f00 	ldrex	r3, [r3]
 80104e0:	60bb      	str	r3, [r7, #8]
   return(result);
 80104e2:	68bb      	ldr	r3, [r7, #8]
 80104e4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80104e8:	633b      	str	r3, [r7, #48]	; 0x30
 80104ea:	687b      	ldr	r3, [r7, #4]
 80104ec:	681b      	ldr	r3, [r3, #0]
 80104ee:	3308      	adds	r3, #8
 80104f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80104f2:	61ba      	str	r2, [r7, #24]
 80104f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80104f6:	6979      	ldr	r1, [r7, #20]
 80104f8:	69ba      	ldr	r2, [r7, #24]
 80104fa:	e841 2300 	strex	r3, r2, [r1]
 80104fe:	613b      	str	r3, [r7, #16]
   return(result);
 8010500:	693b      	ldr	r3, [r7, #16]
 8010502:	2b00      	cmp	r3, #0
 8010504:	d1e5      	bne.n	80104d2 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	2220      	movs	r2, #32
 801050a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
 801050e:	bf00      	nop
 8010510:	373c      	adds	r7, #60	; 0x3c
 8010512:	46bd      	mov	sp, r7
 8010514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010518:	4770      	bx	lr
	...

0801051c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801051c:	b480      	push	{r7}
 801051e:	b095      	sub	sp, #84	; 0x54
 8010520:	af00      	add	r7, sp, #0
 8010522:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8010524:	687b      	ldr	r3, [r7, #4]
 8010526:	681b      	ldr	r3, [r3, #0]
 8010528:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801052a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801052c:	e853 3f00 	ldrex	r3, [r3]
 8010530:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010534:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010538:	64fb      	str	r3, [r7, #76]	; 0x4c
 801053a:	687b      	ldr	r3, [r7, #4]
 801053c:	681b      	ldr	r3, [r3, #0]
 801053e:	461a      	mov	r2, r3
 8010540:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010542:	643b      	str	r3, [r7, #64]	; 0x40
 8010544:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010546:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010548:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801054a:	e841 2300 	strex	r3, r2, [r1]
 801054e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010552:	2b00      	cmp	r3, #0
 8010554:	d1e6      	bne.n	8010524 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8010556:	687b      	ldr	r3, [r7, #4]
 8010558:	681b      	ldr	r3, [r3, #0]
 801055a:	3308      	adds	r3, #8
 801055c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801055e:	6a3b      	ldr	r3, [r7, #32]
 8010560:	e853 3f00 	ldrex	r3, [r3]
 8010564:	61fb      	str	r3, [r7, #28]
   return(result);
 8010566:	69fa      	ldr	r2, [r7, #28]
 8010568:	4b1e      	ldr	r3, [pc, #120]	; (80105e4 <UART_EndRxTransfer+0xc8>)
 801056a:	4013      	ands	r3, r2
 801056c:	64bb      	str	r3, [r7, #72]	; 0x48
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	3308      	adds	r3, #8
 8010574:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010576:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010578:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801057a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801057c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801057e:	e841 2300 	strex	r3, r2, [r1]
 8010582:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010586:	2b00      	cmp	r3, #0
 8010588:	d1e5      	bne.n	8010556 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801058e:	2b01      	cmp	r3, #1
 8010590:	d118      	bne.n	80105c4 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	681b      	ldr	r3, [r3, #0]
 8010596:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	e853 3f00 	ldrex	r3, [r3]
 801059e:	60bb      	str	r3, [r7, #8]
   return(result);
 80105a0:	68bb      	ldr	r3, [r7, #8]
 80105a2:	f023 0310 	bic.w	r3, r3, #16
 80105a6:	647b      	str	r3, [r7, #68]	; 0x44
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	461a      	mov	r2, r3
 80105ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80105b0:	61bb      	str	r3, [r7, #24]
 80105b2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105b4:	6979      	ldr	r1, [r7, #20]
 80105b6:	69ba      	ldr	r2, [r7, #24]
 80105b8:	e841 2300 	strex	r3, r2, [r1]
 80105bc:	613b      	str	r3, [r7, #16]
   return(result);
 80105be:	693b      	ldr	r3, [r7, #16]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d1e6      	bne.n	8010592 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	2220      	movs	r2, #32
 80105c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105cc:	687b      	ldr	r3, [r7, #4]
 80105ce:	2200      	movs	r2, #0
 80105d0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	2200      	movs	r2, #0
 80105d6:	671a      	str	r2, [r3, #112]	; 0x70
}
 80105d8:	bf00      	nop
 80105da:	3754      	adds	r7, #84	; 0x54
 80105dc:	46bd      	mov	sp, r7
 80105de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105e2:	4770      	bx	lr
 80105e4:	effffffe 	.word	0xeffffffe

080105e8 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80105e8:	b580      	push	{r7, lr}
 80105ea:	b09c      	sub	sp, #112	; 0x70
 80105ec:	af00      	add	r7, sp, #0
 80105ee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80105f0:	687b      	ldr	r3, [r7, #4]
 80105f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80105f4:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80105f6:	687b      	ldr	r3, [r7, #4]
 80105f8:	69db      	ldr	r3, [r3, #28]
 80105fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80105fe:	d071      	beq.n	80106e4 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 8010600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010602:	2200      	movs	r2, #0
 8010604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8010608:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801060a:	681b      	ldr	r3, [r3, #0]
 801060c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8010616:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010618:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 801061c:	66bb      	str	r3, [r7, #104]	; 0x68
 801061e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	461a      	mov	r2, r3
 8010624:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8010626:	65bb      	str	r3, [r7, #88]	; 0x58
 8010628:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801062c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801062e:	e841 2300 	strex	r3, r2, [r1]
 8010632:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8010634:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1e6      	bne.n	8010608 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801063a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3308      	adds	r3, #8
 8010640:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010644:	e853 3f00 	ldrex	r3, [r3]
 8010648:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 801064a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801064c:	f023 0301 	bic.w	r3, r3, #1
 8010650:	667b      	str	r3, [r7, #100]	; 0x64
 8010652:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	3308      	adds	r3, #8
 8010658:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801065a:	647a      	str	r2, [r7, #68]	; 0x44
 801065c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801065e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010660:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010662:	e841 2300 	strex	r3, r2, [r1]
 8010666:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801066a:	2b00      	cmp	r3, #0
 801066c:	d1e5      	bne.n	801063a <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801066e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010670:	681b      	ldr	r3, [r3, #0]
 8010672:	3308      	adds	r3, #8
 8010674:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010678:	e853 3f00 	ldrex	r3, [r3]
 801067c:	623b      	str	r3, [r7, #32]
   return(result);
 801067e:	6a3b      	ldr	r3, [r7, #32]
 8010680:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010684:	663b      	str	r3, [r7, #96]	; 0x60
 8010686:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	3308      	adds	r3, #8
 801068c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801068e:	633a      	str	r2, [r7, #48]	; 0x30
 8010690:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010692:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010696:	e841 2300 	strex	r3, r2, [r1]
 801069a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 801069c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d1e5      	bne.n	801066e <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80106a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106a4:	2220      	movs	r2, #32
 80106a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106ae:	2b01      	cmp	r3, #1
 80106b0:	d118      	bne.n	80106e4 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80106b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106b4:	681b      	ldr	r3, [r3, #0]
 80106b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b8:	693b      	ldr	r3, [r7, #16]
 80106ba:	e853 3f00 	ldrex	r3, [r3]
 80106be:	60fb      	str	r3, [r7, #12]
   return(result);
 80106c0:	68fb      	ldr	r3, [r7, #12]
 80106c2:	f023 0310 	bic.w	r3, r3, #16
 80106c6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80106c8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ca:	681b      	ldr	r3, [r3, #0]
 80106cc:	461a      	mov	r2, r3
 80106ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80106d0:	61fb      	str	r3, [r7, #28]
 80106d2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d4:	69b9      	ldr	r1, [r7, #24]
 80106d6:	69fa      	ldr	r2, [r7, #28]
 80106d8:	e841 2300 	strex	r3, r2, [r1]
 80106dc:	617b      	str	r3, [r7, #20]
   return(result);
 80106de:	697b      	ldr	r3, [r7, #20]
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d1e6      	bne.n	80106b2 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80106e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80106e8:	2b01      	cmp	r3, #1
 80106ea:	d107      	bne.n	80106fc <UART_DMAReceiveCplt+0x114>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80106ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80106ee:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80106f2:	4619      	mov	r1, r3
 80106f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80106f6:	f7fe fefd 	bl	800f4f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80106fa:	e002      	b.n	8010702 <UART_DMAReceiveCplt+0x11a>
    HAL_UART_RxCpltCallback(huart);
 80106fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80106fe:	f7fe fedb 	bl	800f4b8 <HAL_UART_RxCpltCallback>
}
 8010702:	bf00      	nop
 8010704:	3770      	adds	r7, #112	; 0x70
 8010706:	46bd      	mov	sp, r7
 8010708:	bd80      	pop	{r7, pc}

0801070a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801070a:	b580      	push	{r7, lr}
 801070c:	b084      	sub	sp, #16
 801070e:	af00      	add	r7, sp, #0
 8010710:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010716:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010718:	68fb      	ldr	r3, [r7, #12]
 801071a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801071c:	2b01      	cmp	r3, #1
 801071e:	d109      	bne.n	8010734 <UART_DMARxHalfCplt+0x2a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010726:	085b      	lsrs	r3, r3, #1
 8010728:	b29b      	uxth	r3, r3
 801072a:	4619      	mov	r1, r3
 801072c:	68f8      	ldr	r0, [r7, #12]
 801072e:	f7fe fee1 	bl	800f4f4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8010732:	e002      	b.n	801073a <UART_DMARxHalfCplt+0x30>
    HAL_UART_RxHalfCpltCallback(huart);
 8010734:	68f8      	ldr	r0, [r7, #12]
 8010736:	f7fe fec9 	bl	800f4cc <HAL_UART_RxHalfCpltCallback>
}
 801073a:	bf00      	nop
 801073c:	3710      	adds	r7, #16
 801073e:	46bd      	mov	sp, r7
 8010740:	bd80      	pop	{r7, pc}

08010742 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8010742:	b580      	push	{r7, lr}
 8010744:	b086      	sub	sp, #24
 8010746:	af00      	add	r7, sp, #0
 8010748:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801074e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8010750:	697b      	ldr	r3, [r7, #20]
 8010752:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8010756:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8010758:	697b      	ldr	r3, [r7, #20]
 801075a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801075e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8010760:	697b      	ldr	r3, [r7, #20]
 8010762:	681b      	ldr	r3, [r3, #0]
 8010764:	689b      	ldr	r3, [r3, #8]
 8010766:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801076a:	2b80      	cmp	r3, #128	; 0x80
 801076c:	d109      	bne.n	8010782 <UART_DMAError+0x40>
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	2b21      	cmp	r3, #33	; 0x21
 8010772:	d106      	bne.n	8010782 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8010774:	697b      	ldr	r3, [r7, #20]
 8010776:	2200      	movs	r2, #0
 8010778:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    UART_EndTxTransfer(huart);
 801077c:	6978      	ldr	r0, [r7, #20]
 801077e:	f7ff fe8b 	bl	8010498 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8010782:	697b      	ldr	r3, [r7, #20]
 8010784:	681b      	ldr	r3, [r3, #0]
 8010786:	689b      	ldr	r3, [r3, #8]
 8010788:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801078c:	2b40      	cmp	r3, #64	; 0x40
 801078e:	d109      	bne.n	80107a4 <UART_DMAError+0x62>
 8010790:	68fb      	ldr	r3, [r7, #12]
 8010792:	2b22      	cmp	r3, #34	; 0x22
 8010794:	d106      	bne.n	80107a4 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8010796:	697b      	ldr	r3, [r7, #20]
 8010798:	2200      	movs	r2, #0
 801079a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    UART_EndRxTransfer(huart);
 801079e:	6978      	ldr	r0, [r7, #20]
 80107a0:	f7ff febc 	bl	801051c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80107a4:	697b      	ldr	r3, [r7, #20]
 80107a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80107aa:	f043 0210 	orr.w	r2, r3, #16
 80107ae:	697b      	ldr	r3, [r7, #20]
 80107b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80107b4:	6978      	ldr	r0, [r7, #20]
 80107b6:	f7fe fe93 	bl	800f4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107ba:	bf00      	nop
 80107bc:	3718      	adds	r7, #24
 80107be:	46bd      	mov	sp, r7
 80107c0:	bd80      	pop	{r7, pc}

080107c2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80107c2:	b580      	push	{r7, lr}
 80107c4:	b084      	sub	sp, #16
 80107c6:	af00      	add	r7, sp, #0
 80107c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80107ca:	687b      	ldr	r3, [r7, #4]
 80107cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80107ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	2200      	movs	r2, #0
 80107d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	2200      	movs	r2, #0
 80107dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80107e0:	68f8      	ldr	r0, [r7, #12]
 80107e2:	f7fe fe7d 	bl	800f4e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80107e6:	bf00      	nop
 80107e8:	3710      	adds	r7, #16
 80107ea:	46bd      	mov	sp, r7
 80107ec:	bd80      	pop	{r7, pc}

080107ee <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80107ee:	b580      	push	{r7, lr}
 80107f0:	b088      	sub	sp, #32
 80107f2:	af00      	add	r7, sp, #0
 80107f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80107f6:	687b      	ldr	r3, [r7, #4]
 80107f8:	681b      	ldr	r3, [r3, #0]
 80107fa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	e853 3f00 	ldrex	r3, [r3]
 8010802:	60bb      	str	r3, [r7, #8]
   return(result);
 8010804:	68bb      	ldr	r3, [r7, #8]
 8010806:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 801080a:	61fb      	str	r3, [r7, #28]
 801080c:	687b      	ldr	r3, [r7, #4]
 801080e:	681b      	ldr	r3, [r3, #0]
 8010810:	461a      	mov	r2, r3
 8010812:	69fb      	ldr	r3, [r7, #28]
 8010814:	61bb      	str	r3, [r7, #24]
 8010816:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010818:	6979      	ldr	r1, [r7, #20]
 801081a:	69ba      	ldr	r2, [r7, #24]
 801081c:	e841 2300 	strex	r3, r2, [r1]
 8010820:	613b      	str	r3, [r7, #16]
   return(result);
 8010822:	693b      	ldr	r3, [r7, #16]
 8010824:	2b00      	cmp	r3, #0
 8010826:	d1e6      	bne.n	80107f6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	2220      	movs	r2, #32
 801082c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010830:	687b      	ldr	r3, [r7, #4]
 8010832:	2200      	movs	r2, #0
 8010834:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010836:	6878      	ldr	r0, [r7, #4]
 8010838:	f7fe fe34 	bl	800f4a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801083c:	bf00      	nop
 801083e:	3720      	adds	r7, #32
 8010840:	46bd      	mov	sp, r7
 8010842:	bd80      	pop	{r7, pc}

08010844 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8010844:	b480      	push	{r7}
 8010846:	b083      	sub	sp, #12
 8010848:	af00      	add	r7, sp, #0
 801084a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801084c:	bf00      	nop
 801084e:	370c      	adds	r7, #12
 8010850:	46bd      	mov	sp, r7
 8010852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010856:	4770      	bx	lr

08010858 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8010858:	b480      	push	{r7}
 801085a:	b083      	sub	sp, #12
 801085c:	af00      	add	r7, sp, #0
 801085e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8010860:	bf00      	nop
 8010862:	370c      	adds	r7, #12
 8010864:	46bd      	mov	sp, r7
 8010866:	f85d 7b04 	ldr.w	r7, [sp], #4
 801086a:	4770      	bx	lr

0801086c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801086c:	b480      	push	{r7}
 801086e:	b083      	sub	sp, #12
 8010870:	af00      	add	r7, sp, #0
 8010872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8010874:	bf00      	nop
 8010876:	370c      	adds	r7, #12
 8010878:	46bd      	mov	sp, r7
 801087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801087e:	4770      	bx	lr

08010880 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8010880:	b480      	push	{r7}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010888:	687b      	ldr	r3, [r7, #4]
 801088a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801088e:	2b01      	cmp	r3, #1
 8010890:	d101      	bne.n	8010896 <HAL_UARTEx_DisableFifoMode+0x16>
 8010892:	2302      	movs	r3, #2
 8010894:	e027      	b.n	80108e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	2201      	movs	r2, #1
 801089a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	2224      	movs	r2, #36	; 0x24
 80108a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	681b      	ldr	r3, [r3, #0]
 80108aa:	681b      	ldr	r3, [r3, #0]
 80108ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	681b      	ldr	r3, [r3, #0]
 80108b2:	681a      	ldr	r2, [r3, #0]
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f022 0201 	bic.w	r2, r2, #1
 80108bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80108be:	68fb      	ldr	r3, [r7, #12]
 80108c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80108c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80108c6:	687b      	ldr	r3, [r7, #4]
 80108c8:	2200      	movs	r2, #0
 80108ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80108cc:	687b      	ldr	r3, [r7, #4]
 80108ce:	681b      	ldr	r3, [r3, #0]
 80108d0:	68fa      	ldr	r2, [r7, #12]
 80108d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	2220      	movs	r2, #32
 80108d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80108dc:	687b      	ldr	r3, [r7, #4]
 80108de:	2200      	movs	r2, #0
 80108e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80108e4:	2300      	movs	r3, #0
}
 80108e6:	4618      	mov	r0, r3
 80108e8:	3714      	adds	r7, #20
 80108ea:	46bd      	mov	sp, r7
 80108ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108f0:	4770      	bx	lr

080108f2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80108f2:	b580      	push	{r7, lr}
 80108f4:	b084      	sub	sp, #16
 80108f6:	af00      	add	r7, sp, #0
 80108f8:	6078      	str	r0, [r7, #4]
 80108fa:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80108fc:	687b      	ldr	r3, [r7, #4]
 80108fe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8010902:	2b01      	cmp	r3, #1
 8010904:	d101      	bne.n	801090a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8010906:	2302      	movs	r3, #2
 8010908:	e02d      	b.n	8010966 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 801090a:	687b      	ldr	r3, [r7, #4]
 801090c:	2201      	movs	r2, #1
 801090e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8010912:	687b      	ldr	r3, [r7, #4]
 8010914:	2224      	movs	r2, #36	; 0x24
 8010916:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801091a:	687b      	ldr	r3, [r7, #4]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	681b      	ldr	r3, [r3, #0]
 8010920:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8010922:	687b      	ldr	r3, [r7, #4]
 8010924:	681b      	ldr	r3, [r3, #0]
 8010926:	681a      	ldr	r2, [r3, #0]
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	681b      	ldr	r3, [r3, #0]
 801092c:	f022 0201 	bic.w	r2, r2, #1
 8010930:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	689b      	ldr	r3, [r3, #8]
 8010938:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 801093c:	687b      	ldr	r3, [r7, #4]
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	683a      	ldr	r2, [r7, #0]
 8010942:	430a      	orrs	r2, r1
 8010944:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8010946:	6878      	ldr	r0, [r7, #4]
 8010948:	f000 f850 	bl	80109ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801094c:	687b      	ldr	r3, [r7, #4]
 801094e:	681b      	ldr	r3, [r3, #0]
 8010950:	68fa      	ldr	r2, [r7, #12]
 8010952:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8010954:	687b      	ldr	r3, [r7, #4]
 8010956:	2220      	movs	r2, #32
 8010958:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801095c:	687b      	ldr	r3, [r7, #4]
 801095e:	2200      	movs	r2, #0
 8010960:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8010964:	2300      	movs	r3, #0
}
 8010966:	4618      	mov	r0, r3
 8010968:	3710      	adds	r7, #16
 801096a:	46bd      	mov	sp, r7
 801096c:	bd80      	pop	{r7, pc}

0801096e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801096e:	b580      	push	{r7, lr}
 8010970:	b084      	sub	sp, #16
 8010972:	af00      	add	r7, sp, #0
 8010974:	6078      	str	r0, [r7, #4]
 8010976:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8010978:	687b      	ldr	r3, [r7, #4]
 801097a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 801097e:	2b01      	cmp	r3, #1
 8010980:	d101      	bne.n	8010986 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8010982:	2302      	movs	r3, #2
 8010984:	e02d      	b.n	80109e2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8010986:	687b      	ldr	r3, [r7, #4]
 8010988:	2201      	movs	r2, #1
 801098a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 801098e:	687b      	ldr	r3, [r7, #4]
 8010990:	2224      	movs	r2, #36	; 0x24
 8010992:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8010996:	687b      	ldr	r3, [r7, #4]
 8010998:	681b      	ldr	r3, [r3, #0]
 801099a:	681b      	ldr	r3, [r3, #0]
 801099c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	681b      	ldr	r3, [r3, #0]
 80109a2:	681a      	ldr	r2, [r3, #0]
 80109a4:	687b      	ldr	r3, [r7, #4]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	f022 0201 	bic.w	r2, r2, #1
 80109ac:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80109ae:	687b      	ldr	r3, [r7, #4]
 80109b0:	681b      	ldr	r3, [r3, #0]
 80109b2:	689b      	ldr	r3, [r3, #8]
 80109b4:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	683a      	ldr	r2, [r7, #0]
 80109be:	430a      	orrs	r2, r1
 80109c0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80109c2:	6878      	ldr	r0, [r7, #4]
 80109c4:	f000 f812 	bl	80109ec <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80109c8:	687b      	ldr	r3, [r7, #4]
 80109ca:	681b      	ldr	r3, [r3, #0]
 80109cc:	68fa      	ldr	r2, [r7, #12]
 80109ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80109d0:	687b      	ldr	r3, [r7, #4]
 80109d2:	2220      	movs	r2, #32
 80109d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80109d8:	687b      	ldr	r3, [r7, #4]
 80109da:	2200      	movs	r2, #0
 80109dc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80109e0:	2300      	movs	r3, #0
}
 80109e2:	4618      	mov	r0, r3
 80109e4:	3710      	adds	r7, #16
 80109e6:	46bd      	mov	sp, r7
 80109e8:	bd80      	pop	{r7, pc}
	...

080109ec <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80109ec:	b480      	push	{r7}
 80109ee:	b085      	sub	sp, #20
 80109f0:	af00      	add	r7, sp, #0
 80109f2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80109f4:	687b      	ldr	r3, [r7, #4]
 80109f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80109f8:	2b00      	cmp	r3, #0
 80109fa:	d108      	bne.n	8010a0e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	2201      	movs	r2, #1
 8010a00:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	2201      	movs	r2, #1
 8010a08:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8010a0c:	e031      	b.n	8010a72 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8010a0e:	2310      	movs	r3, #16
 8010a10:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8010a12:	2310      	movs	r3, #16
 8010a14:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8010a16:	687b      	ldr	r3, [r7, #4]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	689b      	ldr	r3, [r3, #8]
 8010a1c:	0e5b      	lsrs	r3, r3, #25
 8010a1e:	b2db      	uxtb	r3, r3
 8010a20:	f003 0307 	and.w	r3, r3, #7
 8010a24:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	681b      	ldr	r3, [r3, #0]
 8010a2a:	689b      	ldr	r3, [r3, #8]
 8010a2c:	0f5b      	lsrs	r3, r3, #29
 8010a2e:	b2db      	uxtb	r3, r3
 8010a30:	f003 0307 	and.w	r3, r3, #7
 8010a34:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a36:	7bbb      	ldrb	r3, [r7, #14]
 8010a38:	7b3a      	ldrb	r2, [r7, #12]
 8010a3a:	4911      	ldr	r1, [pc, #68]	; (8010a80 <UARTEx_SetNbDataToProcess+0x94>)
 8010a3c:	5c8a      	ldrb	r2, [r1, r2]
 8010a3e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8010a42:	7b3a      	ldrb	r2, [r7, #12]
 8010a44:	490f      	ldr	r1, [pc, #60]	; (8010a84 <UARTEx_SetNbDataToProcess+0x98>)
 8010a46:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8010a48:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a4c:	b29a      	uxth	r2, r3
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a54:	7bfb      	ldrb	r3, [r7, #15]
 8010a56:	7b7a      	ldrb	r2, [r7, #13]
 8010a58:	4909      	ldr	r1, [pc, #36]	; (8010a80 <UARTEx_SetNbDataToProcess+0x94>)
 8010a5a:	5c8a      	ldrb	r2, [r1, r2]
 8010a5c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8010a60:	7b7a      	ldrb	r2, [r7, #13]
 8010a62:	4908      	ldr	r1, [pc, #32]	; (8010a84 <UARTEx_SetNbDataToProcess+0x98>)
 8010a64:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8010a66:	fb93 f3f2 	sdiv	r3, r3, r2
 8010a6a:	b29a      	uxth	r2, r3
 8010a6c:	687b      	ldr	r3, [r7, #4]
 8010a6e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8010a72:	bf00      	nop
 8010a74:	3714      	adds	r7, #20
 8010a76:	46bd      	mov	sp, r7
 8010a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a7c:	4770      	bx	lr
 8010a7e:	bf00      	nop
 8010a80:	08012bf8 	.word	0x08012bf8
 8010a84:	08012c00 	.word	0x08012c00

08010a88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010a88:	b084      	sub	sp, #16
 8010a8a:	b580      	push	{r7, lr}
 8010a8c:	b084      	sub	sp, #16
 8010a8e:	af00      	add	r7, sp, #0
 8010a90:	6078      	str	r0, [r7, #4]
 8010a92:	f107 001c 	add.w	r0, r7, #28
 8010a96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a9c:	2b01      	cmp	r3, #1
 8010a9e:	d120      	bne.n	8010ae2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010aa4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	68da      	ldr	r2, [r3, #12]
 8010ab0:	4b2a      	ldr	r3, [pc, #168]	; (8010b5c <USB_CoreInit+0xd4>)
 8010ab2:	4013      	ands	r3, r2
 8010ab4:	687a      	ldr	r2, [r7, #4]
 8010ab6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8010ab8:	687b      	ldr	r3, [r7, #4]
 8010aba:	68db      	ldr	r3, [r3, #12]
 8010abc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8010ac4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010ac6:	2b01      	cmp	r3, #1
 8010ac8:	d105      	bne.n	8010ad6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	68db      	ldr	r3, [r3, #12]
 8010ace:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010ad6:	6878      	ldr	r0, [r7, #4]
 8010ad8:	f000 faac 	bl	8011034 <USB_CoreReset>
 8010adc:	4603      	mov	r3, r0
 8010ade:	73fb      	strb	r3, [r7, #15]
 8010ae0:	e01a      	b.n	8010b18 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8010ae2:	687b      	ldr	r3, [r7, #4]
 8010ae4:	68db      	ldr	r3, [r3, #12]
 8010ae6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8010aee:	6878      	ldr	r0, [r7, #4]
 8010af0:	f000 faa0 	bl	8011034 <USB_CoreReset>
 8010af4:	4603      	mov	r3, r0
 8010af6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8010af8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d106      	bne.n	8010b0c <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b02:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8010b06:	687b      	ldr	r3, [r7, #4]
 8010b08:	639a      	str	r2, [r3, #56]	; 0x38
 8010b0a:	e005      	b.n	8010b18 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8010b0c:	687b      	ldr	r3, [r7, #4]
 8010b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010b10:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8010b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b1a:	2b01      	cmp	r3, #1
 8010b1c:	d116      	bne.n	8010b4c <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8010b1e:	687b      	ldr	r3, [r7, #4]
 8010b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010b22:	b29a      	uxth	r2, r3
 8010b24:	687b      	ldr	r3, [r7, #4]
 8010b26:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8010b28:	687b      	ldr	r3, [r7, #4]
 8010b2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8010b2c:	4b0c      	ldr	r3, [pc, #48]	; (8010b60 <USB_CoreInit+0xd8>)
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	687a      	ldr	r2, [r7, #4]
 8010b32:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8010b34:	687b      	ldr	r3, [r7, #4]
 8010b36:	689b      	ldr	r3, [r3, #8]
 8010b38:	f043 0206 	orr.w	r2, r3, #6
 8010b3c:	687b      	ldr	r3, [r7, #4]
 8010b3e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	689b      	ldr	r3, [r3, #8]
 8010b44:	f043 0220 	orr.w	r2, r3, #32
 8010b48:	687b      	ldr	r3, [r7, #4]
 8010b4a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8010b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3710      	adds	r7, #16
 8010b52:	46bd      	mov	sp, r7
 8010b54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010b58:	b004      	add	sp, #16
 8010b5a:	4770      	bx	lr
 8010b5c:	ffbdffbf 	.word	0xffbdffbf
 8010b60:	03ee0000 	.word	0x03ee0000

08010b64 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8010b64:	b480      	push	{r7}
 8010b66:	b083      	sub	sp, #12
 8010b68:	af00      	add	r7, sp, #0
 8010b6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	689b      	ldr	r3, [r3, #8]
 8010b70:	f023 0201 	bic.w	r2, r3, #1
 8010b74:	687b      	ldr	r3, [r7, #4]
 8010b76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8010b78:	2300      	movs	r3, #0
}
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	370c      	adds	r7, #12
 8010b7e:	46bd      	mov	sp, r7
 8010b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b84:	4770      	bx	lr

08010b86 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8010b86:	b580      	push	{r7, lr}
 8010b88:	b084      	sub	sp, #16
 8010b8a:	af00      	add	r7, sp, #0
 8010b8c:	6078      	str	r0, [r7, #4]
 8010b8e:	460b      	mov	r3, r1
 8010b90:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8010b92:	2300      	movs	r3, #0
 8010b94:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8010b96:	687b      	ldr	r3, [r7, #4]
 8010b98:	68db      	ldr	r3, [r3, #12]
 8010b9a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8010ba2:	78fb      	ldrb	r3, [r7, #3]
 8010ba4:	2b01      	cmp	r3, #1
 8010ba6:	d115      	bne.n	8010bd4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	68db      	ldr	r3, [r3, #12]
 8010bac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8010bb0:	687b      	ldr	r3, [r7, #4]
 8010bb2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010bb4:	2001      	movs	r0, #1
 8010bb6:	f7f6 fa9d 	bl	80070f4 <HAL_Delay>
      ms++;
 8010bba:	68fb      	ldr	r3, [r7, #12]
 8010bbc:	3301      	adds	r3, #1
 8010bbe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8010bc0:	6878      	ldr	r0, [r7, #4]
 8010bc2:	f000 fa29 	bl	8011018 <USB_GetMode>
 8010bc6:	4603      	mov	r3, r0
 8010bc8:	2b01      	cmp	r3, #1
 8010bca:	d01e      	beq.n	8010c0a <USB_SetCurrentMode+0x84>
 8010bcc:	68fb      	ldr	r3, [r7, #12]
 8010bce:	2b31      	cmp	r3, #49	; 0x31
 8010bd0:	d9f0      	bls.n	8010bb4 <USB_SetCurrentMode+0x2e>
 8010bd2:	e01a      	b.n	8010c0a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8010bd4:	78fb      	ldrb	r3, [r7, #3]
 8010bd6:	2b00      	cmp	r3, #0
 8010bd8:	d115      	bne.n	8010c06 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	68db      	ldr	r3, [r3, #12]
 8010bde:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8010be2:	687b      	ldr	r3, [r7, #4]
 8010be4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8010be6:	2001      	movs	r0, #1
 8010be8:	f7f6 fa84 	bl	80070f4 <HAL_Delay>
      ms++;
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	3301      	adds	r3, #1
 8010bf0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8010bf2:	6878      	ldr	r0, [r7, #4]
 8010bf4:	f000 fa10 	bl	8011018 <USB_GetMode>
 8010bf8:	4603      	mov	r3, r0
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d005      	beq.n	8010c0a <USB_SetCurrentMode+0x84>
 8010bfe:	68fb      	ldr	r3, [r7, #12]
 8010c00:	2b31      	cmp	r3, #49	; 0x31
 8010c02:	d9f0      	bls.n	8010be6 <USB_SetCurrentMode+0x60>
 8010c04:	e001      	b.n	8010c0a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8010c06:	2301      	movs	r3, #1
 8010c08:	e005      	b.n	8010c16 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8010c0a:	68fb      	ldr	r3, [r7, #12]
 8010c0c:	2b32      	cmp	r3, #50	; 0x32
 8010c0e:	d101      	bne.n	8010c14 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8010c10:	2301      	movs	r3, #1
 8010c12:	e000      	b.n	8010c16 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8010c14:	2300      	movs	r3, #0
}
 8010c16:	4618      	mov	r0, r3
 8010c18:	3710      	adds	r7, #16
 8010c1a:	46bd      	mov	sp, r7
 8010c1c:	bd80      	pop	{r7, pc}
	...

08010c20 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8010c20:	b084      	sub	sp, #16
 8010c22:	b580      	push	{r7, lr}
 8010c24:	b086      	sub	sp, #24
 8010c26:	af00      	add	r7, sp, #0
 8010c28:	6078      	str	r0, [r7, #4]
 8010c2a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8010c2e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8010c32:	2300      	movs	r3, #0
 8010c34:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8010c3a:	2300      	movs	r3, #0
 8010c3c:	613b      	str	r3, [r7, #16]
 8010c3e:	e009      	b.n	8010c54 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8010c40:	687a      	ldr	r2, [r7, #4]
 8010c42:	693b      	ldr	r3, [r7, #16]
 8010c44:	3340      	adds	r3, #64	; 0x40
 8010c46:	009b      	lsls	r3, r3, #2
 8010c48:	4413      	add	r3, r2
 8010c4a:	2200      	movs	r2, #0
 8010c4c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8010c4e:	693b      	ldr	r3, [r7, #16]
 8010c50:	3301      	adds	r3, #1
 8010c52:	613b      	str	r3, [r7, #16]
 8010c54:	693b      	ldr	r3, [r7, #16]
 8010c56:	2b0e      	cmp	r3, #14
 8010c58:	d9f2      	bls.n	8010c40 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8010c5a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010c5c:	2b00      	cmp	r3, #0
 8010c5e:	d11c      	bne.n	8010c9a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010c60:	68fb      	ldr	r3, [r7, #12]
 8010c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010c66:	685b      	ldr	r3, [r3, #4]
 8010c68:	68fa      	ldr	r2, [r7, #12]
 8010c6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010c6e:	f043 0302 	orr.w	r3, r3, #2
 8010c72:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c78:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8010c7c:	687b      	ldr	r3, [r7, #4]
 8010c7e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	681b      	ldr	r3, [r3, #0]
 8010c84:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8010c88:	687b      	ldr	r3, [r7, #4]
 8010c8a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8010c8c:	687b      	ldr	r3, [r7, #4]
 8010c8e:	681b      	ldr	r3, [r3, #0]
 8010c90:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	601a      	str	r2, [r3, #0]
 8010c98:	e005      	b.n	8010ca6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010c9e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8010ca2:	687b      	ldr	r3, [r7, #4]
 8010ca4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8010ca6:	68fb      	ldr	r3, [r7, #12]
 8010ca8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010cac:	461a      	mov	r2, r3
 8010cae:	2300      	movs	r3, #0
 8010cb0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8010cb2:	68fb      	ldr	r3, [r7, #12]
 8010cb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cb8:	4619      	mov	r1, r3
 8010cba:	68fb      	ldr	r3, [r7, #12]
 8010cbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010cc0:	461a      	mov	r2, r3
 8010cc2:	680b      	ldr	r3, [r1, #0]
 8010cc4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8010cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010cc8:	2b01      	cmp	r3, #1
 8010cca:	d10c      	bne.n	8010ce6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8010ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d104      	bne.n	8010cdc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8010cd2:	2100      	movs	r1, #0
 8010cd4:	6878      	ldr	r0, [r7, #4]
 8010cd6:	f000 f965 	bl	8010fa4 <USB_SetDevSpeed>
 8010cda:	e008      	b.n	8010cee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8010cdc:	2101      	movs	r1, #1
 8010cde:	6878      	ldr	r0, [r7, #4]
 8010ce0:	f000 f960 	bl	8010fa4 <USB_SetDevSpeed>
 8010ce4:	e003      	b.n	8010cee <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8010ce6:	2103      	movs	r1, #3
 8010ce8:	6878      	ldr	r0, [r7, #4]
 8010cea:	f000 f95b 	bl	8010fa4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8010cee:	2110      	movs	r1, #16
 8010cf0:	6878      	ldr	r0, [r7, #4]
 8010cf2:	f000 f8f3 	bl	8010edc <USB_FlushTxFifo>
 8010cf6:	4603      	mov	r3, r0
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	d001      	beq.n	8010d00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8010cfc:	2301      	movs	r3, #1
 8010cfe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8010d00:	6878      	ldr	r0, [r7, #4]
 8010d02:	f000 f91f 	bl	8010f44 <USB_FlushRxFifo>
 8010d06:	4603      	mov	r3, r0
 8010d08:	2b00      	cmp	r3, #0
 8010d0a:	d001      	beq.n	8010d10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8010d0c:	2301      	movs	r3, #1
 8010d0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8010d10:	68fb      	ldr	r3, [r7, #12]
 8010d12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d16:	461a      	mov	r2, r3
 8010d18:	2300      	movs	r3, #0
 8010d1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8010d1c:	68fb      	ldr	r3, [r7, #12]
 8010d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d22:	461a      	mov	r2, r3
 8010d24:	2300      	movs	r3, #0
 8010d26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010d2e:	461a      	mov	r2, r3
 8010d30:	2300      	movs	r3, #0
 8010d32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010d34:	2300      	movs	r3, #0
 8010d36:	613b      	str	r3, [r7, #16]
 8010d38:	e043      	b.n	8010dc2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8010d3a:	693b      	ldr	r3, [r7, #16]
 8010d3c:	015a      	lsls	r2, r3, #5
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	4413      	add	r3, r2
 8010d42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d46:	681b      	ldr	r3, [r3, #0]
 8010d48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010d4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010d50:	d118      	bne.n	8010d84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8010d52:	693b      	ldr	r3, [r7, #16]
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d10a      	bne.n	8010d6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8010d58:	693b      	ldr	r3, [r7, #16]
 8010d5a:	015a      	lsls	r2, r3, #5
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	4413      	add	r3, r2
 8010d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d64:	461a      	mov	r2, r3
 8010d66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010d6a:	6013      	str	r3, [r2, #0]
 8010d6c:	e013      	b.n	8010d96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8010d6e:	693b      	ldr	r3, [r7, #16]
 8010d70:	015a      	lsls	r2, r3, #5
 8010d72:	68fb      	ldr	r3, [r7, #12]
 8010d74:	4413      	add	r3, r2
 8010d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d7a:	461a      	mov	r2, r3
 8010d7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010d80:	6013      	str	r3, [r2, #0]
 8010d82:	e008      	b.n	8010d96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8010d84:	693b      	ldr	r3, [r7, #16]
 8010d86:	015a      	lsls	r2, r3, #5
 8010d88:	68fb      	ldr	r3, [r7, #12]
 8010d8a:	4413      	add	r3, r2
 8010d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010d90:	461a      	mov	r2, r3
 8010d92:	2300      	movs	r3, #0
 8010d94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	015a      	lsls	r2, r3, #5
 8010d9a:	68fb      	ldr	r3, [r7, #12]
 8010d9c:	4413      	add	r3, r2
 8010d9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010da2:	461a      	mov	r2, r3
 8010da4:	2300      	movs	r3, #0
 8010da6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	015a      	lsls	r2, r3, #5
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	4413      	add	r3, r2
 8010db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010db4:	461a      	mov	r2, r3
 8010db6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010dba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010dbc:	693b      	ldr	r3, [r7, #16]
 8010dbe:	3301      	adds	r3, #1
 8010dc0:	613b      	str	r3, [r7, #16]
 8010dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010dc4:	693a      	ldr	r2, [r7, #16]
 8010dc6:	429a      	cmp	r2, r3
 8010dc8:	d3b7      	bcc.n	8010d3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010dca:	2300      	movs	r3, #0
 8010dcc:	613b      	str	r3, [r7, #16]
 8010dce:	e043      	b.n	8010e58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	015a      	lsls	r2, r3, #5
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	4413      	add	r3, r2
 8010dd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8010de2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8010de6:	d118      	bne.n	8010e1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8010de8:	693b      	ldr	r3, [r7, #16]
 8010dea:	2b00      	cmp	r3, #0
 8010dec:	d10a      	bne.n	8010e04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8010dee:	693b      	ldr	r3, [r7, #16]
 8010df0:	015a      	lsls	r2, r3, #5
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	4413      	add	r3, r2
 8010df6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010dfa:	461a      	mov	r2, r3
 8010dfc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8010e00:	6013      	str	r3, [r2, #0]
 8010e02:	e013      	b.n	8010e2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8010e04:	693b      	ldr	r3, [r7, #16]
 8010e06:	015a      	lsls	r2, r3, #5
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	4413      	add	r3, r2
 8010e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e10:	461a      	mov	r2, r3
 8010e12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8010e16:	6013      	str	r3, [r2, #0]
 8010e18:	e008      	b.n	8010e2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8010e1a:	693b      	ldr	r3, [r7, #16]
 8010e1c:	015a      	lsls	r2, r3, #5
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	4413      	add	r3, r2
 8010e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e26:	461a      	mov	r2, r3
 8010e28:	2300      	movs	r3, #0
 8010e2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8010e2c:	693b      	ldr	r3, [r7, #16]
 8010e2e:	015a      	lsls	r2, r3, #5
 8010e30:	68fb      	ldr	r3, [r7, #12]
 8010e32:	4413      	add	r3, r2
 8010e34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e38:	461a      	mov	r2, r3
 8010e3a:	2300      	movs	r3, #0
 8010e3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8010e3e:	693b      	ldr	r3, [r7, #16]
 8010e40:	015a      	lsls	r2, r3, #5
 8010e42:	68fb      	ldr	r3, [r7, #12]
 8010e44:	4413      	add	r3, r2
 8010e46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010e4a:	461a      	mov	r2, r3
 8010e4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8010e50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8010e52:	693b      	ldr	r3, [r7, #16]
 8010e54:	3301      	adds	r3, #1
 8010e56:	613b      	str	r3, [r7, #16]
 8010e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010e5a:	693a      	ldr	r2, [r7, #16]
 8010e5c:	429a      	cmp	r2, r3
 8010e5e:	d3b7      	bcc.n	8010dd0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8010e60:	68fb      	ldr	r3, [r7, #12]
 8010e62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010e66:	691b      	ldr	r3, [r3, #16]
 8010e68:	68fa      	ldr	r2, [r7, #12]
 8010e6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010e6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8010e72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	2200      	movs	r2, #0
 8010e78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8010e80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8010e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010e84:	2b00      	cmp	r3, #0
 8010e86:	d105      	bne.n	8010e94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	699b      	ldr	r3, [r3, #24]
 8010e8c:	f043 0210 	orr.w	r2, r3, #16
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8010e94:	687b      	ldr	r3, [r7, #4]
 8010e96:	699a      	ldr	r2, [r3, #24]
 8010e98:	4b0e      	ldr	r3, [pc, #56]	; (8010ed4 <USB_DevInit+0x2b4>)
 8010e9a:	4313      	orrs	r3, r2
 8010e9c:	687a      	ldr	r2, [r7, #4]
 8010e9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8010ea0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d005      	beq.n	8010eb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	699b      	ldr	r3, [r3, #24]
 8010eaa:	f043 0208 	orr.w	r2, r3, #8
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8010eb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010eb4:	2b01      	cmp	r3, #1
 8010eb6:	d105      	bne.n	8010ec4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	699a      	ldr	r2, [r3, #24]
 8010ebc:	4b06      	ldr	r3, [pc, #24]	; (8010ed8 <USB_DevInit+0x2b8>)
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	687a      	ldr	r2, [r7, #4]
 8010ec2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8010ec4:	7dfb      	ldrb	r3, [r7, #23]
}
 8010ec6:	4618      	mov	r0, r3
 8010ec8:	3718      	adds	r7, #24
 8010eca:	46bd      	mov	sp, r7
 8010ecc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8010ed0:	b004      	add	sp, #16
 8010ed2:	4770      	bx	lr
 8010ed4:	803c3800 	.word	0x803c3800
 8010ed8:	40000004 	.word	0x40000004

08010edc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8010edc:	b480      	push	{r7}
 8010ede:	b085      	sub	sp, #20
 8010ee0:	af00      	add	r7, sp, #0
 8010ee2:	6078      	str	r0, [r7, #4]
 8010ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8010ee6:	2300      	movs	r3, #0
 8010ee8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010eea:	68fb      	ldr	r3, [r7, #12]
 8010eec:	3301      	adds	r3, #1
 8010eee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010ef0:	68fb      	ldr	r3, [r7, #12]
 8010ef2:	4a13      	ldr	r2, [pc, #76]	; (8010f40 <USB_FlushTxFifo+0x64>)
 8010ef4:	4293      	cmp	r3, r2
 8010ef6:	d901      	bls.n	8010efc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8010ef8:	2303      	movs	r3, #3
 8010efa:	e01b      	b.n	8010f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010efc:	687b      	ldr	r3, [r7, #4]
 8010efe:	691b      	ldr	r3, [r3, #16]
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	daf2      	bge.n	8010eea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8010f04:	2300      	movs	r3, #0
 8010f06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8010f08:	683b      	ldr	r3, [r7, #0]
 8010f0a:	019b      	lsls	r3, r3, #6
 8010f0c:	f043 0220 	orr.w	r2, r3, #32
 8010f10:	687b      	ldr	r3, [r7, #4]
 8010f12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	3301      	adds	r3, #1
 8010f18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010f1a:	68fb      	ldr	r3, [r7, #12]
 8010f1c:	4a08      	ldr	r2, [pc, #32]	; (8010f40 <USB_FlushTxFifo+0x64>)
 8010f1e:	4293      	cmp	r3, r2
 8010f20:	d901      	bls.n	8010f26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8010f22:	2303      	movs	r3, #3
 8010f24:	e006      	b.n	8010f34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8010f26:	687b      	ldr	r3, [r7, #4]
 8010f28:	691b      	ldr	r3, [r3, #16]
 8010f2a:	f003 0320 	and.w	r3, r3, #32
 8010f2e:	2b20      	cmp	r3, #32
 8010f30:	d0f0      	beq.n	8010f14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8010f32:	2300      	movs	r3, #0
}
 8010f34:	4618      	mov	r0, r3
 8010f36:	3714      	adds	r7, #20
 8010f38:	46bd      	mov	sp, r7
 8010f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f3e:	4770      	bx	lr
 8010f40:	00030d40 	.word	0x00030d40

08010f44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8010f44:	b480      	push	{r7}
 8010f46:	b085      	sub	sp, #20
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8010f4c:	2300      	movs	r3, #0
 8010f4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010f50:	68fb      	ldr	r3, [r7, #12]
 8010f52:	3301      	adds	r3, #1
 8010f54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010f56:	68fb      	ldr	r3, [r7, #12]
 8010f58:	4a11      	ldr	r2, [pc, #68]	; (8010fa0 <USB_FlushRxFifo+0x5c>)
 8010f5a:	4293      	cmp	r3, r2
 8010f5c:	d901      	bls.n	8010f62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8010f5e:	2303      	movs	r3, #3
 8010f60:	e018      	b.n	8010f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	daf2      	bge.n	8010f50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	2210      	movs	r2, #16
 8010f72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	3301      	adds	r3, #1
 8010f78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	4a08      	ldr	r2, [pc, #32]	; (8010fa0 <USB_FlushRxFifo+0x5c>)
 8010f7e:	4293      	cmp	r3, r2
 8010f80:	d901      	bls.n	8010f86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8010f82:	2303      	movs	r3, #3
 8010f84:	e006      	b.n	8010f94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	691b      	ldr	r3, [r3, #16]
 8010f8a:	f003 0310 	and.w	r3, r3, #16
 8010f8e:	2b10      	cmp	r3, #16
 8010f90:	d0f0      	beq.n	8010f74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8010f92:	2300      	movs	r3, #0
}
 8010f94:	4618      	mov	r0, r3
 8010f96:	3714      	adds	r7, #20
 8010f98:	46bd      	mov	sp, r7
 8010f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f9e:	4770      	bx	lr
 8010fa0:	00030d40 	.word	0x00030d40

08010fa4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8010fa4:	b480      	push	{r7}
 8010fa6:	b085      	sub	sp, #20
 8010fa8:	af00      	add	r7, sp, #0
 8010faa:	6078      	str	r0, [r7, #4]
 8010fac:	460b      	mov	r3, r1
 8010fae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fb0:	687b      	ldr	r3, [r7, #4]
 8010fb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8010fb4:	68fb      	ldr	r3, [r7, #12]
 8010fb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010fba:	681a      	ldr	r2, [r3, #0]
 8010fbc:	78fb      	ldrb	r3, [r7, #3]
 8010fbe:	68f9      	ldr	r1, [r7, #12]
 8010fc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010fc4:	4313      	orrs	r3, r2
 8010fc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8010fc8:	2300      	movs	r3, #0
}
 8010fca:	4618      	mov	r0, r3
 8010fcc:	3714      	adds	r7, #20
 8010fce:	46bd      	mov	sp, r7
 8010fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fd4:	4770      	bx	lr

08010fd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8010fd6:	b480      	push	{r7}
 8010fd8:	b085      	sub	sp, #20
 8010fda:	af00      	add	r7, sp, #0
 8010fdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010fde:	687b      	ldr	r3, [r7, #4]
 8010fe0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8010fe8:	681b      	ldr	r3, [r3, #0]
 8010fea:	68fa      	ldr	r2, [r7, #12]
 8010fec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010ff0:	f023 0303 	bic.w	r3, r3, #3
 8010ff4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010ffc:	685b      	ldr	r3, [r3, #4]
 8010ffe:	68fa      	ldr	r2, [r7, #12]
 8011000:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8011004:	f043 0302 	orr.w	r3, r3, #2
 8011008:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801100a:	2300      	movs	r3, #0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3714      	adds	r7, #20
 8011010:	46bd      	mov	sp, r7
 8011012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011016:	4770      	bx	lr

08011018 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8011018:	b480      	push	{r7}
 801101a:	b083      	sub	sp, #12
 801101c:	af00      	add	r7, sp, #0
 801101e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8011020:	687b      	ldr	r3, [r7, #4]
 8011022:	695b      	ldr	r3, [r3, #20]
 8011024:	f003 0301 	and.w	r3, r3, #1
}
 8011028:	4618      	mov	r0, r3
 801102a:	370c      	adds	r7, #12
 801102c:	46bd      	mov	sp, r7
 801102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011032:	4770      	bx	lr

08011034 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8011034:	b480      	push	{r7}
 8011036:	b085      	sub	sp, #20
 8011038:	af00      	add	r7, sp, #0
 801103a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801103c:	2300      	movs	r3, #0
 801103e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	3301      	adds	r3, #1
 8011044:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011046:	68fb      	ldr	r3, [r7, #12]
 8011048:	4a13      	ldr	r2, [pc, #76]	; (8011098 <USB_CoreReset+0x64>)
 801104a:	4293      	cmp	r3, r2
 801104c:	d901      	bls.n	8011052 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801104e:	2303      	movs	r3, #3
 8011050:	e01b      	b.n	801108a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8011052:	687b      	ldr	r3, [r7, #4]
 8011054:	691b      	ldr	r3, [r3, #16]
 8011056:	2b00      	cmp	r3, #0
 8011058:	daf2      	bge.n	8011040 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801105a:	2300      	movs	r3, #0
 801105c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	691b      	ldr	r3, [r3, #16]
 8011062:	f043 0201 	orr.w	r2, r3, #1
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	3301      	adds	r3, #1
 801106e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	4a09      	ldr	r2, [pc, #36]	; (8011098 <USB_CoreReset+0x64>)
 8011074:	4293      	cmp	r3, r2
 8011076:	d901      	bls.n	801107c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8011078:	2303      	movs	r3, #3
 801107a:	e006      	b.n	801108a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	691b      	ldr	r3, [r3, #16]
 8011080:	f003 0301 	and.w	r3, r3, #1
 8011084:	2b01      	cmp	r3, #1
 8011086:	d0f0      	beq.n	801106a <USB_CoreReset+0x36>

  return HAL_OK;
 8011088:	2300      	movs	r3, #0
}
 801108a:	4618      	mov	r0, r3
 801108c:	3714      	adds	r7, #20
 801108e:	46bd      	mov	sp, r7
 8011090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011094:	4770      	bx	lr
 8011096:	bf00      	nop
 8011098:	00030d40 	.word	0x00030d40

0801109c <_ZNSaIcEC1Ev>:
 801109c:	4770      	bx	lr

0801109e <_ZNSaIcED1Ev>:
 801109e:	4770      	bx	lr

080110a0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80110a0:	b10a      	cbz	r2, 80110a6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80110a2:	f000 bb3b 	b.w	801171c <memcpy>
 80110a6:	4770      	bx	lr

080110a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80110a8:	b508      	push	{r3, lr}
 80110aa:	680b      	ldr	r3, [r1, #0]
 80110ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110b0:	d302      	bcc.n	80110b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80110b2:	480d      	ldr	r0, [pc, #52]	; (80110e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80110b4:	f000 fa6a 	bl	801158c <_ZSt20__throw_length_errorPKc>
 80110b8:	4293      	cmp	r3, r2
 80110ba:	d90b      	bls.n	80110d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80110bc:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80110c0:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80110c4:	d206      	bcs.n	80110d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80110c6:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80110ca:	bf2a      	itet	cs
 80110cc:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80110d0:	6008      	strcc	r0, [r1, #0]
 80110d2:	600b      	strcs	r3, [r1, #0]
 80110d4:	6808      	ldr	r0, [r1, #0]
 80110d6:	3001      	adds	r0, #1
 80110d8:	d501      	bpl.n	80110de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80110da:	f000 fa51 	bl	8011580 <_ZSt17__throw_bad_allocv>
 80110de:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80110e2:	f000 ba3c 	b.w	801155e <_Znwj>
 80110e6:	bf00      	nop
 80110e8:	08012c08 	.word	0x08012c08

080110ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80110ec:	f850 3b08 	ldr.w	r3, [r0], #8
 80110f0:	4283      	cmp	r3, r0
 80110f2:	d002      	beq.n	80110fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 80110f4:	4618      	mov	r0, r3
 80110f6:	f000 ba30 	b.w	801155a <_ZdlPv>
 80110fa:	4770      	bx	lr

080110fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 80110fc:	6840      	ldr	r0, [r0, #4]
 80110fe:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8011102:	3901      	subs	r1, #1
 8011104:	1a09      	subs	r1, r1, r0
 8011106:	4291      	cmp	r1, r2
 8011108:	b508      	push	{r3, lr}
 801110a:	d202      	bcs.n	8011112 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 801110c:	4618      	mov	r0, r3
 801110e:	f000 fa3d 	bl	801158c <_ZSt20__throw_length_errorPKc>
 8011112:	bd08      	pop	{r3, pc}

08011114 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8011114:	6803      	ldr	r3, [r0, #0]
 8011116:	428b      	cmp	r3, r1
 8011118:	d806      	bhi.n	8011128 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 801111a:	6840      	ldr	r0, [r0, #4]
 801111c:	4418      	add	r0, r3
 801111e:	4281      	cmp	r1, r0
 8011120:	bf94      	ite	ls
 8011122:	2000      	movls	r0, #0
 8011124:	2001      	movhi	r0, #1
 8011126:	4770      	bx	lr
 8011128:	2001      	movs	r0, #1
 801112a:	4770      	bx	lr

0801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 801112c:	2a01      	cmp	r2, #1
 801112e:	b410      	push	{r4}
 8011130:	d104      	bne.n	801113c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 8011132:	780a      	ldrb	r2, [r1, #0]
 8011134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011138:	7002      	strb	r2, [r0, #0]
 801113a:	4770      	bx	lr
 801113c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011140:	f7ff bfae 	b.w	80110a0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8011144:	2a01      	cmp	r2, #1
 8011146:	b430      	push	{r4, r5}
 8011148:	d103      	bne.n	8011152 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 801114a:	780b      	ldrb	r3, [r1, #0]
 801114c:	7003      	strb	r3, [r0, #0]
 801114e:	bc30      	pop	{r4, r5}
 8011150:	4770      	bx	lr
 8011152:	2a00      	cmp	r2, #0
 8011154:	d0fb      	beq.n	801114e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8011156:	bc30      	pop	{r4, r5}
 8011158:	f000 baee 	b.w	8011738 <memmove>

0801115c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 801115c:	460b      	mov	r3, r1
 801115e:	2b01      	cmp	r3, #1
 8011160:	b410      	push	{r4}
 8011162:	4611      	mov	r1, r2
 8011164:	4604      	mov	r4, r0
 8011166:	d103      	bne.n	8011170 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 8011168:	7022      	strb	r2, [r4, #0]
 801116a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801116e:	4770      	bx	lr
 8011170:	2b00      	cmp	r3, #0
 8011172:	d0fa      	beq.n	801116a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 8011174:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011178:	461a      	mov	r2, r3
 801117a:	f000 baf7 	b.w	801176c <memset>

0801117e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 801117e:	b508      	push	{r3, lr}
 8011180:	1a52      	subs	r2, r2, r1
 8011182:	f7ff ffd3 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011186:	bd08      	pop	{r3, pc}

08011188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8011188:	b508      	push	{r3, lr}
 801118a:	1a52      	subs	r2, r2, r1
 801118c:	f7ff ffce 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011190:	bd08      	pop	{r3, pc}

08011192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>:
 8011192:	4288      	cmp	r0, r1
 8011194:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011196:	4604      	mov	r4, r0
 8011198:	460e      	mov	r6, r1
 801119a:	d01e      	beq.n	80111da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x48>
 801119c:	4603      	mov	r3, r0
 801119e:	684d      	ldr	r5, [r1, #4]
 80111a0:	f853 2b08 	ldr.w	r2, [r3], #8
 80111a4:	429a      	cmp	r2, r3
 80111a6:	bf14      	ite	ne
 80111a8:	6882      	ldrne	r2, [r0, #8]
 80111aa:	220f      	moveq	r2, #15
 80111ac:	42aa      	cmp	r2, r5
 80111ae:	d20a      	bcs.n	80111c6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x34>
 80111b0:	a901      	add	r1, sp, #4
 80111b2:	9501      	str	r5, [sp, #4]
 80111b4:	f7ff ff78 	bl	80110a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80111b8:	4607      	mov	r7, r0
 80111ba:	4620      	mov	r0, r4
 80111bc:	f7ff ff96 	bl	80110ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80111c0:	9b01      	ldr	r3, [sp, #4]
 80111c2:	6027      	str	r7, [r4, #0]
 80111c4:	60a3      	str	r3, [r4, #8]
 80111c6:	b125      	cbz	r5, 80111d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_+0x40>
 80111c8:	6831      	ldr	r1, [r6, #0]
 80111ca:	6820      	ldr	r0, [r4, #0]
 80111cc:	462a      	mov	r2, r5
 80111ce:	f7ff ffad 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80111d2:	6823      	ldr	r3, [r4, #0]
 80111d4:	6065      	str	r5, [r4, #4]
 80111d6:	2200      	movs	r2, #0
 80111d8:	555a      	strb	r2, [r3, r5]
 80111da:	b003      	add	sp, #12
 80111dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080111de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80111de:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80111e2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80111e4:	461f      	mov	r7, r3
 80111e6:	6843      	ldr	r3, [r0, #4]
 80111e8:	eb01 0802 	add.w	r8, r1, r2
 80111ec:	1ab2      	subs	r2, r6, r2
 80111ee:	441a      	add	r2, r3
 80111f0:	eba3 0908 	sub.w	r9, r3, r8
 80111f4:	4603      	mov	r3, r0
 80111f6:	9201      	str	r2, [sp, #4]
 80111f8:	f853 2b08 	ldr.w	r2, [r3], #8
 80111fc:	429a      	cmp	r2, r3
 80111fe:	bf18      	it	ne
 8011200:	6882      	ldrne	r2, [r0, #8]
 8011202:	460d      	mov	r5, r1
 8011204:	bf08      	it	eq
 8011206:	220f      	moveq	r2, #15
 8011208:	a901      	add	r1, sp, #4
 801120a:	4604      	mov	r4, r0
 801120c:	f7ff ff4c 	bl	80110a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8011210:	4682      	mov	sl, r0
 8011212:	b11d      	cbz	r5, 801121c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 8011214:	6821      	ldr	r1, [r4, #0]
 8011216:	462a      	mov	r2, r5
 8011218:	f7ff ff88 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801121c:	b137      	cbz	r7, 801122c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 801121e:	b12e      	cbz	r6, 801122c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 8011220:	4632      	mov	r2, r6
 8011222:	4639      	mov	r1, r7
 8011224:	eb0a 0005 	add.w	r0, sl, r5
 8011228:	f7ff ff80 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 801122c:	f1b9 0f00 	cmp.w	r9, #0
 8011230:	d007      	beq.n	8011242 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 8011232:	6821      	ldr	r1, [r4, #0]
 8011234:	4435      	add	r5, r6
 8011236:	464a      	mov	r2, r9
 8011238:	4441      	add	r1, r8
 801123a:	eb0a 0005 	add.w	r0, sl, r5
 801123e:	f7ff ff75 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011242:	4620      	mov	r0, r4
 8011244:	f7ff ff52 	bl	80110ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8011248:	9b01      	ldr	r3, [sp, #4]
 801124a:	f8c4 a000 	str.w	sl, [r4]
 801124e:	60a3      	str	r3, [r4, #8]
 8011250:	b002      	add	sp, #8
 8011252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08011256 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011256:	b510      	push	{r4, lr}
 8011258:	4604      	mov	r4, r0
 801125a:	f7ff ff47 	bl	80110ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801125e:	4620      	mov	r0, r4
 8011260:	bd10      	pop	{r4, pc}

08011262 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSERKS4_>:
 8011262:	b510      	push	{r4, lr}
 8011264:	4604      	mov	r4, r0
 8011266:	f7ff ff94 	bl	8011192 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_assignERKS4_>
 801126a:	4620      	mov	r0, r4
 801126c:	bd10      	pop	{r4, pc}

0801126e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 801126e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011270:	460d      	mov	r5, r1
 8011272:	f851 3b08 	ldr.w	r3, [r1], #8
 8011276:	686a      	ldr	r2, [r5, #4]
 8011278:	4299      	cmp	r1, r3
 801127a:	4604      	mov	r4, r0
 801127c:	6800      	ldr	r0, [r0, #0]
 801127e:	d10d      	bne.n	801129c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 8011280:	b10a      	cbz	r2, 8011286 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x18>
 8011282:	f7ff ff53 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011286:	686b      	ldr	r3, [r5, #4]
 8011288:	6822      	ldr	r2, [r4, #0]
 801128a:	6063      	str	r3, [r4, #4]
 801128c:	2100      	movs	r1, #0
 801128e:	54d1      	strb	r1, [r2, r3]
 8011290:	682a      	ldr	r2, [r5, #0]
 8011292:	2300      	movs	r3, #0
 8011294:	606b      	str	r3, [r5, #4]
 8011296:	7013      	strb	r3, [r2, #0]
 8011298:	4620      	mov	r0, r4
 801129a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801129c:	e9c4 3200 	strd	r3, r2, [r4]
 80112a0:	f104 0708 	add.w	r7, r4, #8
 80112a4:	42b8      	cmp	r0, r7
 80112a6:	68ab      	ldr	r3, [r5, #8]
 80112a8:	bf18      	it	ne
 80112aa:	68a6      	ldrne	r6, [r4, #8]
 80112ac:	60a3      	str	r3, [r4, #8]
 80112ae:	bf08      	it	eq
 80112b0:	2000      	moveq	r0, #0
 80112b2:	b110      	cbz	r0, 80112ba <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x4c>
 80112b4:	6028      	str	r0, [r5, #0]
 80112b6:	60ae      	str	r6, [r5, #8]
 80112b8:	e7ea      	b.n	8011290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>
 80112ba:	6029      	str	r1, [r5, #0]
 80112bc:	e7e8      	b.n	8011290 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x22>

080112be <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 80112be:	6840      	ldr	r0, [r0, #4]
 80112c0:	4770      	bx	lr

080112c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 80112c2:	6800      	ldr	r0, [r0, #0]
 80112c4:	4408      	add	r0, r1
 80112c6:	4770      	bx	lr

080112c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>:
 80112c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80112cc:	4616      	mov	r6, r2
 80112ce:	461d      	mov	r5, r3
 80112d0:	4604      	mov	r4, r0
 80112d2:	4b1c      	ldr	r3, [pc, #112]	; (8011344 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x7c>)
 80112d4:	462a      	mov	r2, r5
 80112d6:	460f      	mov	r7, r1
 80112d8:	4631      	mov	r1, r6
 80112da:	f7ff ff0f 	bl	80110fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80112de:	4623      	mov	r3, r4
 80112e0:	6862      	ldr	r2, [r4, #4]
 80112e2:	f853 0b08 	ldr.w	r0, [r3], #8
 80112e6:	4298      	cmp	r0, r3
 80112e8:	bf18      	it	ne
 80112ea:	68a3      	ldrne	r3, [r4, #8]
 80112ec:	eba5 0806 	sub.w	r8, r5, r6
 80112f0:	4490      	add	r8, r2
 80112f2:	bf08      	it	eq
 80112f4:	230f      	moveq	r3, #15
 80112f6:	4543      	cmp	r3, r8
 80112f8:	d31b      	bcc.n	8011332 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x6a>
 80112fa:	19f3      	adds	r3, r6, r7
 80112fc:	1ad2      	subs	r2, r2, r3
 80112fe:	d006      	beq.n	801130e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8011300:	42ae      	cmp	r6, r5
 8011302:	d004      	beq.n	801130e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8011304:	4438      	add	r0, r7
 8011306:	1981      	adds	r1, r0, r6
 8011308:	4428      	add	r0, r5
 801130a:	f7ff ff1b 	bl	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801130e:	b135      	cbz	r5, 801131e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x56>
 8011310:	6820      	ldr	r0, [r4, #0]
 8011312:	f89d 2020 	ldrb.w	r2, [sp, #32]
 8011316:	4629      	mov	r1, r5
 8011318:	4438      	add	r0, r7
 801131a:	f7ff ff1f 	bl	801115c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 801131e:	6823      	ldr	r3, [r4, #0]
 8011320:	f8c4 8004 	str.w	r8, [r4, #4]
 8011324:	2200      	movs	r2, #0
 8011326:	4620      	mov	r0, r4
 8011328:	f803 2008 	strb.w	r2, [r3, r8]
 801132c:	b002      	add	sp, #8
 801132e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011332:	9500      	str	r5, [sp, #0]
 8011334:	2300      	movs	r3, #0
 8011336:	4632      	mov	r2, r6
 8011338:	4639      	mov	r1, r7
 801133a:	4620      	mov	r0, r4
 801133c:	f7ff ff4f 	bl	80111de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011340:	e7e5      	b.n	801130e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc+0x46>
 8011342:	bf00      	nop
 8011344:	08012c20 	.word	0x08012c20

08011348 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEjc>:
 8011348:	b507      	push	{r0, r1, r2, lr}
 801134a:	9200      	str	r2, [sp, #0]
 801134c:	460b      	mov	r3, r1
 801134e:	2200      	movs	r2, #0
 8011350:	6841      	ldr	r1, [r0, #4]
 8011352:	f7ff ffb9 	bl	80112c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE14_M_replace_auxEjjjc>
 8011356:	b003      	add	sp, #12
 8011358:	f85d fb04 	ldr.w	pc, [sp], #4

0801135c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 801135c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011360:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8011362:	4614      	mov	r4, r2
 8011364:	4680      	mov	r8, r0
 8011366:	462a      	mov	r2, r5
 8011368:	4689      	mov	r9, r1
 801136a:	461f      	mov	r7, r3
 801136c:	4621      	mov	r1, r4
 801136e:	4b39      	ldr	r3, [pc, #228]	; (8011454 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 8011370:	f7ff fec4 	bl	80110fc <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 8011374:	4642      	mov	r2, r8
 8011376:	f8d8 3004 	ldr.w	r3, [r8, #4]
 801137a:	f852 6b08 	ldr.w	r6, [r2], #8
 801137e:	4296      	cmp	r6, r2
 8011380:	bf18      	it	ne
 8011382:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 8011386:	eba5 0b04 	sub.w	fp, r5, r4
 801138a:	eb03 0a0b 	add.w	sl, r3, fp
 801138e:	bf08      	it	eq
 8011390:	220f      	moveq	r2, #15
 8011392:	4552      	cmp	r2, sl
 8011394:	d351      	bcc.n	801143a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 8011396:	444e      	add	r6, r9
 8011398:	4639      	mov	r1, r7
 801139a:	44a1      	add	r9, r4
 801139c:	4640      	mov	r0, r8
 801139e:	eba3 0909 	sub.w	r9, r3, r9
 80113a2:	f7ff feb7 	bl	8011114 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80113a6:	b180      	cbz	r0, 80113ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80113a8:	f1b9 0f00 	cmp.w	r9, #0
 80113ac:	d006      	beq.n	80113bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80113ae:	42ac      	cmp	r4, r5
 80113b0:	d004      	beq.n	80113bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80113b2:	464a      	mov	r2, r9
 80113b4:	1931      	adds	r1, r6, r4
 80113b6:	1970      	adds	r0, r6, r5
 80113b8:	f7ff fec4 	bl	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80113bc:	b315      	cbz	r5, 8011404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80113be:	462a      	mov	r2, r5
 80113c0:	4639      	mov	r1, r7
 80113c2:	4630      	mov	r0, r6
 80113c4:	f7ff feb2 	bl	801112c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80113c8:	e01c      	b.n	8011404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80113ca:	b135      	cbz	r5, 80113da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80113cc:	42ac      	cmp	r4, r5
 80113ce:	d33c      	bcc.n	801144a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 80113d0:	462a      	mov	r2, r5
 80113d2:	4639      	mov	r1, r7
 80113d4:	4630      	mov	r0, r6
 80113d6:	f7ff feb5 	bl	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80113da:	f1b9 0f00 	cmp.w	r9, #0
 80113de:	d011      	beq.n	8011404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80113e0:	42ac      	cmp	r4, r5
 80113e2:	d00f      	beq.n	8011404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80113e4:	464a      	mov	r2, r9
 80113e6:	1931      	adds	r1, r6, r4
 80113e8:	1970      	adds	r0, r6, r5
 80113ea:	f7ff feab 	bl	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80113ee:	42ac      	cmp	r4, r5
 80113f0:	d208      	bcs.n	8011404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80113f2:	4434      	add	r4, r6
 80113f4:	197b      	adds	r3, r7, r5
 80113f6:	429c      	cmp	r4, r3
 80113f8:	d30f      	bcc.n	801141a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 80113fa:	462a      	mov	r2, r5
 80113fc:	4639      	mov	r1, r7
 80113fe:	4630      	mov	r0, r6
 8011400:	f7ff fea0 	bl	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011404:	f8d8 3000 	ldr.w	r3, [r8]
 8011408:	f8c8 a004 	str.w	sl, [r8, #4]
 801140c:	2200      	movs	r2, #0
 801140e:	4640      	mov	r0, r8
 8011410:	f803 200a 	strb.w	r2, [r3, sl]
 8011414:	b003      	add	sp, #12
 8011416:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801141a:	42bc      	cmp	r4, r7
 801141c:	d803      	bhi.n	8011426 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 801141e:	462a      	mov	r2, r5
 8011420:	eb07 010b 	add.w	r1, r7, fp
 8011424:	e7cd      	b.n	80113c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8011426:	1be4      	subs	r4, r4, r7
 8011428:	4622      	mov	r2, r4
 801142a:	4639      	mov	r1, r7
 801142c:	4630      	mov	r0, r6
 801142e:	f7ff fe89 	bl	8011144 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011432:	1b2a      	subs	r2, r5, r4
 8011434:	1971      	adds	r1, r6, r5
 8011436:	1930      	adds	r0, r6, r4
 8011438:	e7c4      	b.n	80113c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 801143a:	9500      	str	r5, [sp, #0]
 801143c:	463b      	mov	r3, r7
 801143e:	4622      	mov	r2, r4
 8011440:	4649      	mov	r1, r9
 8011442:	4640      	mov	r0, r8
 8011444:	f7ff fecb 	bl	80111de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011448:	e7dc      	b.n	8011404 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801144a:	f1b9 0f00 	cmp.w	r9, #0
 801144e:	d0d0      	beq.n	80113f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 8011450:	e7c8      	b.n	80113e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 8011452:	bf00      	nop
 8011454:	08012c3d 	.word	0x08012c3d

08011458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8011458:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801145a:	4604      	mov	r4, r0
 801145c:	4608      	mov	r0, r1
 801145e:	9103      	str	r1, [sp, #12]
 8011460:	f7ee ff8e 	bl	8000380 <strlen>
 8011464:	9b03      	ldr	r3, [sp, #12]
 8011466:	9000      	str	r0, [sp, #0]
 8011468:	6862      	ldr	r2, [r4, #4]
 801146a:	2100      	movs	r1, #0
 801146c:	4620      	mov	r0, r4
 801146e:	f7ff ff75 	bl	801135c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8011472:	b004      	add	sp, #16
 8011474:	bd10      	pop	{r4, pc}

08011476 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8011476:	b508      	push	{r3, lr}
 8011478:	f7ff ffee 	bl	8011458 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 801147c:	bd08      	pop	{r3, pc}
	...

08011480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8011480:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8011482:	4604      	mov	r4, r0
 8011484:	4616      	mov	r6, r2
 8011486:	460d      	mov	r5, r1
 8011488:	b919      	cbnz	r1, 8011492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 801148a:	b112      	cbz	r2, 8011492 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 801148c:	480d      	ldr	r0, [pc, #52]	; (80114c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 801148e:	f000 f87a 	bl	8011586 <_ZSt19__throw_logic_errorPKc>
 8011492:	1b73      	subs	r3, r6, r5
 8011494:	2b0f      	cmp	r3, #15
 8011496:	9301      	str	r3, [sp, #4]
 8011498:	d907      	bls.n	80114aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 801149a:	2200      	movs	r2, #0
 801149c:	a901      	add	r1, sp, #4
 801149e:	4620      	mov	r0, r4
 80114a0:	f7ff fe02 	bl	80110a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80114a4:	9b01      	ldr	r3, [sp, #4]
 80114a6:	6020      	str	r0, [r4, #0]
 80114a8:	60a3      	str	r3, [r4, #8]
 80114aa:	4632      	mov	r2, r6
 80114ac:	4629      	mov	r1, r5
 80114ae:	6820      	ldr	r0, [r4, #0]
 80114b0:	f7ff fe65 	bl	801117e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80114b4:	9b01      	ldr	r3, [sp, #4]
 80114b6:	6822      	ldr	r2, [r4, #0]
 80114b8:	6063      	str	r3, [r4, #4]
 80114ba:	2100      	movs	r1, #0
 80114bc:	54d1      	strb	r1, [r2, r3]
 80114be:	b002      	add	sp, #8
 80114c0:	bd70      	pop	{r4, r5, r6, pc}
 80114c2:	bf00      	nop
 80114c4:	08012c56 	.word	0x08012c56

080114c8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80114c8:	b538      	push	{r3, r4, r5, lr}
 80114ca:	f100 0308 	add.w	r3, r0, #8
 80114ce:	6003      	str	r3, [r0, #0]
 80114d0:	e9d1 5200 	ldrd	r5, r2, [r1]
 80114d4:	4604      	mov	r4, r0
 80114d6:	f04f 0300 	mov.w	r3, #0
 80114da:	442a      	add	r2, r5
 80114dc:	4629      	mov	r1, r5
 80114de:	f7ff ffcf 	bl	8011480 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80114e2:	4620      	mov	r0, r4
 80114e4:	bd38      	pop	{r3, r4, r5, pc}
	...

080114e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80114e8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80114ea:	4604      	mov	r4, r0
 80114ec:	4616      	mov	r6, r2
 80114ee:	460d      	mov	r5, r1
 80114f0:	b919      	cbnz	r1, 80114fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80114f2:	b112      	cbz	r2, 80114fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80114f4:	480d      	ldr	r0, [pc, #52]	; (801152c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80114f6:	f000 f846 	bl	8011586 <_ZSt19__throw_logic_errorPKc>
 80114fa:	1b73      	subs	r3, r6, r5
 80114fc:	2b0f      	cmp	r3, #15
 80114fe:	9301      	str	r3, [sp, #4]
 8011500:	d907      	bls.n	8011512 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 8011502:	2200      	movs	r2, #0
 8011504:	a901      	add	r1, sp, #4
 8011506:	4620      	mov	r0, r4
 8011508:	f7ff fdce 	bl	80110a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 801150c:	9b01      	ldr	r3, [sp, #4]
 801150e:	6020      	str	r0, [r4, #0]
 8011510:	60a3      	str	r3, [r4, #8]
 8011512:	4632      	mov	r2, r6
 8011514:	4629      	mov	r1, r5
 8011516:	6820      	ldr	r0, [r4, #0]
 8011518:	f7ff fe36 	bl	8011188 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801151c:	9b01      	ldr	r3, [sp, #4]
 801151e:	6822      	ldr	r2, [r4, #0]
 8011520:	6063      	str	r3, [r4, #4]
 8011522:	2100      	movs	r1, #0
 8011524:	54d1      	strb	r1, [r2, r3]
 8011526:	b002      	add	sp, #8
 8011528:	bd70      	pop	{r4, r5, r6, pc}
 801152a:	bf00      	nop
 801152c:	08012c56 	.word	0x08012c56

08011530 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8011530:	b538      	push	{r3, r4, r5, lr}
 8011532:	f100 0308 	add.w	r3, r0, #8
 8011536:	4604      	mov	r4, r0
 8011538:	6003      	str	r3, [r0, #0]
 801153a:	460d      	mov	r5, r1
 801153c:	b159      	cbz	r1, 8011556 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801153e:	4608      	mov	r0, r1
 8011540:	f7ee ff1e 	bl	8000380 <strlen>
 8011544:	182a      	adds	r2, r5, r0
 8011546:	4620      	mov	r0, r4
 8011548:	f04f 0300 	mov.w	r3, #0
 801154c:	4629      	mov	r1, r5
 801154e:	f7ff ffcb 	bl	80114e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8011552:	4620      	mov	r0, r4
 8011554:	bd38      	pop	{r3, r4, r5, pc}
 8011556:	2201      	movs	r2, #1
 8011558:	e7f5      	b.n	8011546 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0801155a <_ZdlPv>:
 801155a:	f000 b8d7 	b.w	801170c <free>

0801155e <_Znwj>:
 801155e:	2801      	cmp	r0, #1
 8011560:	bf38      	it	cc
 8011562:	2001      	movcc	r0, #1
 8011564:	b510      	push	{r4, lr}
 8011566:	4604      	mov	r4, r0
 8011568:	4620      	mov	r0, r4
 801156a:	f000 f8c7 	bl	80116fc <malloc>
 801156e:	b930      	cbnz	r0, 801157e <_Znwj+0x20>
 8011570:	f000 f810 	bl	8011594 <_ZSt15get_new_handlerv>
 8011574:	b908      	cbnz	r0, 801157a <_Znwj+0x1c>
 8011576:	f000 f88f 	bl	8011698 <abort>
 801157a:	4780      	blx	r0
 801157c:	e7f4      	b.n	8011568 <_Znwj+0xa>
 801157e:	bd10      	pop	{r4, pc}

08011580 <_ZSt17__throw_bad_allocv>:
 8011580:	b508      	push	{r3, lr}
 8011582:	f000 f889 	bl	8011698 <abort>

08011586 <_ZSt19__throw_logic_errorPKc>:
 8011586:	b508      	push	{r3, lr}
 8011588:	f000 f886 	bl	8011698 <abort>

0801158c <_ZSt20__throw_length_errorPKc>:
 801158c:	b508      	push	{r3, lr}
 801158e:	f000 f883 	bl	8011698 <abort>
	...

08011594 <_ZSt15get_new_handlerv>:
 8011594:	4b02      	ldr	r3, [pc, #8]	; (80115a0 <_ZSt15get_new_handlerv+0xc>)
 8011596:	6818      	ldr	r0, [r3, #0]
 8011598:	f3bf 8f5b 	dmb	ish
 801159c:	4770      	bx	lr
 801159e:	bf00      	nop
 80115a0:	240014c8 	.word	0x240014c8
 80115a4:	00000000 	.word	0x00000000

080115a8 <ceil>:
 80115a8:	ee10 1a90 	vmov	r1, s1
 80115ac:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80115b0:	f2a2 33ff 	subw	r3, r2, #1023	; 0x3ff
 80115b4:	2b13      	cmp	r3, #19
 80115b6:	b530      	push	{r4, r5, lr}
 80115b8:	ee10 0a10 	vmov	r0, s0
 80115bc:	ee10 5a10 	vmov	r5, s0
 80115c0:	dc2f      	bgt.n	8011622 <ceil+0x7a>
 80115c2:	2b00      	cmp	r3, #0
 80115c4:	da13      	bge.n	80115ee <ceil+0x46>
 80115c6:	ed9f 7b30 	vldr	d7, [pc, #192]	; 8011688 <ceil+0xe0>
 80115ca:	ee30 0b07 	vadd.f64	d0, d0, d7
 80115ce:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80115d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80115d6:	dd05      	ble.n	80115e4 <ceil+0x3c>
 80115d8:	2900      	cmp	r1, #0
 80115da:	db4c      	blt.n	8011676 <ceil+0xce>
 80115dc:	4301      	orrs	r1, r0
 80115de:	d04e      	beq.n	801167e <ceil+0xd6>
 80115e0:	492b      	ldr	r1, [pc, #172]	; (8011690 <ceil+0xe8>)
 80115e2:	2000      	movs	r0, #0
 80115e4:	460b      	mov	r3, r1
 80115e6:	4602      	mov	r2, r0
 80115e8:	ec43 2b10 	vmov	d0, r2, r3
 80115ec:	e020      	b.n	8011630 <ceil+0x88>
 80115ee:	4a29      	ldr	r2, [pc, #164]	; (8011694 <ceil+0xec>)
 80115f0:	411a      	asrs	r2, r3
 80115f2:	ea01 0402 	and.w	r4, r1, r2
 80115f6:	4304      	orrs	r4, r0
 80115f8:	d01a      	beq.n	8011630 <ceil+0x88>
 80115fa:	ed9f 7b23 	vldr	d7, [pc, #140]	; 8011688 <ceil+0xe0>
 80115fe:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011602:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8011606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801160a:	ddeb      	ble.n	80115e4 <ceil+0x3c>
 801160c:	2900      	cmp	r1, #0
 801160e:	bfc2      	ittt	gt
 8011610:	f44f 1080 	movgt.w	r0, #1048576	; 0x100000
 8011614:	fa40 f303 	asrgt.w	r3, r0, r3
 8011618:	18c9      	addgt	r1, r1, r3
 801161a:	ea21 0102 	bic.w	r1, r1, r2
 801161e:	2000      	movs	r0, #0
 8011620:	e7e0      	b.n	80115e4 <ceil+0x3c>
 8011622:	2b33      	cmp	r3, #51	; 0x33
 8011624:	dd05      	ble.n	8011632 <ceil+0x8a>
 8011626:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 801162a:	d101      	bne.n	8011630 <ceil+0x88>
 801162c:	ee30 0b00 	vadd.f64	d0, d0, d0
 8011630:	bd30      	pop	{r4, r5, pc}
 8011632:	f2a2 4413 	subw	r4, r2, #1043	; 0x413
 8011636:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801163a:	40e2      	lsrs	r2, r4
 801163c:	4202      	tst	r2, r0
 801163e:	d0f7      	beq.n	8011630 <ceil+0x88>
 8011640:	ed9f 7b11 	vldr	d7, [pc, #68]	; 8011688 <ceil+0xe0>
 8011644:	ee30 0b07 	vadd.f64	d0, d0, d7
 8011648:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801164c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011650:	ddc8      	ble.n	80115e4 <ceil+0x3c>
 8011652:	2900      	cmp	r1, #0
 8011654:	dd02      	ble.n	801165c <ceil+0xb4>
 8011656:	2b14      	cmp	r3, #20
 8011658:	d103      	bne.n	8011662 <ceil+0xba>
 801165a:	3101      	adds	r1, #1
 801165c:	ea20 0002 	bic.w	r0, r0, r2
 8011660:	e7c0      	b.n	80115e4 <ceil+0x3c>
 8011662:	2401      	movs	r4, #1
 8011664:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8011668:	fa04 f303 	lsl.w	r3, r4, r3
 801166c:	4418      	add	r0, r3
 801166e:	42a8      	cmp	r0, r5
 8011670:	bf38      	it	cc
 8011672:	1909      	addcc	r1, r1, r4
 8011674:	e7f2      	b.n	801165c <ceil+0xb4>
 8011676:	2000      	movs	r0, #0
 8011678:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 801167c:	e7b2      	b.n	80115e4 <ceil+0x3c>
 801167e:	4608      	mov	r0, r1
 8011680:	e7b0      	b.n	80115e4 <ceil+0x3c>
 8011682:	bf00      	nop
 8011684:	f3af 8000 	nop.w
 8011688:	8800759c 	.word	0x8800759c
 801168c:	7e37e43c 	.word	0x7e37e43c
 8011690:	3ff00000 	.word	0x3ff00000
 8011694:	000fffff 	.word	0x000fffff

08011698 <abort>:
 8011698:	b508      	push	{r3, lr}
 801169a:	2006      	movs	r0, #6
 801169c:	f000 fa14 	bl	8011ac8 <raise>
 80116a0:	2001      	movs	r0, #1
 80116a2:	f7f5 f981 	bl	80069a8 <_exit>
	...

080116a8 <__errno>:
 80116a8:	4b01      	ldr	r3, [pc, #4]	; (80116b0 <__errno+0x8>)
 80116aa:	6818      	ldr	r0, [r3, #0]
 80116ac:	4770      	bx	lr
 80116ae:	bf00      	nop
 80116b0:	24000028 	.word	0x24000028

080116b4 <__libc_init_array>:
 80116b4:	b570      	push	{r4, r5, r6, lr}
 80116b6:	4d0d      	ldr	r5, [pc, #52]	; (80116ec <__libc_init_array+0x38>)
 80116b8:	4c0d      	ldr	r4, [pc, #52]	; (80116f0 <__libc_init_array+0x3c>)
 80116ba:	1b64      	subs	r4, r4, r5
 80116bc:	10a4      	asrs	r4, r4, #2
 80116be:	2600      	movs	r6, #0
 80116c0:	42a6      	cmp	r6, r4
 80116c2:	d109      	bne.n	80116d8 <__libc_init_array+0x24>
 80116c4:	4d0b      	ldr	r5, [pc, #44]	; (80116f4 <__libc_init_array+0x40>)
 80116c6:	4c0c      	ldr	r4, [pc, #48]	; (80116f8 <__libc_init_array+0x44>)
 80116c8:	f001 f8a0 	bl	801280c <_init>
 80116cc:	1b64      	subs	r4, r4, r5
 80116ce:	10a4      	asrs	r4, r4, #2
 80116d0:	2600      	movs	r6, #0
 80116d2:	42a6      	cmp	r6, r4
 80116d4:	d105      	bne.n	80116e2 <__libc_init_array+0x2e>
 80116d6:	bd70      	pop	{r4, r5, r6, pc}
 80116d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80116dc:	4798      	blx	r3
 80116de:	3601      	adds	r6, #1
 80116e0:	e7ee      	b.n	80116c0 <__libc_init_array+0xc>
 80116e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80116e6:	4798      	blx	r3
 80116e8:	3601      	adds	r6, #1
 80116ea:	e7f2      	b.n	80116d2 <__libc_init_array+0x1e>
 80116ec:	08012d20 	.word	0x08012d20
 80116f0:	08012d20 	.word	0x08012d20
 80116f4:	08012d20 	.word	0x08012d20
 80116f8:	08012d28 	.word	0x08012d28

080116fc <malloc>:
 80116fc:	4b02      	ldr	r3, [pc, #8]	; (8011708 <malloc+0xc>)
 80116fe:	4601      	mov	r1, r0
 8011700:	6818      	ldr	r0, [r3, #0]
 8011702:	f000 b8a7 	b.w	8011854 <_malloc_r>
 8011706:	bf00      	nop
 8011708:	24000028 	.word	0x24000028

0801170c <free>:
 801170c:	4b02      	ldr	r3, [pc, #8]	; (8011718 <free+0xc>)
 801170e:	4601      	mov	r1, r0
 8011710:	6818      	ldr	r0, [r3, #0]
 8011712:	f000 b833 	b.w	801177c <_free_r>
 8011716:	bf00      	nop
 8011718:	24000028 	.word	0x24000028

0801171c <memcpy>:
 801171c:	440a      	add	r2, r1
 801171e:	4291      	cmp	r1, r2
 8011720:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8011724:	d100      	bne.n	8011728 <memcpy+0xc>
 8011726:	4770      	bx	lr
 8011728:	b510      	push	{r4, lr}
 801172a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801172e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011732:	4291      	cmp	r1, r2
 8011734:	d1f9      	bne.n	801172a <memcpy+0xe>
 8011736:	bd10      	pop	{r4, pc}

08011738 <memmove>:
 8011738:	4288      	cmp	r0, r1
 801173a:	b510      	push	{r4, lr}
 801173c:	eb01 0402 	add.w	r4, r1, r2
 8011740:	d902      	bls.n	8011748 <memmove+0x10>
 8011742:	4284      	cmp	r4, r0
 8011744:	4623      	mov	r3, r4
 8011746:	d807      	bhi.n	8011758 <memmove+0x20>
 8011748:	1e43      	subs	r3, r0, #1
 801174a:	42a1      	cmp	r1, r4
 801174c:	d008      	beq.n	8011760 <memmove+0x28>
 801174e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8011752:	f803 2f01 	strb.w	r2, [r3, #1]!
 8011756:	e7f8      	b.n	801174a <memmove+0x12>
 8011758:	4402      	add	r2, r0
 801175a:	4601      	mov	r1, r0
 801175c:	428a      	cmp	r2, r1
 801175e:	d100      	bne.n	8011762 <memmove+0x2a>
 8011760:	bd10      	pop	{r4, pc}
 8011762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8011766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801176a:	e7f7      	b.n	801175c <memmove+0x24>

0801176c <memset>:
 801176c:	4402      	add	r2, r0
 801176e:	4603      	mov	r3, r0
 8011770:	4293      	cmp	r3, r2
 8011772:	d100      	bne.n	8011776 <memset+0xa>
 8011774:	4770      	bx	lr
 8011776:	f803 1b01 	strb.w	r1, [r3], #1
 801177a:	e7f9      	b.n	8011770 <memset+0x4>

0801177c <_free_r>:
 801177c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801177e:	2900      	cmp	r1, #0
 8011780:	d044      	beq.n	801180c <_free_r+0x90>
 8011782:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011786:	9001      	str	r0, [sp, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	f1a1 0404 	sub.w	r4, r1, #4
 801178e:	bfb8      	it	lt
 8011790:	18e4      	addlt	r4, r4, r3
 8011792:	f000 fc95 	bl	80120c0 <__malloc_lock>
 8011796:	4a1e      	ldr	r2, [pc, #120]	; (8011810 <_free_r+0x94>)
 8011798:	9801      	ldr	r0, [sp, #4]
 801179a:	6813      	ldr	r3, [r2, #0]
 801179c:	b933      	cbnz	r3, 80117ac <_free_r+0x30>
 801179e:	6063      	str	r3, [r4, #4]
 80117a0:	6014      	str	r4, [r2, #0]
 80117a2:	b003      	add	sp, #12
 80117a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80117a8:	f000 bc90 	b.w	80120cc <__malloc_unlock>
 80117ac:	42a3      	cmp	r3, r4
 80117ae:	d908      	bls.n	80117c2 <_free_r+0x46>
 80117b0:	6825      	ldr	r5, [r4, #0]
 80117b2:	1961      	adds	r1, r4, r5
 80117b4:	428b      	cmp	r3, r1
 80117b6:	bf01      	itttt	eq
 80117b8:	6819      	ldreq	r1, [r3, #0]
 80117ba:	685b      	ldreq	r3, [r3, #4]
 80117bc:	1949      	addeq	r1, r1, r5
 80117be:	6021      	streq	r1, [r4, #0]
 80117c0:	e7ed      	b.n	801179e <_free_r+0x22>
 80117c2:	461a      	mov	r2, r3
 80117c4:	685b      	ldr	r3, [r3, #4]
 80117c6:	b10b      	cbz	r3, 80117cc <_free_r+0x50>
 80117c8:	42a3      	cmp	r3, r4
 80117ca:	d9fa      	bls.n	80117c2 <_free_r+0x46>
 80117cc:	6811      	ldr	r1, [r2, #0]
 80117ce:	1855      	adds	r5, r2, r1
 80117d0:	42a5      	cmp	r5, r4
 80117d2:	d10b      	bne.n	80117ec <_free_r+0x70>
 80117d4:	6824      	ldr	r4, [r4, #0]
 80117d6:	4421      	add	r1, r4
 80117d8:	1854      	adds	r4, r2, r1
 80117da:	42a3      	cmp	r3, r4
 80117dc:	6011      	str	r1, [r2, #0]
 80117de:	d1e0      	bne.n	80117a2 <_free_r+0x26>
 80117e0:	681c      	ldr	r4, [r3, #0]
 80117e2:	685b      	ldr	r3, [r3, #4]
 80117e4:	6053      	str	r3, [r2, #4]
 80117e6:	4421      	add	r1, r4
 80117e8:	6011      	str	r1, [r2, #0]
 80117ea:	e7da      	b.n	80117a2 <_free_r+0x26>
 80117ec:	d902      	bls.n	80117f4 <_free_r+0x78>
 80117ee:	230c      	movs	r3, #12
 80117f0:	6003      	str	r3, [r0, #0]
 80117f2:	e7d6      	b.n	80117a2 <_free_r+0x26>
 80117f4:	6825      	ldr	r5, [r4, #0]
 80117f6:	1961      	adds	r1, r4, r5
 80117f8:	428b      	cmp	r3, r1
 80117fa:	bf04      	itt	eq
 80117fc:	6819      	ldreq	r1, [r3, #0]
 80117fe:	685b      	ldreq	r3, [r3, #4]
 8011800:	6063      	str	r3, [r4, #4]
 8011802:	bf04      	itt	eq
 8011804:	1949      	addeq	r1, r1, r5
 8011806:	6021      	streq	r1, [r4, #0]
 8011808:	6054      	str	r4, [r2, #4]
 801180a:	e7ca      	b.n	80117a2 <_free_r+0x26>
 801180c:	b003      	add	sp, #12
 801180e:	bd30      	pop	{r4, r5, pc}
 8011810:	240014cc 	.word	0x240014cc

08011814 <sbrk_aligned>:
 8011814:	b570      	push	{r4, r5, r6, lr}
 8011816:	4e0e      	ldr	r6, [pc, #56]	; (8011850 <sbrk_aligned+0x3c>)
 8011818:	460c      	mov	r4, r1
 801181a:	6831      	ldr	r1, [r6, #0]
 801181c:	4605      	mov	r5, r0
 801181e:	b911      	cbnz	r1, 8011826 <sbrk_aligned+0x12>
 8011820:	f000 f91a 	bl	8011a58 <_sbrk_r>
 8011824:	6030      	str	r0, [r6, #0]
 8011826:	4621      	mov	r1, r4
 8011828:	4628      	mov	r0, r5
 801182a:	f000 f915 	bl	8011a58 <_sbrk_r>
 801182e:	1c43      	adds	r3, r0, #1
 8011830:	d00a      	beq.n	8011848 <sbrk_aligned+0x34>
 8011832:	1cc4      	adds	r4, r0, #3
 8011834:	f024 0403 	bic.w	r4, r4, #3
 8011838:	42a0      	cmp	r0, r4
 801183a:	d007      	beq.n	801184c <sbrk_aligned+0x38>
 801183c:	1a21      	subs	r1, r4, r0
 801183e:	4628      	mov	r0, r5
 8011840:	f000 f90a 	bl	8011a58 <_sbrk_r>
 8011844:	3001      	adds	r0, #1
 8011846:	d101      	bne.n	801184c <sbrk_aligned+0x38>
 8011848:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 801184c:	4620      	mov	r0, r4
 801184e:	bd70      	pop	{r4, r5, r6, pc}
 8011850:	240014d0 	.word	0x240014d0

08011854 <_malloc_r>:
 8011854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011858:	1ccd      	adds	r5, r1, #3
 801185a:	f025 0503 	bic.w	r5, r5, #3
 801185e:	3508      	adds	r5, #8
 8011860:	2d0c      	cmp	r5, #12
 8011862:	bf38      	it	cc
 8011864:	250c      	movcc	r5, #12
 8011866:	2d00      	cmp	r5, #0
 8011868:	4607      	mov	r7, r0
 801186a:	db01      	blt.n	8011870 <_malloc_r+0x1c>
 801186c:	42a9      	cmp	r1, r5
 801186e:	d905      	bls.n	801187c <_malloc_r+0x28>
 8011870:	230c      	movs	r3, #12
 8011872:	603b      	str	r3, [r7, #0]
 8011874:	2600      	movs	r6, #0
 8011876:	4630      	mov	r0, r6
 8011878:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801187c:	4e2e      	ldr	r6, [pc, #184]	; (8011938 <_malloc_r+0xe4>)
 801187e:	f000 fc1f 	bl	80120c0 <__malloc_lock>
 8011882:	6833      	ldr	r3, [r6, #0]
 8011884:	461c      	mov	r4, r3
 8011886:	bb34      	cbnz	r4, 80118d6 <_malloc_r+0x82>
 8011888:	4629      	mov	r1, r5
 801188a:	4638      	mov	r0, r7
 801188c:	f7ff ffc2 	bl	8011814 <sbrk_aligned>
 8011890:	1c43      	adds	r3, r0, #1
 8011892:	4604      	mov	r4, r0
 8011894:	d14d      	bne.n	8011932 <_malloc_r+0xde>
 8011896:	6834      	ldr	r4, [r6, #0]
 8011898:	4626      	mov	r6, r4
 801189a:	2e00      	cmp	r6, #0
 801189c:	d140      	bne.n	8011920 <_malloc_r+0xcc>
 801189e:	6823      	ldr	r3, [r4, #0]
 80118a0:	4631      	mov	r1, r6
 80118a2:	4638      	mov	r0, r7
 80118a4:	eb04 0803 	add.w	r8, r4, r3
 80118a8:	f000 f8d6 	bl	8011a58 <_sbrk_r>
 80118ac:	4580      	cmp	r8, r0
 80118ae:	d13a      	bne.n	8011926 <_malloc_r+0xd2>
 80118b0:	6821      	ldr	r1, [r4, #0]
 80118b2:	3503      	adds	r5, #3
 80118b4:	1a6d      	subs	r5, r5, r1
 80118b6:	f025 0503 	bic.w	r5, r5, #3
 80118ba:	3508      	adds	r5, #8
 80118bc:	2d0c      	cmp	r5, #12
 80118be:	bf38      	it	cc
 80118c0:	250c      	movcc	r5, #12
 80118c2:	4629      	mov	r1, r5
 80118c4:	4638      	mov	r0, r7
 80118c6:	f7ff ffa5 	bl	8011814 <sbrk_aligned>
 80118ca:	3001      	adds	r0, #1
 80118cc:	d02b      	beq.n	8011926 <_malloc_r+0xd2>
 80118ce:	6823      	ldr	r3, [r4, #0]
 80118d0:	442b      	add	r3, r5
 80118d2:	6023      	str	r3, [r4, #0]
 80118d4:	e00e      	b.n	80118f4 <_malloc_r+0xa0>
 80118d6:	6822      	ldr	r2, [r4, #0]
 80118d8:	1b52      	subs	r2, r2, r5
 80118da:	d41e      	bmi.n	801191a <_malloc_r+0xc6>
 80118dc:	2a0b      	cmp	r2, #11
 80118de:	d916      	bls.n	801190e <_malloc_r+0xba>
 80118e0:	1961      	adds	r1, r4, r5
 80118e2:	42a3      	cmp	r3, r4
 80118e4:	6025      	str	r5, [r4, #0]
 80118e6:	bf18      	it	ne
 80118e8:	6059      	strne	r1, [r3, #4]
 80118ea:	6863      	ldr	r3, [r4, #4]
 80118ec:	bf08      	it	eq
 80118ee:	6031      	streq	r1, [r6, #0]
 80118f0:	5162      	str	r2, [r4, r5]
 80118f2:	604b      	str	r3, [r1, #4]
 80118f4:	4638      	mov	r0, r7
 80118f6:	f104 060b 	add.w	r6, r4, #11
 80118fa:	f000 fbe7 	bl	80120cc <__malloc_unlock>
 80118fe:	f026 0607 	bic.w	r6, r6, #7
 8011902:	1d23      	adds	r3, r4, #4
 8011904:	1af2      	subs	r2, r6, r3
 8011906:	d0b6      	beq.n	8011876 <_malloc_r+0x22>
 8011908:	1b9b      	subs	r3, r3, r6
 801190a:	50a3      	str	r3, [r4, r2]
 801190c:	e7b3      	b.n	8011876 <_malloc_r+0x22>
 801190e:	6862      	ldr	r2, [r4, #4]
 8011910:	42a3      	cmp	r3, r4
 8011912:	bf0c      	ite	eq
 8011914:	6032      	streq	r2, [r6, #0]
 8011916:	605a      	strne	r2, [r3, #4]
 8011918:	e7ec      	b.n	80118f4 <_malloc_r+0xa0>
 801191a:	4623      	mov	r3, r4
 801191c:	6864      	ldr	r4, [r4, #4]
 801191e:	e7b2      	b.n	8011886 <_malloc_r+0x32>
 8011920:	4634      	mov	r4, r6
 8011922:	6876      	ldr	r6, [r6, #4]
 8011924:	e7b9      	b.n	801189a <_malloc_r+0x46>
 8011926:	230c      	movs	r3, #12
 8011928:	603b      	str	r3, [r7, #0]
 801192a:	4638      	mov	r0, r7
 801192c:	f000 fbce 	bl	80120cc <__malloc_unlock>
 8011930:	e7a1      	b.n	8011876 <_malloc_r+0x22>
 8011932:	6025      	str	r5, [r4, #0]
 8011934:	e7de      	b.n	80118f4 <_malloc_r+0xa0>
 8011936:	bf00      	nop
 8011938:	240014cc 	.word	0x240014cc

0801193c <iprintf>:
 801193c:	b40f      	push	{r0, r1, r2, r3}
 801193e:	4b0a      	ldr	r3, [pc, #40]	; (8011968 <iprintf+0x2c>)
 8011940:	b513      	push	{r0, r1, r4, lr}
 8011942:	681c      	ldr	r4, [r3, #0]
 8011944:	b124      	cbz	r4, 8011950 <iprintf+0x14>
 8011946:	69a3      	ldr	r3, [r4, #24]
 8011948:	b913      	cbnz	r3, 8011950 <iprintf+0x14>
 801194a:	4620      	mov	r0, r4
 801194c:	f000 fab2 	bl	8011eb4 <__sinit>
 8011950:	ab05      	add	r3, sp, #20
 8011952:	9a04      	ldr	r2, [sp, #16]
 8011954:	68a1      	ldr	r1, [r4, #8]
 8011956:	9301      	str	r3, [sp, #4]
 8011958:	4620      	mov	r0, r4
 801195a:	f000 fbe7 	bl	801212c <_vfiprintf_r>
 801195e:	b002      	add	sp, #8
 8011960:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011964:	b004      	add	sp, #16
 8011966:	4770      	bx	lr
 8011968:	24000028 	.word	0x24000028

0801196c <_puts_r>:
 801196c:	b570      	push	{r4, r5, r6, lr}
 801196e:	460e      	mov	r6, r1
 8011970:	4605      	mov	r5, r0
 8011972:	b118      	cbz	r0, 801197c <_puts_r+0x10>
 8011974:	6983      	ldr	r3, [r0, #24]
 8011976:	b90b      	cbnz	r3, 801197c <_puts_r+0x10>
 8011978:	f000 fa9c 	bl	8011eb4 <__sinit>
 801197c:	69ab      	ldr	r3, [r5, #24]
 801197e:	68ac      	ldr	r4, [r5, #8]
 8011980:	b913      	cbnz	r3, 8011988 <_puts_r+0x1c>
 8011982:	4628      	mov	r0, r5
 8011984:	f000 fa96 	bl	8011eb4 <__sinit>
 8011988:	4b2c      	ldr	r3, [pc, #176]	; (8011a3c <_puts_r+0xd0>)
 801198a:	429c      	cmp	r4, r3
 801198c:	d120      	bne.n	80119d0 <_puts_r+0x64>
 801198e:	686c      	ldr	r4, [r5, #4]
 8011990:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011992:	07db      	lsls	r3, r3, #31
 8011994:	d405      	bmi.n	80119a2 <_puts_r+0x36>
 8011996:	89a3      	ldrh	r3, [r4, #12]
 8011998:	0598      	lsls	r0, r3, #22
 801199a:	d402      	bmi.n	80119a2 <_puts_r+0x36>
 801199c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801199e:	f000 fb27 	bl	8011ff0 <__retarget_lock_acquire_recursive>
 80119a2:	89a3      	ldrh	r3, [r4, #12]
 80119a4:	0719      	lsls	r1, r3, #28
 80119a6:	d51d      	bpl.n	80119e4 <_puts_r+0x78>
 80119a8:	6923      	ldr	r3, [r4, #16]
 80119aa:	b1db      	cbz	r3, 80119e4 <_puts_r+0x78>
 80119ac:	3e01      	subs	r6, #1
 80119ae:	68a3      	ldr	r3, [r4, #8]
 80119b0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80119b4:	3b01      	subs	r3, #1
 80119b6:	60a3      	str	r3, [r4, #8]
 80119b8:	bb39      	cbnz	r1, 8011a0a <_puts_r+0x9e>
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	da38      	bge.n	8011a30 <_puts_r+0xc4>
 80119be:	4622      	mov	r2, r4
 80119c0:	210a      	movs	r1, #10
 80119c2:	4628      	mov	r0, r5
 80119c4:	f000 f89c 	bl	8011b00 <__swbuf_r>
 80119c8:	3001      	adds	r0, #1
 80119ca:	d011      	beq.n	80119f0 <_puts_r+0x84>
 80119cc:	250a      	movs	r5, #10
 80119ce:	e011      	b.n	80119f4 <_puts_r+0x88>
 80119d0:	4b1b      	ldr	r3, [pc, #108]	; (8011a40 <_puts_r+0xd4>)
 80119d2:	429c      	cmp	r4, r3
 80119d4:	d101      	bne.n	80119da <_puts_r+0x6e>
 80119d6:	68ac      	ldr	r4, [r5, #8]
 80119d8:	e7da      	b.n	8011990 <_puts_r+0x24>
 80119da:	4b1a      	ldr	r3, [pc, #104]	; (8011a44 <_puts_r+0xd8>)
 80119dc:	429c      	cmp	r4, r3
 80119de:	bf08      	it	eq
 80119e0:	68ec      	ldreq	r4, [r5, #12]
 80119e2:	e7d5      	b.n	8011990 <_puts_r+0x24>
 80119e4:	4621      	mov	r1, r4
 80119e6:	4628      	mov	r0, r5
 80119e8:	f000 f8dc 	bl	8011ba4 <__swsetup_r>
 80119ec:	2800      	cmp	r0, #0
 80119ee:	d0dd      	beq.n	80119ac <_puts_r+0x40>
 80119f0:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80119f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80119f6:	07da      	lsls	r2, r3, #31
 80119f8:	d405      	bmi.n	8011a06 <_puts_r+0x9a>
 80119fa:	89a3      	ldrh	r3, [r4, #12]
 80119fc:	059b      	lsls	r3, r3, #22
 80119fe:	d402      	bmi.n	8011a06 <_puts_r+0x9a>
 8011a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011a02:	f000 faf6 	bl	8011ff2 <__retarget_lock_release_recursive>
 8011a06:	4628      	mov	r0, r5
 8011a08:	bd70      	pop	{r4, r5, r6, pc}
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	da04      	bge.n	8011a18 <_puts_r+0xac>
 8011a0e:	69a2      	ldr	r2, [r4, #24]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	dc06      	bgt.n	8011a22 <_puts_r+0xb6>
 8011a14:	290a      	cmp	r1, #10
 8011a16:	d004      	beq.n	8011a22 <_puts_r+0xb6>
 8011a18:	6823      	ldr	r3, [r4, #0]
 8011a1a:	1c5a      	adds	r2, r3, #1
 8011a1c:	6022      	str	r2, [r4, #0]
 8011a1e:	7019      	strb	r1, [r3, #0]
 8011a20:	e7c5      	b.n	80119ae <_puts_r+0x42>
 8011a22:	4622      	mov	r2, r4
 8011a24:	4628      	mov	r0, r5
 8011a26:	f000 f86b 	bl	8011b00 <__swbuf_r>
 8011a2a:	3001      	adds	r0, #1
 8011a2c:	d1bf      	bne.n	80119ae <_puts_r+0x42>
 8011a2e:	e7df      	b.n	80119f0 <_puts_r+0x84>
 8011a30:	6823      	ldr	r3, [r4, #0]
 8011a32:	250a      	movs	r5, #10
 8011a34:	1c5a      	adds	r2, r3, #1
 8011a36:	6022      	str	r2, [r4, #0]
 8011a38:	701d      	strb	r5, [r3, #0]
 8011a3a:	e7db      	b.n	80119f4 <_puts_r+0x88>
 8011a3c:	08012ca4 	.word	0x08012ca4
 8011a40:	08012cc4 	.word	0x08012cc4
 8011a44:	08012c84 	.word	0x08012c84

08011a48 <puts>:
 8011a48:	4b02      	ldr	r3, [pc, #8]	; (8011a54 <puts+0xc>)
 8011a4a:	4601      	mov	r1, r0
 8011a4c:	6818      	ldr	r0, [r3, #0]
 8011a4e:	f7ff bf8d 	b.w	801196c <_puts_r>
 8011a52:	bf00      	nop
 8011a54:	24000028 	.word	0x24000028

08011a58 <_sbrk_r>:
 8011a58:	b538      	push	{r3, r4, r5, lr}
 8011a5a:	4d06      	ldr	r5, [pc, #24]	; (8011a74 <_sbrk_r+0x1c>)
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	4604      	mov	r4, r0
 8011a60:	4608      	mov	r0, r1
 8011a62:	602b      	str	r3, [r5, #0]
 8011a64:	f7f5 f818 	bl	8006a98 <_sbrk>
 8011a68:	1c43      	adds	r3, r0, #1
 8011a6a:	d102      	bne.n	8011a72 <_sbrk_r+0x1a>
 8011a6c:	682b      	ldr	r3, [r5, #0]
 8011a6e:	b103      	cbz	r3, 8011a72 <_sbrk_r+0x1a>
 8011a70:	6023      	str	r3, [r4, #0]
 8011a72:	bd38      	pop	{r3, r4, r5, pc}
 8011a74:	240014d8 	.word	0x240014d8

08011a78 <_raise_r>:
 8011a78:	291f      	cmp	r1, #31
 8011a7a:	b538      	push	{r3, r4, r5, lr}
 8011a7c:	4604      	mov	r4, r0
 8011a7e:	460d      	mov	r5, r1
 8011a80:	d904      	bls.n	8011a8c <_raise_r+0x14>
 8011a82:	2316      	movs	r3, #22
 8011a84:	6003      	str	r3, [r0, #0]
 8011a86:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011a8a:	bd38      	pop	{r3, r4, r5, pc}
 8011a8c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8011a8e:	b112      	cbz	r2, 8011a96 <_raise_r+0x1e>
 8011a90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011a94:	b94b      	cbnz	r3, 8011aaa <_raise_r+0x32>
 8011a96:	4620      	mov	r0, r4
 8011a98:	f000 f830 	bl	8011afc <_getpid_r>
 8011a9c:	462a      	mov	r2, r5
 8011a9e:	4601      	mov	r1, r0
 8011aa0:	4620      	mov	r0, r4
 8011aa2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011aa6:	f000 b817 	b.w	8011ad8 <_kill_r>
 8011aaa:	2b01      	cmp	r3, #1
 8011aac:	d00a      	beq.n	8011ac4 <_raise_r+0x4c>
 8011aae:	1c59      	adds	r1, r3, #1
 8011ab0:	d103      	bne.n	8011aba <_raise_r+0x42>
 8011ab2:	2316      	movs	r3, #22
 8011ab4:	6003      	str	r3, [r0, #0]
 8011ab6:	2001      	movs	r0, #1
 8011ab8:	e7e7      	b.n	8011a8a <_raise_r+0x12>
 8011aba:	2400      	movs	r4, #0
 8011abc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8011ac0:	4628      	mov	r0, r5
 8011ac2:	4798      	blx	r3
 8011ac4:	2000      	movs	r0, #0
 8011ac6:	e7e0      	b.n	8011a8a <_raise_r+0x12>

08011ac8 <raise>:
 8011ac8:	4b02      	ldr	r3, [pc, #8]	; (8011ad4 <raise+0xc>)
 8011aca:	4601      	mov	r1, r0
 8011acc:	6818      	ldr	r0, [r3, #0]
 8011ace:	f7ff bfd3 	b.w	8011a78 <_raise_r>
 8011ad2:	bf00      	nop
 8011ad4:	24000028 	.word	0x24000028

08011ad8 <_kill_r>:
 8011ad8:	b538      	push	{r3, r4, r5, lr}
 8011ada:	4d07      	ldr	r5, [pc, #28]	; (8011af8 <_kill_r+0x20>)
 8011adc:	2300      	movs	r3, #0
 8011ade:	4604      	mov	r4, r0
 8011ae0:	4608      	mov	r0, r1
 8011ae2:	4611      	mov	r1, r2
 8011ae4:	602b      	str	r3, [r5, #0]
 8011ae6:	f7f4 ff4f 	bl	8006988 <_kill>
 8011aea:	1c43      	adds	r3, r0, #1
 8011aec:	d102      	bne.n	8011af4 <_kill_r+0x1c>
 8011aee:	682b      	ldr	r3, [r5, #0]
 8011af0:	b103      	cbz	r3, 8011af4 <_kill_r+0x1c>
 8011af2:	6023      	str	r3, [r4, #0]
 8011af4:	bd38      	pop	{r3, r4, r5, pc}
 8011af6:	bf00      	nop
 8011af8:	240014d8 	.word	0x240014d8

08011afc <_getpid_r>:
 8011afc:	f7f4 bf3c 	b.w	8006978 <_getpid>

08011b00 <__swbuf_r>:
 8011b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011b02:	460e      	mov	r6, r1
 8011b04:	4614      	mov	r4, r2
 8011b06:	4605      	mov	r5, r0
 8011b08:	b118      	cbz	r0, 8011b12 <__swbuf_r+0x12>
 8011b0a:	6983      	ldr	r3, [r0, #24]
 8011b0c:	b90b      	cbnz	r3, 8011b12 <__swbuf_r+0x12>
 8011b0e:	f000 f9d1 	bl	8011eb4 <__sinit>
 8011b12:	4b21      	ldr	r3, [pc, #132]	; (8011b98 <__swbuf_r+0x98>)
 8011b14:	429c      	cmp	r4, r3
 8011b16:	d12b      	bne.n	8011b70 <__swbuf_r+0x70>
 8011b18:	686c      	ldr	r4, [r5, #4]
 8011b1a:	69a3      	ldr	r3, [r4, #24]
 8011b1c:	60a3      	str	r3, [r4, #8]
 8011b1e:	89a3      	ldrh	r3, [r4, #12]
 8011b20:	071a      	lsls	r2, r3, #28
 8011b22:	d52f      	bpl.n	8011b84 <__swbuf_r+0x84>
 8011b24:	6923      	ldr	r3, [r4, #16]
 8011b26:	b36b      	cbz	r3, 8011b84 <__swbuf_r+0x84>
 8011b28:	6923      	ldr	r3, [r4, #16]
 8011b2a:	6820      	ldr	r0, [r4, #0]
 8011b2c:	1ac0      	subs	r0, r0, r3
 8011b2e:	6963      	ldr	r3, [r4, #20]
 8011b30:	b2f6      	uxtb	r6, r6
 8011b32:	4283      	cmp	r3, r0
 8011b34:	4637      	mov	r7, r6
 8011b36:	dc04      	bgt.n	8011b42 <__swbuf_r+0x42>
 8011b38:	4621      	mov	r1, r4
 8011b3a:	4628      	mov	r0, r5
 8011b3c:	f000 f926 	bl	8011d8c <_fflush_r>
 8011b40:	bb30      	cbnz	r0, 8011b90 <__swbuf_r+0x90>
 8011b42:	68a3      	ldr	r3, [r4, #8]
 8011b44:	3b01      	subs	r3, #1
 8011b46:	60a3      	str	r3, [r4, #8]
 8011b48:	6823      	ldr	r3, [r4, #0]
 8011b4a:	1c5a      	adds	r2, r3, #1
 8011b4c:	6022      	str	r2, [r4, #0]
 8011b4e:	701e      	strb	r6, [r3, #0]
 8011b50:	6963      	ldr	r3, [r4, #20]
 8011b52:	3001      	adds	r0, #1
 8011b54:	4283      	cmp	r3, r0
 8011b56:	d004      	beq.n	8011b62 <__swbuf_r+0x62>
 8011b58:	89a3      	ldrh	r3, [r4, #12]
 8011b5a:	07db      	lsls	r3, r3, #31
 8011b5c:	d506      	bpl.n	8011b6c <__swbuf_r+0x6c>
 8011b5e:	2e0a      	cmp	r6, #10
 8011b60:	d104      	bne.n	8011b6c <__swbuf_r+0x6c>
 8011b62:	4621      	mov	r1, r4
 8011b64:	4628      	mov	r0, r5
 8011b66:	f000 f911 	bl	8011d8c <_fflush_r>
 8011b6a:	b988      	cbnz	r0, 8011b90 <__swbuf_r+0x90>
 8011b6c:	4638      	mov	r0, r7
 8011b6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011b70:	4b0a      	ldr	r3, [pc, #40]	; (8011b9c <__swbuf_r+0x9c>)
 8011b72:	429c      	cmp	r4, r3
 8011b74:	d101      	bne.n	8011b7a <__swbuf_r+0x7a>
 8011b76:	68ac      	ldr	r4, [r5, #8]
 8011b78:	e7cf      	b.n	8011b1a <__swbuf_r+0x1a>
 8011b7a:	4b09      	ldr	r3, [pc, #36]	; (8011ba0 <__swbuf_r+0xa0>)
 8011b7c:	429c      	cmp	r4, r3
 8011b7e:	bf08      	it	eq
 8011b80:	68ec      	ldreq	r4, [r5, #12]
 8011b82:	e7ca      	b.n	8011b1a <__swbuf_r+0x1a>
 8011b84:	4621      	mov	r1, r4
 8011b86:	4628      	mov	r0, r5
 8011b88:	f000 f80c 	bl	8011ba4 <__swsetup_r>
 8011b8c:	2800      	cmp	r0, #0
 8011b8e:	d0cb      	beq.n	8011b28 <__swbuf_r+0x28>
 8011b90:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8011b94:	e7ea      	b.n	8011b6c <__swbuf_r+0x6c>
 8011b96:	bf00      	nop
 8011b98:	08012ca4 	.word	0x08012ca4
 8011b9c:	08012cc4 	.word	0x08012cc4
 8011ba0:	08012c84 	.word	0x08012c84

08011ba4 <__swsetup_r>:
 8011ba4:	4b32      	ldr	r3, [pc, #200]	; (8011c70 <__swsetup_r+0xcc>)
 8011ba6:	b570      	push	{r4, r5, r6, lr}
 8011ba8:	681d      	ldr	r5, [r3, #0]
 8011baa:	4606      	mov	r6, r0
 8011bac:	460c      	mov	r4, r1
 8011bae:	b125      	cbz	r5, 8011bba <__swsetup_r+0x16>
 8011bb0:	69ab      	ldr	r3, [r5, #24]
 8011bb2:	b913      	cbnz	r3, 8011bba <__swsetup_r+0x16>
 8011bb4:	4628      	mov	r0, r5
 8011bb6:	f000 f97d 	bl	8011eb4 <__sinit>
 8011bba:	4b2e      	ldr	r3, [pc, #184]	; (8011c74 <__swsetup_r+0xd0>)
 8011bbc:	429c      	cmp	r4, r3
 8011bbe:	d10f      	bne.n	8011be0 <__swsetup_r+0x3c>
 8011bc0:	686c      	ldr	r4, [r5, #4]
 8011bc2:	89a3      	ldrh	r3, [r4, #12]
 8011bc4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011bc8:	0719      	lsls	r1, r3, #28
 8011bca:	d42c      	bmi.n	8011c26 <__swsetup_r+0x82>
 8011bcc:	06dd      	lsls	r5, r3, #27
 8011bce:	d411      	bmi.n	8011bf4 <__swsetup_r+0x50>
 8011bd0:	2309      	movs	r3, #9
 8011bd2:	6033      	str	r3, [r6, #0]
 8011bd4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8011bd8:	81a3      	strh	r3, [r4, #12]
 8011bda:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011bde:	e03e      	b.n	8011c5e <__swsetup_r+0xba>
 8011be0:	4b25      	ldr	r3, [pc, #148]	; (8011c78 <__swsetup_r+0xd4>)
 8011be2:	429c      	cmp	r4, r3
 8011be4:	d101      	bne.n	8011bea <__swsetup_r+0x46>
 8011be6:	68ac      	ldr	r4, [r5, #8]
 8011be8:	e7eb      	b.n	8011bc2 <__swsetup_r+0x1e>
 8011bea:	4b24      	ldr	r3, [pc, #144]	; (8011c7c <__swsetup_r+0xd8>)
 8011bec:	429c      	cmp	r4, r3
 8011bee:	bf08      	it	eq
 8011bf0:	68ec      	ldreq	r4, [r5, #12]
 8011bf2:	e7e6      	b.n	8011bc2 <__swsetup_r+0x1e>
 8011bf4:	0758      	lsls	r0, r3, #29
 8011bf6:	d512      	bpl.n	8011c1e <__swsetup_r+0x7a>
 8011bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011bfa:	b141      	cbz	r1, 8011c0e <__swsetup_r+0x6a>
 8011bfc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011c00:	4299      	cmp	r1, r3
 8011c02:	d002      	beq.n	8011c0a <__swsetup_r+0x66>
 8011c04:	4630      	mov	r0, r6
 8011c06:	f7ff fdb9 	bl	801177c <_free_r>
 8011c0a:	2300      	movs	r3, #0
 8011c0c:	6363      	str	r3, [r4, #52]	; 0x34
 8011c0e:	89a3      	ldrh	r3, [r4, #12]
 8011c10:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8011c14:	81a3      	strh	r3, [r4, #12]
 8011c16:	2300      	movs	r3, #0
 8011c18:	6063      	str	r3, [r4, #4]
 8011c1a:	6923      	ldr	r3, [r4, #16]
 8011c1c:	6023      	str	r3, [r4, #0]
 8011c1e:	89a3      	ldrh	r3, [r4, #12]
 8011c20:	f043 0308 	orr.w	r3, r3, #8
 8011c24:	81a3      	strh	r3, [r4, #12]
 8011c26:	6923      	ldr	r3, [r4, #16]
 8011c28:	b94b      	cbnz	r3, 8011c3e <__swsetup_r+0x9a>
 8011c2a:	89a3      	ldrh	r3, [r4, #12]
 8011c2c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8011c30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011c34:	d003      	beq.n	8011c3e <__swsetup_r+0x9a>
 8011c36:	4621      	mov	r1, r4
 8011c38:	4630      	mov	r0, r6
 8011c3a:	f000 fa01 	bl	8012040 <__smakebuf_r>
 8011c3e:	89a0      	ldrh	r0, [r4, #12]
 8011c40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8011c44:	f010 0301 	ands.w	r3, r0, #1
 8011c48:	d00a      	beq.n	8011c60 <__swsetup_r+0xbc>
 8011c4a:	2300      	movs	r3, #0
 8011c4c:	60a3      	str	r3, [r4, #8]
 8011c4e:	6963      	ldr	r3, [r4, #20]
 8011c50:	425b      	negs	r3, r3
 8011c52:	61a3      	str	r3, [r4, #24]
 8011c54:	6923      	ldr	r3, [r4, #16]
 8011c56:	b943      	cbnz	r3, 8011c6a <__swsetup_r+0xc6>
 8011c58:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8011c5c:	d1ba      	bne.n	8011bd4 <__swsetup_r+0x30>
 8011c5e:	bd70      	pop	{r4, r5, r6, pc}
 8011c60:	0781      	lsls	r1, r0, #30
 8011c62:	bf58      	it	pl
 8011c64:	6963      	ldrpl	r3, [r4, #20]
 8011c66:	60a3      	str	r3, [r4, #8]
 8011c68:	e7f4      	b.n	8011c54 <__swsetup_r+0xb0>
 8011c6a:	2000      	movs	r0, #0
 8011c6c:	e7f7      	b.n	8011c5e <__swsetup_r+0xba>
 8011c6e:	bf00      	nop
 8011c70:	24000028 	.word	0x24000028
 8011c74:	08012ca4 	.word	0x08012ca4
 8011c78:	08012cc4 	.word	0x08012cc4
 8011c7c:	08012c84 	.word	0x08012c84

08011c80 <__sflush_r>:
 8011c80:	898a      	ldrh	r2, [r1, #12]
 8011c82:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011c86:	4605      	mov	r5, r0
 8011c88:	0710      	lsls	r0, r2, #28
 8011c8a:	460c      	mov	r4, r1
 8011c8c:	d458      	bmi.n	8011d40 <__sflush_r+0xc0>
 8011c8e:	684b      	ldr	r3, [r1, #4]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	dc05      	bgt.n	8011ca0 <__sflush_r+0x20>
 8011c94:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8011c96:	2b00      	cmp	r3, #0
 8011c98:	dc02      	bgt.n	8011ca0 <__sflush_r+0x20>
 8011c9a:	2000      	movs	r0, #0
 8011c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011ca0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ca2:	2e00      	cmp	r6, #0
 8011ca4:	d0f9      	beq.n	8011c9a <__sflush_r+0x1a>
 8011ca6:	2300      	movs	r3, #0
 8011ca8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8011cac:	682f      	ldr	r7, [r5, #0]
 8011cae:	602b      	str	r3, [r5, #0]
 8011cb0:	d032      	beq.n	8011d18 <__sflush_r+0x98>
 8011cb2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8011cb4:	89a3      	ldrh	r3, [r4, #12]
 8011cb6:	075a      	lsls	r2, r3, #29
 8011cb8:	d505      	bpl.n	8011cc6 <__sflush_r+0x46>
 8011cba:	6863      	ldr	r3, [r4, #4]
 8011cbc:	1ac0      	subs	r0, r0, r3
 8011cbe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8011cc0:	b10b      	cbz	r3, 8011cc6 <__sflush_r+0x46>
 8011cc2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8011cc4:	1ac0      	subs	r0, r0, r3
 8011cc6:	2300      	movs	r3, #0
 8011cc8:	4602      	mov	r2, r0
 8011cca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8011ccc:	6a21      	ldr	r1, [r4, #32]
 8011cce:	4628      	mov	r0, r5
 8011cd0:	47b0      	blx	r6
 8011cd2:	1c43      	adds	r3, r0, #1
 8011cd4:	89a3      	ldrh	r3, [r4, #12]
 8011cd6:	d106      	bne.n	8011ce6 <__sflush_r+0x66>
 8011cd8:	6829      	ldr	r1, [r5, #0]
 8011cda:	291d      	cmp	r1, #29
 8011cdc:	d82c      	bhi.n	8011d38 <__sflush_r+0xb8>
 8011cde:	4a2a      	ldr	r2, [pc, #168]	; (8011d88 <__sflush_r+0x108>)
 8011ce0:	40ca      	lsrs	r2, r1
 8011ce2:	07d6      	lsls	r6, r2, #31
 8011ce4:	d528      	bpl.n	8011d38 <__sflush_r+0xb8>
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	6062      	str	r2, [r4, #4]
 8011cea:	04d9      	lsls	r1, r3, #19
 8011cec:	6922      	ldr	r2, [r4, #16]
 8011cee:	6022      	str	r2, [r4, #0]
 8011cf0:	d504      	bpl.n	8011cfc <__sflush_r+0x7c>
 8011cf2:	1c42      	adds	r2, r0, #1
 8011cf4:	d101      	bne.n	8011cfa <__sflush_r+0x7a>
 8011cf6:	682b      	ldr	r3, [r5, #0]
 8011cf8:	b903      	cbnz	r3, 8011cfc <__sflush_r+0x7c>
 8011cfa:	6560      	str	r0, [r4, #84]	; 0x54
 8011cfc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8011cfe:	602f      	str	r7, [r5, #0]
 8011d00:	2900      	cmp	r1, #0
 8011d02:	d0ca      	beq.n	8011c9a <__sflush_r+0x1a>
 8011d04:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8011d08:	4299      	cmp	r1, r3
 8011d0a:	d002      	beq.n	8011d12 <__sflush_r+0x92>
 8011d0c:	4628      	mov	r0, r5
 8011d0e:	f7ff fd35 	bl	801177c <_free_r>
 8011d12:	2000      	movs	r0, #0
 8011d14:	6360      	str	r0, [r4, #52]	; 0x34
 8011d16:	e7c1      	b.n	8011c9c <__sflush_r+0x1c>
 8011d18:	6a21      	ldr	r1, [r4, #32]
 8011d1a:	2301      	movs	r3, #1
 8011d1c:	4628      	mov	r0, r5
 8011d1e:	47b0      	blx	r6
 8011d20:	1c41      	adds	r1, r0, #1
 8011d22:	d1c7      	bne.n	8011cb4 <__sflush_r+0x34>
 8011d24:	682b      	ldr	r3, [r5, #0]
 8011d26:	2b00      	cmp	r3, #0
 8011d28:	d0c4      	beq.n	8011cb4 <__sflush_r+0x34>
 8011d2a:	2b1d      	cmp	r3, #29
 8011d2c:	d001      	beq.n	8011d32 <__sflush_r+0xb2>
 8011d2e:	2b16      	cmp	r3, #22
 8011d30:	d101      	bne.n	8011d36 <__sflush_r+0xb6>
 8011d32:	602f      	str	r7, [r5, #0]
 8011d34:	e7b1      	b.n	8011c9a <__sflush_r+0x1a>
 8011d36:	89a3      	ldrh	r3, [r4, #12]
 8011d38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d3c:	81a3      	strh	r3, [r4, #12]
 8011d3e:	e7ad      	b.n	8011c9c <__sflush_r+0x1c>
 8011d40:	690f      	ldr	r7, [r1, #16]
 8011d42:	2f00      	cmp	r7, #0
 8011d44:	d0a9      	beq.n	8011c9a <__sflush_r+0x1a>
 8011d46:	0793      	lsls	r3, r2, #30
 8011d48:	680e      	ldr	r6, [r1, #0]
 8011d4a:	bf08      	it	eq
 8011d4c:	694b      	ldreq	r3, [r1, #20]
 8011d4e:	600f      	str	r7, [r1, #0]
 8011d50:	bf18      	it	ne
 8011d52:	2300      	movne	r3, #0
 8011d54:	eba6 0807 	sub.w	r8, r6, r7
 8011d58:	608b      	str	r3, [r1, #8]
 8011d5a:	f1b8 0f00 	cmp.w	r8, #0
 8011d5e:	dd9c      	ble.n	8011c9a <__sflush_r+0x1a>
 8011d60:	6a21      	ldr	r1, [r4, #32]
 8011d62:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8011d64:	4643      	mov	r3, r8
 8011d66:	463a      	mov	r2, r7
 8011d68:	4628      	mov	r0, r5
 8011d6a:	47b0      	blx	r6
 8011d6c:	2800      	cmp	r0, #0
 8011d6e:	dc06      	bgt.n	8011d7e <__sflush_r+0xfe>
 8011d70:	89a3      	ldrh	r3, [r4, #12]
 8011d72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011d76:	81a3      	strh	r3, [r4, #12]
 8011d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011d7c:	e78e      	b.n	8011c9c <__sflush_r+0x1c>
 8011d7e:	4407      	add	r7, r0
 8011d80:	eba8 0800 	sub.w	r8, r8, r0
 8011d84:	e7e9      	b.n	8011d5a <__sflush_r+0xda>
 8011d86:	bf00      	nop
 8011d88:	20400001 	.word	0x20400001

08011d8c <_fflush_r>:
 8011d8c:	b538      	push	{r3, r4, r5, lr}
 8011d8e:	690b      	ldr	r3, [r1, #16]
 8011d90:	4605      	mov	r5, r0
 8011d92:	460c      	mov	r4, r1
 8011d94:	b913      	cbnz	r3, 8011d9c <_fflush_r+0x10>
 8011d96:	2500      	movs	r5, #0
 8011d98:	4628      	mov	r0, r5
 8011d9a:	bd38      	pop	{r3, r4, r5, pc}
 8011d9c:	b118      	cbz	r0, 8011da6 <_fflush_r+0x1a>
 8011d9e:	6983      	ldr	r3, [r0, #24]
 8011da0:	b90b      	cbnz	r3, 8011da6 <_fflush_r+0x1a>
 8011da2:	f000 f887 	bl	8011eb4 <__sinit>
 8011da6:	4b14      	ldr	r3, [pc, #80]	; (8011df8 <_fflush_r+0x6c>)
 8011da8:	429c      	cmp	r4, r3
 8011daa:	d11b      	bne.n	8011de4 <_fflush_r+0x58>
 8011dac:	686c      	ldr	r4, [r5, #4]
 8011dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8011db2:	2b00      	cmp	r3, #0
 8011db4:	d0ef      	beq.n	8011d96 <_fflush_r+0xa>
 8011db6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8011db8:	07d0      	lsls	r0, r2, #31
 8011dba:	d404      	bmi.n	8011dc6 <_fflush_r+0x3a>
 8011dbc:	0599      	lsls	r1, r3, #22
 8011dbe:	d402      	bmi.n	8011dc6 <_fflush_r+0x3a>
 8011dc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dc2:	f000 f915 	bl	8011ff0 <__retarget_lock_acquire_recursive>
 8011dc6:	4628      	mov	r0, r5
 8011dc8:	4621      	mov	r1, r4
 8011dca:	f7ff ff59 	bl	8011c80 <__sflush_r>
 8011dce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8011dd0:	07da      	lsls	r2, r3, #31
 8011dd2:	4605      	mov	r5, r0
 8011dd4:	d4e0      	bmi.n	8011d98 <_fflush_r+0xc>
 8011dd6:	89a3      	ldrh	r3, [r4, #12]
 8011dd8:	059b      	lsls	r3, r3, #22
 8011dda:	d4dd      	bmi.n	8011d98 <_fflush_r+0xc>
 8011ddc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8011dde:	f000 f908 	bl	8011ff2 <__retarget_lock_release_recursive>
 8011de2:	e7d9      	b.n	8011d98 <_fflush_r+0xc>
 8011de4:	4b05      	ldr	r3, [pc, #20]	; (8011dfc <_fflush_r+0x70>)
 8011de6:	429c      	cmp	r4, r3
 8011de8:	d101      	bne.n	8011dee <_fflush_r+0x62>
 8011dea:	68ac      	ldr	r4, [r5, #8]
 8011dec:	e7df      	b.n	8011dae <_fflush_r+0x22>
 8011dee:	4b04      	ldr	r3, [pc, #16]	; (8011e00 <_fflush_r+0x74>)
 8011df0:	429c      	cmp	r4, r3
 8011df2:	bf08      	it	eq
 8011df4:	68ec      	ldreq	r4, [r5, #12]
 8011df6:	e7da      	b.n	8011dae <_fflush_r+0x22>
 8011df8:	08012ca4 	.word	0x08012ca4
 8011dfc:	08012cc4 	.word	0x08012cc4
 8011e00:	08012c84 	.word	0x08012c84

08011e04 <std>:
 8011e04:	2300      	movs	r3, #0
 8011e06:	b510      	push	{r4, lr}
 8011e08:	4604      	mov	r4, r0
 8011e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8011e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8011e12:	6083      	str	r3, [r0, #8]
 8011e14:	8181      	strh	r1, [r0, #12]
 8011e16:	6643      	str	r3, [r0, #100]	; 0x64
 8011e18:	81c2      	strh	r2, [r0, #14]
 8011e1a:	6183      	str	r3, [r0, #24]
 8011e1c:	4619      	mov	r1, r3
 8011e1e:	2208      	movs	r2, #8
 8011e20:	305c      	adds	r0, #92	; 0x5c
 8011e22:	f7ff fca3 	bl	801176c <memset>
 8011e26:	4b05      	ldr	r3, [pc, #20]	; (8011e3c <std+0x38>)
 8011e28:	6263      	str	r3, [r4, #36]	; 0x24
 8011e2a:	4b05      	ldr	r3, [pc, #20]	; (8011e40 <std+0x3c>)
 8011e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8011e2e:	4b05      	ldr	r3, [pc, #20]	; (8011e44 <std+0x40>)
 8011e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8011e32:	4b05      	ldr	r3, [pc, #20]	; (8011e48 <std+0x44>)
 8011e34:	6224      	str	r4, [r4, #32]
 8011e36:	6323      	str	r3, [r4, #48]	; 0x30
 8011e38:	bd10      	pop	{r4, pc}
 8011e3a:	bf00      	nop
 8011e3c:	080126b5 	.word	0x080126b5
 8011e40:	080126d7 	.word	0x080126d7
 8011e44:	0801270f 	.word	0x0801270f
 8011e48:	08012733 	.word	0x08012733

08011e4c <_cleanup_r>:
 8011e4c:	4901      	ldr	r1, [pc, #4]	; (8011e54 <_cleanup_r+0x8>)
 8011e4e:	f000 b8af 	b.w	8011fb0 <_fwalk_reent>
 8011e52:	bf00      	nop
 8011e54:	08011d8d 	.word	0x08011d8d

08011e58 <__sfmoreglue>:
 8011e58:	b570      	push	{r4, r5, r6, lr}
 8011e5a:	2268      	movs	r2, #104	; 0x68
 8011e5c:	1e4d      	subs	r5, r1, #1
 8011e5e:	4355      	muls	r5, r2
 8011e60:	460e      	mov	r6, r1
 8011e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8011e66:	f7ff fcf5 	bl	8011854 <_malloc_r>
 8011e6a:	4604      	mov	r4, r0
 8011e6c:	b140      	cbz	r0, 8011e80 <__sfmoreglue+0x28>
 8011e6e:	2100      	movs	r1, #0
 8011e70:	e9c0 1600 	strd	r1, r6, [r0]
 8011e74:	300c      	adds	r0, #12
 8011e76:	60a0      	str	r0, [r4, #8]
 8011e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8011e7c:	f7ff fc76 	bl	801176c <memset>
 8011e80:	4620      	mov	r0, r4
 8011e82:	bd70      	pop	{r4, r5, r6, pc}

08011e84 <__sfp_lock_acquire>:
 8011e84:	4801      	ldr	r0, [pc, #4]	; (8011e8c <__sfp_lock_acquire+0x8>)
 8011e86:	f000 b8b3 	b.w	8011ff0 <__retarget_lock_acquire_recursive>
 8011e8a:	bf00      	nop
 8011e8c:	240014d5 	.word	0x240014d5

08011e90 <__sfp_lock_release>:
 8011e90:	4801      	ldr	r0, [pc, #4]	; (8011e98 <__sfp_lock_release+0x8>)
 8011e92:	f000 b8ae 	b.w	8011ff2 <__retarget_lock_release_recursive>
 8011e96:	bf00      	nop
 8011e98:	240014d5 	.word	0x240014d5

08011e9c <__sinit_lock_acquire>:
 8011e9c:	4801      	ldr	r0, [pc, #4]	; (8011ea4 <__sinit_lock_acquire+0x8>)
 8011e9e:	f000 b8a7 	b.w	8011ff0 <__retarget_lock_acquire_recursive>
 8011ea2:	bf00      	nop
 8011ea4:	240014d6 	.word	0x240014d6

08011ea8 <__sinit_lock_release>:
 8011ea8:	4801      	ldr	r0, [pc, #4]	; (8011eb0 <__sinit_lock_release+0x8>)
 8011eaa:	f000 b8a2 	b.w	8011ff2 <__retarget_lock_release_recursive>
 8011eae:	bf00      	nop
 8011eb0:	240014d6 	.word	0x240014d6

08011eb4 <__sinit>:
 8011eb4:	b510      	push	{r4, lr}
 8011eb6:	4604      	mov	r4, r0
 8011eb8:	f7ff fff0 	bl	8011e9c <__sinit_lock_acquire>
 8011ebc:	69a3      	ldr	r3, [r4, #24]
 8011ebe:	b11b      	cbz	r3, 8011ec8 <__sinit+0x14>
 8011ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011ec4:	f7ff bff0 	b.w	8011ea8 <__sinit_lock_release>
 8011ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8011ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8011ece:	4b13      	ldr	r3, [pc, #76]	; (8011f1c <__sinit+0x68>)
 8011ed0:	4a13      	ldr	r2, [pc, #76]	; (8011f20 <__sinit+0x6c>)
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8011ed6:	42a3      	cmp	r3, r4
 8011ed8:	bf04      	itt	eq
 8011eda:	2301      	moveq	r3, #1
 8011edc:	61a3      	streq	r3, [r4, #24]
 8011ede:	4620      	mov	r0, r4
 8011ee0:	f000 f820 	bl	8011f24 <__sfp>
 8011ee4:	6060      	str	r0, [r4, #4]
 8011ee6:	4620      	mov	r0, r4
 8011ee8:	f000 f81c 	bl	8011f24 <__sfp>
 8011eec:	60a0      	str	r0, [r4, #8]
 8011eee:	4620      	mov	r0, r4
 8011ef0:	f000 f818 	bl	8011f24 <__sfp>
 8011ef4:	2200      	movs	r2, #0
 8011ef6:	60e0      	str	r0, [r4, #12]
 8011ef8:	2104      	movs	r1, #4
 8011efa:	6860      	ldr	r0, [r4, #4]
 8011efc:	f7ff ff82 	bl	8011e04 <std>
 8011f00:	68a0      	ldr	r0, [r4, #8]
 8011f02:	2201      	movs	r2, #1
 8011f04:	2109      	movs	r1, #9
 8011f06:	f7ff ff7d 	bl	8011e04 <std>
 8011f0a:	68e0      	ldr	r0, [r4, #12]
 8011f0c:	2202      	movs	r2, #2
 8011f0e:	2112      	movs	r1, #18
 8011f10:	f7ff ff78 	bl	8011e04 <std>
 8011f14:	2301      	movs	r3, #1
 8011f16:	61a3      	str	r3, [r4, #24]
 8011f18:	e7d2      	b.n	8011ec0 <__sinit+0xc>
 8011f1a:	bf00      	nop
 8011f1c:	08012c80 	.word	0x08012c80
 8011f20:	08011e4d 	.word	0x08011e4d

08011f24 <__sfp>:
 8011f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f26:	4607      	mov	r7, r0
 8011f28:	f7ff ffac 	bl	8011e84 <__sfp_lock_acquire>
 8011f2c:	4b1e      	ldr	r3, [pc, #120]	; (8011fa8 <__sfp+0x84>)
 8011f2e:	681e      	ldr	r6, [r3, #0]
 8011f30:	69b3      	ldr	r3, [r6, #24]
 8011f32:	b913      	cbnz	r3, 8011f3a <__sfp+0x16>
 8011f34:	4630      	mov	r0, r6
 8011f36:	f7ff ffbd 	bl	8011eb4 <__sinit>
 8011f3a:	3648      	adds	r6, #72	; 0x48
 8011f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8011f40:	3b01      	subs	r3, #1
 8011f42:	d503      	bpl.n	8011f4c <__sfp+0x28>
 8011f44:	6833      	ldr	r3, [r6, #0]
 8011f46:	b30b      	cbz	r3, 8011f8c <__sfp+0x68>
 8011f48:	6836      	ldr	r6, [r6, #0]
 8011f4a:	e7f7      	b.n	8011f3c <__sfp+0x18>
 8011f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8011f50:	b9d5      	cbnz	r5, 8011f88 <__sfp+0x64>
 8011f52:	4b16      	ldr	r3, [pc, #88]	; (8011fac <__sfp+0x88>)
 8011f54:	60e3      	str	r3, [r4, #12]
 8011f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8011f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8011f5c:	f000 f847 	bl	8011fee <__retarget_lock_init_recursive>
 8011f60:	f7ff ff96 	bl	8011e90 <__sfp_lock_release>
 8011f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8011f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8011f6c:	6025      	str	r5, [r4, #0]
 8011f6e:	61a5      	str	r5, [r4, #24]
 8011f70:	2208      	movs	r2, #8
 8011f72:	4629      	mov	r1, r5
 8011f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8011f78:	f7ff fbf8 	bl	801176c <memset>
 8011f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8011f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8011f84:	4620      	mov	r0, r4
 8011f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011f88:	3468      	adds	r4, #104	; 0x68
 8011f8a:	e7d9      	b.n	8011f40 <__sfp+0x1c>
 8011f8c:	2104      	movs	r1, #4
 8011f8e:	4638      	mov	r0, r7
 8011f90:	f7ff ff62 	bl	8011e58 <__sfmoreglue>
 8011f94:	4604      	mov	r4, r0
 8011f96:	6030      	str	r0, [r6, #0]
 8011f98:	2800      	cmp	r0, #0
 8011f9a:	d1d5      	bne.n	8011f48 <__sfp+0x24>
 8011f9c:	f7ff ff78 	bl	8011e90 <__sfp_lock_release>
 8011fa0:	230c      	movs	r3, #12
 8011fa2:	603b      	str	r3, [r7, #0]
 8011fa4:	e7ee      	b.n	8011f84 <__sfp+0x60>
 8011fa6:	bf00      	nop
 8011fa8:	08012c80 	.word	0x08012c80
 8011fac:	ffff0001 	.word	0xffff0001

08011fb0 <_fwalk_reent>:
 8011fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011fb4:	4606      	mov	r6, r0
 8011fb6:	4688      	mov	r8, r1
 8011fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8011fbc:	2700      	movs	r7, #0
 8011fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8011fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8011fc6:	d505      	bpl.n	8011fd4 <_fwalk_reent+0x24>
 8011fc8:	6824      	ldr	r4, [r4, #0]
 8011fca:	2c00      	cmp	r4, #0
 8011fcc:	d1f7      	bne.n	8011fbe <_fwalk_reent+0xe>
 8011fce:	4638      	mov	r0, r7
 8011fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011fd4:	89ab      	ldrh	r3, [r5, #12]
 8011fd6:	2b01      	cmp	r3, #1
 8011fd8:	d907      	bls.n	8011fea <_fwalk_reent+0x3a>
 8011fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8011fde:	3301      	adds	r3, #1
 8011fe0:	d003      	beq.n	8011fea <_fwalk_reent+0x3a>
 8011fe2:	4629      	mov	r1, r5
 8011fe4:	4630      	mov	r0, r6
 8011fe6:	47c0      	blx	r8
 8011fe8:	4307      	orrs	r7, r0
 8011fea:	3568      	adds	r5, #104	; 0x68
 8011fec:	e7e9      	b.n	8011fc2 <_fwalk_reent+0x12>

08011fee <__retarget_lock_init_recursive>:
 8011fee:	4770      	bx	lr

08011ff0 <__retarget_lock_acquire_recursive>:
 8011ff0:	4770      	bx	lr

08011ff2 <__retarget_lock_release_recursive>:
 8011ff2:	4770      	bx	lr

08011ff4 <__swhatbuf_r>:
 8011ff4:	b570      	push	{r4, r5, r6, lr}
 8011ff6:	460e      	mov	r6, r1
 8011ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011ffc:	2900      	cmp	r1, #0
 8011ffe:	b096      	sub	sp, #88	; 0x58
 8012000:	4614      	mov	r4, r2
 8012002:	461d      	mov	r5, r3
 8012004:	da08      	bge.n	8012018 <__swhatbuf_r+0x24>
 8012006:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 801200a:	2200      	movs	r2, #0
 801200c:	602a      	str	r2, [r5, #0]
 801200e:	061a      	lsls	r2, r3, #24
 8012010:	d410      	bmi.n	8012034 <__swhatbuf_r+0x40>
 8012012:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012016:	e00e      	b.n	8012036 <__swhatbuf_r+0x42>
 8012018:	466a      	mov	r2, sp
 801201a:	f000 fbb1 	bl	8012780 <_fstat_r>
 801201e:	2800      	cmp	r0, #0
 8012020:	dbf1      	blt.n	8012006 <__swhatbuf_r+0x12>
 8012022:	9a01      	ldr	r2, [sp, #4]
 8012024:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8012028:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801202c:	425a      	negs	r2, r3
 801202e:	415a      	adcs	r2, r3
 8012030:	602a      	str	r2, [r5, #0]
 8012032:	e7ee      	b.n	8012012 <__swhatbuf_r+0x1e>
 8012034:	2340      	movs	r3, #64	; 0x40
 8012036:	2000      	movs	r0, #0
 8012038:	6023      	str	r3, [r4, #0]
 801203a:	b016      	add	sp, #88	; 0x58
 801203c:	bd70      	pop	{r4, r5, r6, pc}
	...

08012040 <__smakebuf_r>:
 8012040:	898b      	ldrh	r3, [r1, #12]
 8012042:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8012044:	079d      	lsls	r5, r3, #30
 8012046:	4606      	mov	r6, r0
 8012048:	460c      	mov	r4, r1
 801204a:	d507      	bpl.n	801205c <__smakebuf_r+0x1c>
 801204c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8012050:	6023      	str	r3, [r4, #0]
 8012052:	6123      	str	r3, [r4, #16]
 8012054:	2301      	movs	r3, #1
 8012056:	6163      	str	r3, [r4, #20]
 8012058:	b002      	add	sp, #8
 801205a:	bd70      	pop	{r4, r5, r6, pc}
 801205c:	ab01      	add	r3, sp, #4
 801205e:	466a      	mov	r2, sp
 8012060:	f7ff ffc8 	bl	8011ff4 <__swhatbuf_r>
 8012064:	9900      	ldr	r1, [sp, #0]
 8012066:	4605      	mov	r5, r0
 8012068:	4630      	mov	r0, r6
 801206a:	f7ff fbf3 	bl	8011854 <_malloc_r>
 801206e:	b948      	cbnz	r0, 8012084 <__smakebuf_r+0x44>
 8012070:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8012074:	059a      	lsls	r2, r3, #22
 8012076:	d4ef      	bmi.n	8012058 <__smakebuf_r+0x18>
 8012078:	f023 0303 	bic.w	r3, r3, #3
 801207c:	f043 0302 	orr.w	r3, r3, #2
 8012080:	81a3      	strh	r3, [r4, #12]
 8012082:	e7e3      	b.n	801204c <__smakebuf_r+0xc>
 8012084:	4b0d      	ldr	r3, [pc, #52]	; (80120bc <__smakebuf_r+0x7c>)
 8012086:	62b3      	str	r3, [r6, #40]	; 0x28
 8012088:	89a3      	ldrh	r3, [r4, #12]
 801208a:	6020      	str	r0, [r4, #0]
 801208c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012090:	81a3      	strh	r3, [r4, #12]
 8012092:	9b00      	ldr	r3, [sp, #0]
 8012094:	6163      	str	r3, [r4, #20]
 8012096:	9b01      	ldr	r3, [sp, #4]
 8012098:	6120      	str	r0, [r4, #16]
 801209a:	b15b      	cbz	r3, 80120b4 <__smakebuf_r+0x74>
 801209c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80120a0:	4630      	mov	r0, r6
 80120a2:	f000 fb7f 	bl	80127a4 <_isatty_r>
 80120a6:	b128      	cbz	r0, 80120b4 <__smakebuf_r+0x74>
 80120a8:	89a3      	ldrh	r3, [r4, #12]
 80120aa:	f023 0303 	bic.w	r3, r3, #3
 80120ae:	f043 0301 	orr.w	r3, r3, #1
 80120b2:	81a3      	strh	r3, [r4, #12]
 80120b4:	89a0      	ldrh	r0, [r4, #12]
 80120b6:	4305      	orrs	r5, r0
 80120b8:	81a5      	strh	r5, [r4, #12]
 80120ba:	e7cd      	b.n	8012058 <__smakebuf_r+0x18>
 80120bc:	08011e4d 	.word	0x08011e4d

080120c0 <__malloc_lock>:
 80120c0:	4801      	ldr	r0, [pc, #4]	; (80120c8 <__malloc_lock+0x8>)
 80120c2:	f7ff bf95 	b.w	8011ff0 <__retarget_lock_acquire_recursive>
 80120c6:	bf00      	nop
 80120c8:	240014d4 	.word	0x240014d4

080120cc <__malloc_unlock>:
 80120cc:	4801      	ldr	r0, [pc, #4]	; (80120d4 <__malloc_unlock+0x8>)
 80120ce:	f7ff bf90 	b.w	8011ff2 <__retarget_lock_release_recursive>
 80120d2:	bf00      	nop
 80120d4:	240014d4 	.word	0x240014d4

080120d8 <__sfputc_r>:
 80120d8:	6893      	ldr	r3, [r2, #8]
 80120da:	3b01      	subs	r3, #1
 80120dc:	2b00      	cmp	r3, #0
 80120de:	b410      	push	{r4}
 80120e0:	6093      	str	r3, [r2, #8]
 80120e2:	da08      	bge.n	80120f6 <__sfputc_r+0x1e>
 80120e4:	6994      	ldr	r4, [r2, #24]
 80120e6:	42a3      	cmp	r3, r4
 80120e8:	db01      	blt.n	80120ee <__sfputc_r+0x16>
 80120ea:	290a      	cmp	r1, #10
 80120ec:	d103      	bne.n	80120f6 <__sfputc_r+0x1e>
 80120ee:	f85d 4b04 	ldr.w	r4, [sp], #4
 80120f2:	f7ff bd05 	b.w	8011b00 <__swbuf_r>
 80120f6:	6813      	ldr	r3, [r2, #0]
 80120f8:	1c58      	adds	r0, r3, #1
 80120fa:	6010      	str	r0, [r2, #0]
 80120fc:	7019      	strb	r1, [r3, #0]
 80120fe:	4608      	mov	r0, r1
 8012100:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012104:	4770      	bx	lr

08012106 <__sfputs_r>:
 8012106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012108:	4606      	mov	r6, r0
 801210a:	460f      	mov	r7, r1
 801210c:	4614      	mov	r4, r2
 801210e:	18d5      	adds	r5, r2, r3
 8012110:	42ac      	cmp	r4, r5
 8012112:	d101      	bne.n	8012118 <__sfputs_r+0x12>
 8012114:	2000      	movs	r0, #0
 8012116:	e007      	b.n	8012128 <__sfputs_r+0x22>
 8012118:	f814 1b01 	ldrb.w	r1, [r4], #1
 801211c:	463a      	mov	r2, r7
 801211e:	4630      	mov	r0, r6
 8012120:	f7ff ffda 	bl	80120d8 <__sfputc_r>
 8012124:	1c43      	adds	r3, r0, #1
 8012126:	d1f3      	bne.n	8012110 <__sfputs_r+0xa>
 8012128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801212c <_vfiprintf_r>:
 801212c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012130:	460d      	mov	r5, r1
 8012132:	b09d      	sub	sp, #116	; 0x74
 8012134:	4614      	mov	r4, r2
 8012136:	4698      	mov	r8, r3
 8012138:	4606      	mov	r6, r0
 801213a:	b118      	cbz	r0, 8012144 <_vfiprintf_r+0x18>
 801213c:	6983      	ldr	r3, [r0, #24]
 801213e:	b90b      	cbnz	r3, 8012144 <_vfiprintf_r+0x18>
 8012140:	f7ff feb8 	bl	8011eb4 <__sinit>
 8012144:	4b89      	ldr	r3, [pc, #548]	; (801236c <_vfiprintf_r+0x240>)
 8012146:	429d      	cmp	r5, r3
 8012148:	d11b      	bne.n	8012182 <_vfiprintf_r+0x56>
 801214a:	6875      	ldr	r5, [r6, #4]
 801214c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801214e:	07d9      	lsls	r1, r3, #31
 8012150:	d405      	bmi.n	801215e <_vfiprintf_r+0x32>
 8012152:	89ab      	ldrh	r3, [r5, #12]
 8012154:	059a      	lsls	r2, r3, #22
 8012156:	d402      	bmi.n	801215e <_vfiprintf_r+0x32>
 8012158:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801215a:	f7ff ff49 	bl	8011ff0 <__retarget_lock_acquire_recursive>
 801215e:	89ab      	ldrh	r3, [r5, #12]
 8012160:	071b      	lsls	r3, r3, #28
 8012162:	d501      	bpl.n	8012168 <_vfiprintf_r+0x3c>
 8012164:	692b      	ldr	r3, [r5, #16]
 8012166:	b9eb      	cbnz	r3, 80121a4 <_vfiprintf_r+0x78>
 8012168:	4629      	mov	r1, r5
 801216a:	4630      	mov	r0, r6
 801216c:	f7ff fd1a 	bl	8011ba4 <__swsetup_r>
 8012170:	b1c0      	cbz	r0, 80121a4 <_vfiprintf_r+0x78>
 8012172:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8012174:	07dc      	lsls	r4, r3, #31
 8012176:	d50e      	bpl.n	8012196 <_vfiprintf_r+0x6a>
 8012178:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 801217c:	b01d      	add	sp, #116	; 0x74
 801217e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012182:	4b7b      	ldr	r3, [pc, #492]	; (8012370 <_vfiprintf_r+0x244>)
 8012184:	429d      	cmp	r5, r3
 8012186:	d101      	bne.n	801218c <_vfiprintf_r+0x60>
 8012188:	68b5      	ldr	r5, [r6, #8]
 801218a:	e7df      	b.n	801214c <_vfiprintf_r+0x20>
 801218c:	4b79      	ldr	r3, [pc, #484]	; (8012374 <_vfiprintf_r+0x248>)
 801218e:	429d      	cmp	r5, r3
 8012190:	bf08      	it	eq
 8012192:	68f5      	ldreq	r5, [r6, #12]
 8012194:	e7da      	b.n	801214c <_vfiprintf_r+0x20>
 8012196:	89ab      	ldrh	r3, [r5, #12]
 8012198:	0598      	lsls	r0, r3, #22
 801219a:	d4ed      	bmi.n	8012178 <_vfiprintf_r+0x4c>
 801219c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801219e:	f7ff ff28 	bl	8011ff2 <__retarget_lock_release_recursive>
 80121a2:	e7e9      	b.n	8012178 <_vfiprintf_r+0x4c>
 80121a4:	2300      	movs	r3, #0
 80121a6:	9309      	str	r3, [sp, #36]	; 0x24
 80121a8:	2320      	movs	r3, #32
 80121aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80121ae:	f8cd 800c 	str.w	r8, [sp, #12]
 80121b2:	2330      	movs	r3, #48	; 0x30
 80121b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8012378 <_vfiprintf_r+0x24c>
 80121b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80121bc:	f04f 0901 	mov.w	r9, #1
 80121c0:	4623      	mov	r3, r4
 80121c2:	469a      	mov	sl, r3
 80121c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80121c8:	b10a      	cbz	r2, 80121ce <_vfiprintf_r+0xa2>
 80121ca:	2a25      	cmp	r2, #37	; 0x25
 80121cc:	d1f9      	bne.n	80121c2 <_vfiprintf_r+0x96>
 80121ce:	ebba 0b04 	subs.w	fp, sl, r4
 80121d2:	d00b      	beq.n	80121ec <_vfiprintf_r+0xc0>
 80121d4:	465b      	mov	r3, fp
 80121d6:	4622      	mov	r2, r4
 80121d8:	4629      	mov	r1, r5
 80121da:	4630      	mov	r0, r6
 80121dc:	f7ff ff93 	bl	8012106 <__sfputs_r>
 80121e0:	3001      	adds	r0, #1
 80121e2:	f000 80aa 	beq.w	801233a <_vfiprintf_r+0x20e>
 80121e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80121e8:	445a      	add	r2, fp
 80121ea:	9209      	str	r2, [sp, #36]	; 0x24
 80121ec:	f89a 3000 	ldrb.w	r3, [sl]
 80121f0:	2b00      	cmp	r3, #0
 80121f2:	f000 80a2 	beq.w	801233a <_vfiprintf_r+0x20e>
 80121f6:	2300      	movs	r3, #0
 80121f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80121fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8012200:	f10a 0a01 	add.w	sl, sl, #1
 8012204:	9304      	str	r3, [sp, #16]
 8012206:	9307      	str	r3, [sp, #28]
 8012208:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801220c:	931a      	str	r3, [sp, #104]	; 0x68
 801220e:	4654      	mov	r4, sl
 8012210:	2205      	movs	r2, #5
 8012212:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012216:	4858      	ldr	r0, [pc, #352]	; (8012378 <_vfiprintf_r+0x24c>)
 8012218:	f7ee f862 	bl	80002e0 <memchr>
 801221c:	9a04      	ldr	r2, [sp, #16]
 801221e:	b9d8      	cbnz	r0, 8012258 <_vfiprintf_r+0x12c>
 8012220:	06d1      	lsls	r1, r2, #27
 8012222:	bf44      	itt	mi
 8012224:	2320      	movmi	r3, #32
 8012226:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801222a:	0713      	lsls	r3, r2, #28
 801222c:	bf44      	itt	mi
 801222e:	232b      	movmi	r3, #43	; 0x2b
 8012230:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8012234:	f89a 3000 	ldrb.w	r3, [sl]
 8012238:	2b2a      	cmp	r3, #42	; 0x2a
 801223a:	d015      	beq.n	8012268 <_vfiprintf_r+0x13c>
 801223c:	9a07      	ldr	r2, [sp, #28]
 801223e:	4654      	mov	r4, sl
 8012240:	2000      	movs	r0, #0
 8012242:	f04f 0c0a 	mov.w	ip, #10
 8012246:	4621      	mov	r1, r4
 8012248:	f811 3b01 	ldrb.w	r3, [r1], #1
 801224c:	3b30      	subs	r3, #48	; 0x30
 801224e:	2b09      	cmp	r3, #9
 8012250:	d94e      	bls.n	80122f0 <_vfiprintf_r+0x1c4>
 8012252:	b1b0      	cbz	r0, 8012282 <_vfiprintf_r+0x156>
 8012254:	9207      	str	r2, [sp, #28]
 8012256:	e014      	b.n	8012282 <_vfiprintf_r+0x156>
 8012258:	eba0 0308 	sub.w	r3, r0, r8
 801225c:	fa09 f303 	lsl.w	r3, r9, r3
 8012260:	4313      	orrs	r3, r2
 8012262:	9304      	str	r3, [sp, #16]
 8012264:	46a2      	mov	sl, r4
 8012266:	e7d2      	b.n	801220e <_vfiprintf_r+0xe2>
 8012268:	9b03      	ldr	r3, [sp, #12]
 801226a:	1d19      	adds	r1, r3, #4
 801226c:	681b      	ldr	r3, [r3, #0]
 801226e:	9103      	str	r1, [sp, #12]
 8012270:	2b00      	cmp	r3, #0
 8012272:	bfbb      	ittet	lt
 8012274:	425b      	neglt	r3, r3
 8012276:	f042 0202 	orrlt.w	r2, r2, #2
 801227a:	9307      	strge	r3, [sp, #28]
 801227c:	9307      	strlt	r3, [sp, #28]
 801227e:	bfb8      	it	lt
 8012280:	9204      	strlt	r2, [sp, #16]
 8012282:	7823      	ldrb	r3, [r4, #0]
 8012284:	2b2e      	cmp	r3, #46	; 0x2e
 8012286:	d10c      	bne.n	80122a2 <_vfiprintf_r+0x176>
 8012288:	7863      	ldrb	r3, [r4, #1]
 801228a:	2b2a      	cmp	r3, #42	; 0x2a
 801228c:	d135      	bne.n	80122fa <_vfiprintf_r+0x1ce>
 801228e:	9b03      	ldr	r3, [sp, #12]
 8012290:	1d1a      	adds	r2, r3, #4
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	9203      	str	r2, [sp, #12]
 8012296:	2b00      	cmp	r3, #0
 8012298:	bfb8      	it	lt
 801229a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 801229e:	3402      	adds	r4, #2
 80122a0:	9305      	str	r3, [sp, #20]
 80122a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8012388 <_vfiprintf_r+0x25c>
 80122a6:	7821      	ldrb	r1, [r4, #0]
 80122a8:	2203      	movs	r2, #3
 80122aa:	4650      	mov	r0, sl
 80122ac:	f7ee f818 	bl	80002e0 <memchr>
 80122b0:	b140      	cbz	r0, 80122c4 <_vfiprintf_r+0x198>
 80122b2:	2340      	movs	r3, #64	; 0x40
 80122b4:	eba0 000a 	sub.w	r0, r0, sl
 80122b8:	fa03 f000 	lsl.w	r0, r3, r0
 80122bc:	9b04      	ldr	r3, [sp, #16]
 80122be:	4303      	orrs	r3, r0
 80122c0:	3401      	adds	r4, #1
 80122c2:	9304      	str	r3, [sp, #16]
 80122c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80122c8:	482c      	ldr	r0, [pc, #176]	; (801237c <_vfiprintf_r+0x250>)
 80122ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80122ce:	2206      	movs	r2, #6
 80122d0:	f7ee f806 	bl	80002e0 <memchr>
 80122d4:	2800      	cmp	r0, #0
 80122d6:	d03f      	beq.n	8012358 <_vfiprintf_r+0x22c>
 80122d8:	4b29      	ldr	r3, [pc, #164]	; (8012380 <_vfiprintf_r+0x254>)
 80122da:	bb1b      	cbnz	r3, 8012324 <_vfiprintf_r+0x1f8>
 80122dc:	9b03      	ldr	r3, [sp, #12]
 80122de:	3307      	adds	r3, #7
 80122e0:	f023 0307 	bic.w	r3, r3, #7
 80122e4:	3308      	adds	r3, #8
 80122e6:	9303      	str	r3, [sp, #12]
 80122e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80122ea:	443b      	add	r3, r7
 80122ec:	9309      	str	r3, [sp, #36]	; 0x24
 80122ee:	e767      	b.n	80121c0 <_vfiprintf_r+0x94>
 80122f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80122f4:	460c      	mov	r4, r1
 80122f6:	2001      	movs	r0, #1
 80122f8:	e7a5      	b.n	8012246 <_vfiprintf_r+0x11a>
 80122fa:	2300      	movs	r3, #0
 80122fc:	3401      	adds	r4, #1
 80122fe:	9305      	str	r3, [sp, #20]
 8012300:	4619      	mov	r1, r3
 8012302:	f04f 0c0a 	mov.w	ip, #10
 8012306:	4620      	mov	r0, r4
 8012308:	f810 2b01 	ldrb.w	r2, [r0], #1
 801230c:	3a30      	subs	r2, #48	; 0x30
 801230e:	2a09      	cmp	r2, #9
 8012310:	d903      	bls.n	801231a <_vfiprintf_r+0x1ee>
 8012312:	2b00      	cmp	r3, #0
 8012314:	d0c5      	beq.n	80122a2 <_vfiprintf_r+0x176>
 8012316:	9105      	str	r1, [sp, #20]
 8012318:	e7c3      	b.n	80122a2 <_vfiprintf_r+0x176>
 801231a:	fb0c 2101 	mla	r1, ip, r1, r2
 801231e:	4604      	mov	r4, r0
 8012320:	2301      	movs	r3, #1
 8012322:	e7f0      	b.n	8012306 <_vfiprintf_r+0x1da>
 8012324:	ab03      	add	r3, sp, #12
 8012326:	9300      	str	r3, [sp, #0]
 8012328:	462a      	mov	r2, r5
 801232a:	4b16      	ldr	r3, [pc, #88]	; (8012384 <_vfiprintf_r+0x258>)
 801232c:	a904      	add	r1, sp, #16
 801232e:	4630      	mov	r0, r6
 8012330:	f3af 8000 	nop.w
 8012334:	4607      	mov	r7, r0
 8012336:	1c78      	adds	r0, r7, #1
 8012338:	d1d6      	bne.n	80122e8 <_vfiprintf_r+0x1bc>
 801233a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801233c:	07d9      	lsls	r1, r3, #31
 801233e:	d405      	bmi.n	801234c <_vfiprintf_r+0x220>
 8012340:	89ab      	ldrh	r3, [r5, #12]
 8012342:	059a      	lsls	r2, r3, #22
 8012344:	d402      	bmi.n	801234c <_vfiprintf_r+0x220>
 8012346:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8012348:	f7ff fe53 	bl	8011ff2 <__retarget_lock_release_recursive>
 801234c:	89ab      	ldrh	r3, [r5, #12]
 801234e:	065b      	lsls	r3, r3, #25
 8012350:	f53f af12 	bmi.w	8012178 <_vfiprintf_r+0x4c>
 8012354:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012356:	e711      	b.n	801217c <_vfiprintf_r+0x50>
 8012358:	ab03      	add	r3, sp, #12
 801235a:	9300      	str	r3, [sp, #0]
 801235c:	462a      	mov	r2, r5
 801235e:	4b09      	ldr	r3, [pc, #36]	; (8012384 <_vfiprintf_r+0x258>)
 8012360:	a904      	add	r1, sp, #16
 8012362:	4630      	mov	r0, r6
 8012364:	f000 f880 	bl	8012468 <_printf_i>
 8012368:	e7e4      	b.n	8012334 <_vfiprintf_r+0x208>
 801236a:	bf00      	nop
 801236c:	08012ca4 	.word	0x08012ca4
 8012370:	08012cc4 	.word	0x08012cc4
 8012374:	08012c84 	.word	0x08012c84
 8012378:	08012ce4 	.word	0x08012ce4
 801237c:	08012cee 	.word	0x08012cee
 8012380:	00000000 	.word	0x00000000
 8012384:	08012107 	.word	0x08012107
 8012388:	08012cea 	.word	0x08012cea

0801238c <_printf_common>:
 801238c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012390:	4616      	mov	r6, r2
 8012392:	4699      	mov	r9, r3
 8012394:	688a      	ldr	r2, [r1, #8]
 8012396:	690b      	ldr	r3, [r1, #16]
 8012398:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801239c:	4293      	cmp	r3, r2
 801239e:	bfb8      	it	lt
 80123a0:	4613      	movlt	r3, r2
 80123a2:	6033      	str	r3, [r6, #0]
 80123a4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80123a8:	4607      	mov	r7, r0
 80123aa:	460c      	mov	r4, r1
 80123ac:	b10a      	cbz	r2, 80123b2 <_printf_common+0x26>
 80123ae:	3301      	adds	r3, #1
 80123b0:	6033      	str	r3, [r6, #0]
 80123b2:	6823      	ldr	r3, [r4, #0]
 80123b4:	0699      	lsls	r1, r3, #26
 80123b6:	bf42      	ittt	mi
 80123b8:	6833      	ldrmi	r3, [r6, #0]
 80123ba:	3302      	addmi	r3, #2
 80123bc:	6033      	strmi	r3, [r6, #0]
 80123be:	6825      	ldr	r5, [r4, #0]
 80123c0:	f015 0506 	ands.w	r5, r5, #6
 80123c4:	d106      	bne.n	80123d4 <_printf_common+0x48>
 80123c6:	f104 0a19 	add.w	sl, r4, #25
 80123ca:	68e3      	ldr	r3, [r4, #12]
 80123cc:	6832      	ldr	r2, [r6, #0]
 80123ce:	1a9b      	subs	r3, r3, r2
 80123d0:	42ab      	cmp	r3, r5
 80123d2:	dc26      	bgt.n	8012422 <_printf_common+0x96>
 80123d4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80123d8:	1e13      	subs	r3, r2, #0
 80123da:	6822      	ldr	r2, [r4, #0]
 80123dc:	bf18      	it	ne
 80123de:	2301      	movne	r3, #1
 80123e0:	0692      	lsls	r2, r2, #26
 80123e2:	d42b      	bmi.n	801243c <_printf_common+0xb0>
 80123e4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80123e8:	4649      	mov	r1, r9
 80123ea:	4638      	mov	r0, r7
 80123ec:	47c0      	blx	r8
 80123ee:	3001      	adds	r0, #1
 80123f0:	d01e      	beq.n	8012430 <_printf_common+0xa4>
 80123f2:	6823      	ldr	r3, [r4, #0]
 80123f4:	68e5      	ldr	r5, [r4, #12]
 80123f6:	6832      	ldr	r2, [r6, #0]
 80123f8:	f003 0306 	and.w	r3, r3, #6
 80123fc:	2b04      	cmp	r3, #4
 80123fe:	bf08      	it	eq
 8012400:	1aad      	subeq	r5, r5, r2
 8012402:	68a3      	ldr	r3, [r4, #8]
 8012404:	6922      	ldr	r2, [r4, #16]
 8012406:	bf0c      	ite	eq
 8012408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801240c:	2500      	movne	r5, #0
 801240e:	4293      	cmp	r3, r2
 8012410:	bfc4      	itt	gt
 8012412:	1a9b      	subgt	r3, r3, r2
 8012414:	18ed      	addgt	r5, r5, r3
 8012416:	2600      	movs	r6, #0
 8012418:	341a      	adds	r4, #26
 801241a:	42b5      	cmp	r5, r6
 801241c:	d11a      	bne.n	8012454 <_printf_common+0xc8>
 801241e:	2000      	movs	r0, #0
 8012420:	e008      	b.n	8012434 <_printf_common+0xa8>
 8012422:	2301      	movs	r3, #1
 8012424:	4652      	mov	r2, sl
 8012426:	4649      	mov	r1, r9
 8012428:	4638      	mov	r0, r7
 801242a:	47c0      	blx	r8
 801242c:	3001      	adds	r0, #1
 801242e:	d103      	bne.n	8012438 <_printf_common+0xac>
 8012430:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8012434:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012438:	3501      	adds	r5, #1
 801243a:	e7c6      	b.n	80123ca <_printf_common+0x3e>
 801243c:	18e1      	adds	r1, r4, r3
 801243e:	1c5a      	adds	r2, r3, #1
 8012440:	2030      	movs	r0, #48	; 0x30
 8012442:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8012446:	4422      	add	r2, r4
 8012448:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801244c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8012450:	3302      	adds	r3, #2
 8012452:	e7c7      	b.n	80123e4 <_printf_common+0x58>
 8012454:	2301      	movs	r3, #1
 8012456:	4622      	mov	r2, r4
 8012458:	4649      	mov	r1, r9
 801245a:	4638      	mov	r0, r7
 801245c:	47c0      	blx	r8
 801245e:	3001      	adds	r0, #1
 8012460:	d0e6      	beq.n	8012430 <_printf_common+0xa4>
 8012462:	3601      	adds	r6, #1
 8012464:	e7d9      	b.n	801241a <_printf_common+0x8e>
	...

08012468 <_printf_i>:
 8012468:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801246c:	7e0f      	ldrb	r7, [r1, #24]
 801246e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012470:	2f78      	cmp	r7, #120	; 0x78
 8012472:	4691      	mov	r9, r2
 8012474:	4680      	mov	r8, r0
 8012476:	460c      	mov	r4, r1
 8012478:	469a      	mov	sl, r3
 801247a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801247e:	d807      	bhi.n	8012490 <_printf_i+0x28>
 8012480:	2f62      	cmp	r7, #98	; 0x62
 8012482:	d80a      	bhi.n	801249a <_printf_i+0x32>
 8012484:	2f00      	cmp	r7, #0
 8012486:	f000 80d8 	beq.w	801263a <_printf_i+0x1d2>
 801248a:	2f58      	cmp	r7, #88	; 0x58
 801248c:	f000 80a3 	beq.w	80125d6 <_printf_i+0x16e>
 8012490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012494:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012498:	e03a      	b.n	8012510 <_printf_i+0xa8>
 801249a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801249e:	2b15      	cmp	r3, #21
 80124a0:	d8f6      	bhi.n	8012490 <_printf_i+0x28>
 80124a2:	a101      	add	r1, pc, #4	; (adr r1, 80124a8 <_printf_i+0x40>)
 80124a4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80124a8:	08012501 	.word	0x08012501
 80124ac:	08012515 	.word	0x08012515
 80124b0:	08012491 	.word	0x08012491
 80124b4:	08012491 	.word	0x08012491
 80124b8:	08012491 	.word	0x08012491
 80124bc:	08012491 	.word	0x08012491
 80124c0:	08012515 	.word	0x08012515
 80124c4:	08012491 	.word	0x08012491
 80124c8:	08012491 	.word	0x08012491
 80124cc:	08012491 	.word	0x08012491
 80124d0:	08012491 	.word	0x08012491
 80124d4:	08012621 	.word	0x08012621
 80124d8:	08012545 	.word	0x08012545
 80124dc:	08012603 	.word	0x08012603
 80124e0:	08012491 	.word	0x08012491
 80124e4:	08012491 	.word	0x08012491
 80124e8:	08012643 	.word	0x08012643
 80124ec:	08012491 	.word	0x08012491
 80124f0:	08012545 	.word	0x08012545
 80124f4:	08012491 	.word	0x08012491
 80124f8:	08012491 	.word	0x08012491
 80124fc:	0801260b 	.word	0x0801260b
 8012500:	682b      	ldr	r3, [r5, #0]
 8012502:	1d1a      	adds	r2, r3, #4
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	602a      	str	r2, [r5, #0]
 8012508:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801250c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012510:	2301      	movs	r3, #1
 8012512:	e0a3      	b.n	801265c <_printf_i+0x1f4>
 8012514:	6820      	ldr	r0, [r4, #0]
 8012516:	6829      	ldr	r1, [r5, #0]
 8012518:	0606      	lsls	r6, r0, #24
 801251a:	f101 0304 	add.w	r3, r1, #4
 801251e:	d50a      	bpl.n	8012536 <_printf_i+0xce>
 8012520:	680e      	ldr	r6, [r1, #0]
 8012522:	602b      	str	r3, [r5, #0]
 8012524:	2e00      	cmp	r6, #0
 8012526:	da03      	bge.n	8012530 <_printf_i+0xc8>
 8012528:	232d      	movs	r3, #45	; 0x2d
 801252a:	4276      	negs	r6, r6
 801252c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012530:	485e      	ldr	r0, [pc, #376]	; (80126ac <_printf_i+0x244>)
 8012532:	230a      	movs	r3, #10
 8012534:	e019      	b.n	801256a <_printf_i+0x102>
 8012536:	680e      	ldr	r6, [r1, #0]
 8012538:	602b      	str	r3, [r5, #0]
 801253a:	f010 0f40 	tst.w	r0, #64	; 0x40
 801253e:	bf18      	it	ne
 8012540:	b236      	sxthne	r6, r6
 8012542:	e7ef      	b.n	8012524 <_printf_i+0xbc>
 8012544:	682b      	ldr	r3, [r5, #0]
 8012546:	6820      	ldr	r0, [r4, #0]
 8012548:	1d19      	adds	r1, r3, #4
 801254a:	6029      	str	r1, [r5, #0]
 801254c:	0601      	lsls	r1, r0, #24
 801254e:	d501      	bpl.n	8012554 <_printf_i+0xec>
 8012550:	681e      	ldr	r6, [r3, #0]
 8012552:	e002      	b.n	801255a <_printf_i+0xf2>
 8012554:	0646      	lsls	r6, r0, #25
 8012556:	d5fb      	bpl.n	8012550 <_printf_i+0xe8>
 8012558:	881e      	ldrh	r6, [r3, #0]
 801255a:	4854      	ldr	r0, [pc, #336]	; (80126ac <_printf_i+0x244>)
 801255c:	2f6f      	cmp	r7, #111	; 0x6f
 801255e:	bf0c      	ite	eq
 8012560:	2308      	moveq	r3, #8
 8012562:	230a      	movne	r3, #10
 8012564:	2100      	movs	r1, #0
 8012566:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801256a:	6865      	ldr	r5, [r4, #4]
 801256c:	60a5      	str	r5, [r4, #8]
 801256e:	2d00      	cmp	r5, #0
 8012570:	bfa2      	ittt	ge
 8012572:	6821      	ldrge	r1, [r4, #0]
 8012574:	f021 0104 	bicge.w	r1, r1, #4
 8012578:	6021      	strge	r1, [r4, #0]
 801257a:	b90e      	cbnz	r6, 8012580 <_printf_i+0x118>
 801257c:	2d00      	cmp	r5, #0
 801257e:	d04d      	beq.n	801261c <_printf_i+0x1b4>
 8012580:	4615      	mov	r5, r2
 8012582:	fbb6 f1f3 	udiv	r1, r6, r3
 8012586:	fb03 6711 	mls	r7, r3, r1, r6
 801258a:	5dc7      	ldrb	r7, [r0, r7]
 801258c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012590:	4637      	mov	r7, r6
 8012592:	42bb      	cmp	r3, r7
 8012594:	460e      	mov	r6, r1
 8012596:	d9f4      	bls.n	8012582 <_printf_i+0x11a>
 8012598:	2b08      	cmp	r3, #8
 801259a:	d10b      	bne.n	80125b4 <_printf_i+0x14c>
 801259c:	6823      	ldr	r3, [r4, #0]
 801259e:	07de      	lsls	r6, r3, #31
 80125a0:	d508      	bpl.n	80125b4 <_printf_i+0x14c>
 80125a2:	6923      	ldr	r3, [r4, #16]
 80125a4:	6861      	ldr	r1, [r4, #4]
 80125a6:	4299      	cmp	r1, r3
 80125a8:	bfde      	ittt	le
 80125aa:	2330      	movle	r3, #48	; 0x30
 80125ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80125b0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80125b4:	1b52      	subs	r2, r2, r5
 80125b6:	6122      	str	r2, [r4, #16]
 80125b8:	f8cd a000 	str.w	sl, [sp]
 80125bc:	464b      	mov	r3, r9
 80125be:	aa03      	add	r2, sp, #12
 80125c0:	4621      	mov	r1, r4
 80125c2:	4640      	mov	r0, r8
 80125c4:	f7ff fee2 	bl	801238c <_printf_common>
 80125c8:	3001      	adds	r0, #1
 80125ca:	d14c      	bne.n	8012666 <_printf_i+0x1fe>
 80125cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80125d0:	b004      	add	sp, #16
 80125d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80125d6:	4835      	ldr	r0, [pc, #212]	; (80126ac <_printf_i+0x244>)
 80125d8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80125dc:	6829      	ldr	r1, [r5, #0]
 80125de:	6823      	ldr	r3, [r4, #0]
 80125e0:	f851 6b04 	ldr.w	r6, [r1], #4
 80125e4:	6029      	str	r1, [r5, #0]
 80125e6:	061d      	lsls	r5, r3, #24
 80125e8:	d514      	bpl.n	8012614 <_printf_i+0x1ac>
 80125ea:	07df      	lsls	r7, r3, #31
 80125ec:	bf44      	itt	mi
 80125ee:	f043 0320 	orrmi.w	r3, r3, #32
 80125f2:	6023      	strmi	r3, [r4, #0]
 80125f4:	b91e      	cbnz	r6, 80125fe <_printf_i+0x196>
 80125f6:	6823      	ldr	r3, [r4, #0]
 80125f8:	f023 0320 	bic.w	r3, r3, #32
 80125fc:	6023      	str	r3, [r4, #0]
 80125fe:	2310      	movs	r3, #16
 8012600:	e7b0      	b.n	8012564 <_printf_i+0xfc>
 8012602:	6823      	ldr	r3, [r4, #0]
 8012604:	f043 0320 	orr.w	r3, r3, #32
 8012608:	6023      	str	r3, [r4, #0]
 801260a:	2378      	movs	r3, #120	; 0x78
 801260c:	4828      	ldr	r0, [pc, #160]	; (80126b0 <_printf_i+0x248>)
 801260e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8012612:	e7e3      	b.n	80125dc <_printf_i+0x174>
 8012614:	0659      	lsls	r1, r3, #25
 8012616:	bf48      	it	mi
 8012618:	b2b6      	uxthmi	r6, r6
 801261a:	e7e6      	b.n	80125ea <_printf_i+0x182>
 801261c:	4615      	mov	r5, r2
 801261e:	e7bb      	b.n	8012598 <_printf_i+0x130>
 8012620:	682b      	ldr	r3, [r5, #0]
 8012622:	6826      	ldr	r6, [r4, #0]
 8012624:	6961      	ldr	r1, [r4, #20]
 8012626:	1d18      	adds	r0, r3, #4
 8012628:	6028      	str	r0, [r5, #0]
 801262a:	0635      	lsls	r5, r6, #24
 801262c:	681b      	ldr	r3, [r3, #0]
 801262e:	d501      	bpl.n	8012634 <_printf_i+0x1cc>
 8012630:	6019      	str	r1, [r3, #0]
 8012632:	e002      	b.n	801263a <_printf_i+0x1d2>
 8012634:	0670      	lsls	r0, r6, #25
 8012636:	d5fb      	bpl.n	8012630 <_printf_i+0x1c8>
 8012638:	8019      	strh	r1, [r3, #0]
 801263a:	2300      	movs	r3, #0
 801263c:	6123      	str	r3, [r4, #16]
 801263e:	4615      	mov	r5, r2
 8012640:	e7ba      	b.n	80125b8 <_printf_i+0x150>
 8012642:	682b      	ldr	r3, [r5, #0]
 8012644:	1d1a      	adds	r2, r3, #4
 8012646:	602a      	str	r2, [r5, #0]
 8012648:	681d      	ldr	r5, [r3, #0]
 801264a:	6862      	ldr	r2, [r4, #4]
 801264c:	2100      	movs	r1, #0
 801264e:	4628      	mov	r0, r5
 8012650:	f7ed fe46 	bl	80002e0 <memchr>
 8012654:	b108      	cbz	r0, 801265a <_printf_i+0x1f2>
 8012656:	1b40      	subs	r0, r0, r5
 8012658:	6060      	str	r0, [r4, #4]
 801265a:	6863      	ldr	r3, [r4, #4]
 801265c:	6123      	str	r3, [r4, #16]
 801265e:	2300      	movs	r3, #0
 8012660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012664:	e7a8      	b.n	80125b8 <_printf_i+0x150>
 8012666:	6923      	ldr	r3, [r4, #16]
 8012668:	462a      	mov	r2, r5
 801266a:	4649      	mov	r1, r9
 801266c:	4640      	mov	r0, r8
 801266e:	47d0      	blx	sl
 8012670:	3001      	adds	r0, #1
 8012672:	d0ab      	beq.n	80125cc <_printf_i+0x164>
 8012674:	6823      	ldr	r3, [r4, #0]
 8012676:	079b      	lsls	r3, r3, #30
 8012678:	d413      	bmi.n	80126a2 <_printf_i+0x23a>
 801267a:	68e0      	ldr	r0, [r4, #12]
 801267c:	9b03      	ldr	r3, [sp, #12]
 801267e:	4298      	cmp	r0, r3
 8012680:	bfb8      	it	lt
 8012682:	4618      	movlt	r0, r3
 8012684:	e7a4      	b.n	80125d0 <_printf_i+0x168>
 8012686:	2301      	movs	r3, #1
 8012688:	4632      	mov	r2, r6
 801268a:	4649      	mov	r1, r9
 801268c:	4640      	mov	r0, r8
 801268e:	47d0      	blx	sl
 8012690:	3001      	adds	r0, #1
 8012692:	d09b      	beq.n	80125cc <_printf_i+0x164>
 8012694:	3501      	adds	r5, #1
 8012696:	68e3      	ldr	r3, [r4, #12]
 8012698:	9903      	ldr	r1, [sp, #12]
 801269a:	1a5b      	subs	r3, r3, r1
 801269c:	42ab      	cmp	r3, r5
 801269e:	dcf2      	bgt.n	8012686 <_printf_i+0x21e>
 80126a0:	e7eb      	b.n	801267a <_printf_i+0x212>
 80126a2:	2500      	movs	r5, #0
 80126a4:	f104 0619 	add.w	r6, r4, #25
 80126a8:	e7f5      	b.n	8012696 <_printf_i+0x22e>
 80126aa:	bf00      	nop
 80126ac:	08012cf5 	.word	0x08012cf5
 80126b0:	08012d06 	.word	0x08012d06

080126b4 <__sread>:
 80126b4:	b510      	push	{r4, lr}
 80126b6:	460c      	mov	r4, r1
 80126b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126bc:	f000 f894 	bl	80127e8 <_read_r>
 80126c0:	2800      	cmp	r0, #0
 80126c2:	bfab      	itete	ge
 80126c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80126c6:	89a3      	ldrhlt	r3, [r4, #12]
 80126c8:	181b      	addge	r3, r3, r0
 80126ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80126ce:	bfac      	ite	ge
 80126d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80126d2:	81a3      	strhlt	r3, [r4, #12]
 80126d4:	bd10      	pop	{r4, pc}

080126d6 <__swrite>:
 80126d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80126da:	461f      	mov	r7, r3
 80126dc:	898b      	ldrh	r3, [r1, #12]
 80126de:	05db      	lsls	r3, r3, #23
 80126e0:	4605      	mov	r5, r0
 80126e2:	460c      	mov	r4, r1
 80126e4:	4616      	mov	r6, r2
 80126e6:	d505      	bpl.n	80126f4 <__swrite+0x1e>
 80126e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80126ec:	2302      	movs	r3, #2
 80126ee:	2200      	movs	r2, #0
 80126f0:	f000 f868 	bl	80127c4 <_lseek_r>
 80126f4:	89a3      	ldrh	r3, [r4, #12]
 80126f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80126fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80126fe:	81a3      	strh	r3, [r4, #12]
 8012700:	4632      	mov	r2, r6
 8012702:	463b      	mov	r3, r7
 8012704:	4628      	mov	r0, r5
 8012706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801270a:	f000 b817 	b.w	801273c <_write_r>

0801270e <__sseek>:
 801270e:	b510      	push	{r4, lr}
 8012710:	460c      	mov	r4, r1
 8012712:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012716:	f000 f855 	bl	80127c4 <_lseek_r>
 801271a:	1c43      	adds	r3, r0, #1
 801271c:	89a3      	ldrh	r3, [r4, #12]
 801271e:	bf15      	itete	ne
 8012720:	6560      	strne	r0, [r4, #84]	; 0x54
 8012722:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8012726:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801272a:	81a3      	strheq	r3, [r4, #12]
 801272c:	bf18      	it	ne
 801272e:	81a3      	strhne	r3, [r4, #12]
 8012730:	bd10      	pop	{r4, pc}

08012732 <__sclose>:
 8012732:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8012736:	f000 b813 	b.w	8012760 <_close_r>
	...

0801273c <_write_r>:
 801273c:	b538      	push	{r3, r4, r5, lr}
 801273e:	4d07      	ldr	r5, [pc, #28]	; (801275c <_write_r+0x20>)
 8012740:	4604      	mov	r4, r0
 8012742:	4608      	mov	r0, r1
 8012744:	4611      	mov	r1, r2
 8012746:	2200      	movs	r2, #0
 8012748:	602a      	str	r2, [r5, #0]
 801274a:	461a      	mov	r2, r3
 801274c:	f7f4 f953 	bl	80069f6 <_write>
 8012750:	1c43      	adds	r3, r0, #1
 8012752:	d102      	bne.n	801275a <_write_r+0x1e>
 8012754:	682b      	ldr	r3, [r5, #0]
 8012756:	b103      	cbz	r3, 801275a <_write_r+0x1e>
 8012758:	6023      	str	r3, [r4, #0]
 801275a:	bd38      	pop	{r3, r4, r5, pc}
 801275c:	240014d8 	.word	0x240014d8

08012760 <_close_r>:
 8012760:	b538      	push	{r3, r4, r5, lr}
 8012762:	4d06      	ldr	r5, [pc, #24]	; (801277c <_close_r+0x1c>)
 8012764:	2300      	movs	r3, #0
 8012766:	4604      	mov	r4, r0
 8012768:	4608      	mov	r0, r1
 801276a:	602b      	str	r3, [r5, #0]
 801276c:	f7f4 f95f 	bl	8006a2e <_close>
 8012770:	1c43      	adds	r3, r0, #1
 8012772:	d102      	bne.n	801277a <_close_r+0x1a>
 8012774:	682b      	ldr	r3, [r5, #0]
 8012776:	b103      	cbz	r3, 801277a <_close_r+0x1a>
 8012778:	6023      	str	r3, [r4, #0]
 801277a:	bd38      	pop	{r3, r4, r5, pc}
 801277c:	240014d8 	.word	0x240014d8

08012780 <_fstat_r>:
 8012780:	b538      	push	{r3, r4, r5, lr}
 8012782:	4d07      	ldr	r5, [pc, #28]	; (80127a0 <_fstat_r+0x20>)
 8012784:	2300      	movs	r3, #0
 8012786:	4604      	mov	r4, r0
 8012788:	4608      	mov	r0, r1
 801278a:	4611      	mov	r1, r2
 801278c:	602b      	str	r3, [r5, #0]
 801278e:	f7f4 f95a 	bl	8006a46 <_fstat>
 8012792:	1c43      	adds	r3, r0, #1
 8012794:	d102      	bne.n	801279c <_fstat_r+0x1c>
 8012796:	682b      	ldr	r3, [r5, #0]
 8012798:	b103      	cbz	r3, 801279c <_fstat_r+0x1c>
 801279a:	6023      	str	r3, [r4, #0]
 801279c:	bd38      	pop	{r3, r4, r5, pc}
 801279e:	bf00      	nop
 80127a0:	240014d8 	.word	0x240014d8

080127a4 <_isatty_r>:
 80127a4:	b538      	push	{r3, r4, r5, lr}
 80127a6:	4d06      	ldr	r5, [pc, #24]	; (80127c0 <_isatty_r+0x1c>)
 80127a8:	2300      	movs	r3, #0
 80127aa:	4604      	mov	r4, r0
 80127ac:	4608      	mov	r0, r1
 80127ae:	602b      	str	r3, [r5, #0]
 80127b0:	f7f4 f959 	bl	8006a66 <_isatty>
 80127b4:	1c43      	adds	r3, r0, #1
 80127b6:	d102      	bne.n	80127be <_isatty_r+0x1a>
 80127b8:	682b      	ldr	r3, [r5, #0]
 80127ba:	b103      	cbz	r3, 80127be <_isatty_r+0x1a>
 80127bc:	6023      	str	r3, [r4, #0]
 80127be:	bd38      	pop	{r3, r4, r5, pc}
 80127c0:	240014d8 	.word	0x240014d8

080127c4 <_lseek_r>:
 80127c4:	b538      	push	{r3, r4, r5, lr}
 80127c6:	4d07      	ldr	r5, [pc, #28]	; (80127e4 <_lseek_r+0x20>)
 80127c8:	4604      	mov	r4, r0
 80127ca:	4608      	mov	r0, r1
 80127cc:	4611      	mov	r1, r2
 80127ce:	2200      	movs	r2, #0
 80127d0:	602a      	str	r2, [r5, #0]
 80127d2:	461a      	mov	r2, r3
 80127d4:	f7f4 f952 	bl	8006a7c <_lseek>
 80127d8:	1c43      	adds	r3, r0, #1
 80127da:	d102      	bne.n	80127e2 <_lseek_r+0x1e>
 80127dc:	682b      	ldr	r3, [r5, #0]
 80127de:	b103      	cbz	r3, 80127e2 <_lseek_r+0x1e>
 80127e0:	6023      	str	r3, [r4, #0]
 80127e2:	bd38      	pop	{r3, r4, r5, pc}
 80127e4:	240014d8 	.word	0x240014d8

080127e8 <_read_r>:
 80127e8:	b538      	push	{r3, r4, r5, lr}
 80127ea:	4d07      	ldr	r5, [pc, #28]	; (8012808 <_read_r+0x20>)
 80127ec:	4604      	mov	r4, r0
 80127ee:	4608      	mov	r0, r1
 80127f0:	4611      	mov	r1, r2
 80127f2:	2200      	movs	r2, #0
 80127f4:	602a      	str	r2, [r5, #0]
 80127f6:	461a      	mov	r2, r3
 80127f8:	f7f4 f8e0 	bl	80069bc <_read>
 80127fc:	1c43      	adds	r3, r0, #1
 80127fe:	d102      	bne.n	8012806 <_read_r+0x1e>
 8012800:	682b      	ldr	r3, [r5, #0]
 8012802:	b103      	cbz	r3, 8012806 <_read_r+0x1e>
 8012804:	6023      	str	r3, [r4, #0]
 8012806:	bd38      	pop	{r3, r4, r5, pc}
 8012808:	240014d8 	.word	0x240014d8

0801280c <_init>:
 801280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801280e:	bf00      	nop
 8012810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012812:	bc08      	pop	{r3}
 8012814:	469e      	mov	lr, r3
 8012816:	4770      	bx	lr

08012818 <_fini>:
 8012818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801281a:	bf00      	nop
 801281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801281e:	bc08      	pop	{r3}
 8012820:	469e      	mov	lr, r3
 8012822:	4770      	bx	lr
